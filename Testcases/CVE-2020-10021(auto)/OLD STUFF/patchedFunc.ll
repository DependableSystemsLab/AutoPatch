; ModuleID = '/home/mohsen/AutoPatch/Testcases/CVE-Lists/CVE-2020-10021(auto)/patchedFunc.c'
source_filename = "/home/mohsen/AutoPatch/Testcases/CVE-Lists/CVE-2020-10021(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CBW = type { i32, i32, i32, i8, i8, i8, [16 x i8] }
%struct.CSW = type { i32, i32, i32, i8 }

@cbw = internal global %struct.CBW zeroinitializer, align 4, !dbg !0
@.str = private unnamed_addr constant [20 x i8] c"LBA (block) ; 0x%x \00", align 1
@memory_size = internal global i32 0, align 4, !dbg !32
@addr = internal global i32 0, align 4, !dbg !28
@length = internal global i32 0, align 4, !dbg !30
@.str.1 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@csw = internal global %struct.CSW zeroinitializer, align 4, !dbg !13

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @infoTransfer() #0 !dbg !52 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %n, metadata !57, metadata !DIExpression()), !dbg !58
  %0 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 2), align 1, !dbg !59
  %conv = zext i8 %0 to i32, !dbg !59
  %shl = shl i32 %conv, 24, !dbg !60
  %1 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 3), align 1, !dbg !61
  %conv1 = zext i8 %1 to i32, !dbg !61
  %shl2 = shl i32 %conv1, 16, !dbg !62
  %or = or i32 %shl, %shl2, !dbg !63
  %2 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 4), align 1, !dbg !64
  %conv3 = zext i8 %2 to i32, !dbg !64
  %shl4 = shl i32 %conv3, 8, !dbg !65
  %or5 = or i32 %or, %shl4, !dbg !66
  %3 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 5), align 1, !dbg !67
  %conv6 = zext i8 %3 to i32, !dbg !67
  %shl7 = shl i32 %conv6, 0, !dbg !68
  %or8 = or i32 %or5, %shl7, !dbg !69
  store i32 %or8, i32* %n, align 4, !dbg !70
  %4 = load i32, i32* %n, align 4, !dbg !71
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 %4), !dbg !72
  %5 = load i32, i32* %n, align 4, !dbg !73
  %mul = mul i32 %5, 512, !dbg !75
  %6 = load i32, i32* @memory_size, align 4, !dbg !76
  %cmp = icmp uge i32 %mul, %6, !dbg !77
  br i1 %cmp, label %if.then, label %if.end, !dbg !78

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !79
  br label %return, !dbg !79

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %n, align 4, !dbg !81
  %mul10 = mul i32 %7, 512, !dbg !82
  store i32 %mul10, i32* @addr, align 4, !dbg !83
  %8 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 0), align 1, !dbg !84
  %conv11 = zext i8 %8 to i32, !dbg !84
  switch i32 %conv11, label %sw.epilog [
    i32 40, label %sw.bb
    i32 42, label %sw.bb
    i32 47, label %sw.bb
    i32 168, label %sw.bb17
    i32 170, label %sw.bb17
  ], !dbg !85

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  %9 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 7), align 1, !dbg !86
  %conv12 = zext i8 %9 to i32, !dbg !86
  %shl13 = shl i32 %conv12, 8, !dbg !88
  %10 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 8), align 1, !dbg !89
  %conv14 = zext i8 %10 to i32, !dbg !89
  %shl15 = shl i32 %conv14, 0, !dbg !90
  %or16 = or i32 %shl13, %shl15, !dbg !91
  store i32 %or16, i32* %n, align 4, !dbg !92
  br label %sw.epilog, !dbg !93

sw.bb17:                                          ; preds = %if.end, %if.end
  %11 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 6), align 1, !dbg !94
  %conv18 = zext i8 %11 to i32, !dbg !94
  %shl19 = shl i32 %conv18, 24, !dbg !95
  %12 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 7), align 1, !dbg !96
  %conv20 = zext i8 %12 to i32, !dbg !96
  %shl21 = shl i32 %conv20, 16, !dbg !97
  %or22 = or i32 %shl19, %shl21, !dbg !98
  %13 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 8), align 1, !dbg !99
  %conv23 = zext i8 %13 to i32, !dbg !99
  %shl24 = shl i32 %conv23, 8, !dbg !100
  %or25 = or i32 %or22, %shl24, !dbg !101
  %14 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 6, i64 9), align 1, !dbg !102
  %conv26 = zext i8 %14 to i32, !dbg !102
  %shl27 = shl i32 %conv26, 0, !dbg !103
  %or28 = or i32 %or25, %shl27, !dbg !104
  store i32 %or28, i32* %n, align 4, !dbg !105
  br label %sw.epilog, !dbg !106

sw.epilog:                                        ; preds = %if.end, %sw.bb17, %sw.bb
  %15 = load i32, i32* %n, align 4, !dbg !107
  %mul29 = mul i32 %15, 512, !dbg !108
  store i32 %mul29, i32* @length, align 4, !dbg !109
  %16 = load i32, i32* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 2), align 4, !dbg !110
  %tobool = icmp ne i32 %16, 0, !dbg !112
  br i1 %tobool, label %if.end32, label %if.then30, !dbg !113

if.then30:                                        ; preds = %sw.epilog
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !114
  br label %if.end32, !dbg !116

if.end32:                                         ; preds = %if.then30, %sw.epilog
  %17 = load i32, i32* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 2), align 4, !dbg !117
  %18 = load i32, i32* @length, align 4, !dbg !119
  %cmp33 = icmp ne i32 %17, %18, !dbg !120
  br i1 %cmp33, label %if.then35, label %if.end43, !dbg !121

if.then35:                                        ; preds = %if.end32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !122
  %19 = load i8, i8* getelementptr inbounds (%struct.CBW, %struct.CBW* @cbw, i32 0, i32 3), align 4, !dbg !124
  %conv37 = zext i8 %19 to i32, !dbg !126
  %and = and i32 %conv37, 128, !dbg !127
  %cmp38 = icmp ne i32 %and, 0, !dbg !128
  br i1 %cmp38, label %if.then40, label %if.else, !dbg !129

if.then40:                                        ; preds = %if.then35
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !130
  br label %if.end42, !dbg !132

if.else:                                          ; preds = %if.then35
  br label %if.end42

if.end42:                                         ; preds = %if.else, %if.then40
  store i8 1, i8* getelementptr inbounds (%struct.CSW, %struct.CSW* @csw, i32 0, i32 3), align 4, !dbg !133
  store i32 -22, i32* %retval, align 4, !dbg !134
  br label %return, !dbg !134

if.end43:                                         ; preds = %if.end32
  store i32 1, i32* %retval, align 4, !dbg !135
  br label %return, !dbg !135

return:                                           ; preds = %if.end43, %if.end42, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !136
  ret i32 %20, !dbg !136
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!46, !47, !48, !49, !50}
!llvm.ident = !{!51}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cbw", scope: !2, file: !6, line: 27, type: !34, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !12, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/mohsen/AutoPatch/Testcases/CVE-Lists/CVE-2020-10021(auto)/patchedFunc.c", directory: "/home/mohsen/AutoPatch/Testcases/CVE-Lists/Scripts")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Status", file: !6, line: 53, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "CVE-2020-10021(auto)/patchedFunc.c", directory: "/home/mohsen/AutoPatch/Testcases/CVE-Lists")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11}
!9 = !DIEnumerator(name: "CSW_PASSED", value: 0)
!10 = !DIEnumerator(name: "CSW_FAILED", value: 1)
!11 = !DIEnumerator(name: "CSW_ERROR", value: 2)
!12 = !{!0, !13, !28, !30, !32}
!13 = !DIGlobalVariableExpression(var: !14, expr: !DIExpression())
!14 = distinct !DIGlobalVariable(name: "csw", scope: !2, file: !6, line: 29, type: !15, isLocal: true, isDefinition: true)
!15 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CSW", file: !6, line: 35, size: 128, elements: !16)
!16 = !{!17, !22, !23, !24}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "Signature", scope: !15, file: !6, line: 36, baseType: !18, size: 32)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !19, line: 26, baseType: !20)
!19 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !21, line: 42, baseType: !7)
!21 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!22 = !DIDerivedType(tag: DW_TAG_member, name: "Tag", scope: !15, file: !6, line: 37, baseType: !18, size: 32, offset: 32)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "DataResidue", scope: !15, file: !6, line: 38, baseType: !18, size: 32, offset: 64)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "Status", scope: !15, file: !6, line: 39, baseType: !25, size: 8, offset: 96)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !19, line: 24, baseType: !26)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !21, line: 38, baseType: !27)
!27 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "addr", scope: !2, file: !6, line: 31, type: !18, isLocal: true, isDefinition: true)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "length", scope: !2, file: !6, line: 33, type: !18, isLocal: true, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "memory_size", scope: !2, file: !6, line: 69, type: !18, isLocal: true, isDefinition: true)
!34 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CBW", file: !6, line: 42, size: 256, elements: !35)
!35 = !{!36, !37, !38, !39, !40, !41, !42}
!36 = !DIDerivedType(tag: DW_TAG_member, name: "Signature", scope: !34, file: !6, line: 43, baseType: !18, size: 32)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "Tag", scope: !34, file: !6, line: 44, baseType: !18, size: 32, offset: 32)
!38 = !DIDerivedType(tag: DW_TAG_member, name: "DataLength", scope: !34, file: !6, line: 45, baseType: !18, size: 32, offset: 64)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "Flags", scope: !34, file: !6, line: 46, baseType: !25, size: 8, offset: 96)
!40 = !DIDerivedType(tag: DW_TAG_member, name: "LUN", scope: !34, file: !6, line: 47, baseType: !25, size: 8, offset: 104)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "CBLength", scope: !34, file: !6, line: 48, baseType: !25, size: 8, offset: 112)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "CB", scope: !34, file: !6, line: 49, baseType: !43, size: 128, offset: 120)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 128, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 16)
!46 = !{i32 7, !"Dwarf Version", i32 4}
!47 = !{i32 2, !"Debug Info Version", i32 3}
!48 = !{i32 1, !"wchar_size", i32 4}
!49 = !{i32 7, !"uwtable", i32 1}
!50 = !{i32 7, !"frame-pointer", i32 2}
!51 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!52 = distinct !DISubprogram(name: "infoTransfer", scope: !6, file: !6, line: 72, type: !53, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !56)
!53 = !DISubroutineType(types: !54)
!54 = !{!55}
!55 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!56 = !{}
!57 = !DILocalVariable(name: "n", scope: !52, file: !6, line: 74, type: !18)
!58 = !DILocation(line: 74, column: 12, scope: !52)
!59 = !DILocation(line: 75, column: 8, scope: !52)
!60 = !DILocation(line: 75, column: 18, scope: !52)
!61 = !DILocation(line: 75, column: 28, scope: !52)
!62 = !DILocation(line: 75, column: 38, scope: !52)
!63 = !DILocation(line: 75, column: 25, scope: !52)
!64 = !DILocation(line: 75, column: 48, scope: !52)
!65 = !DILocation(line: 75, column: 58, scope: !52)
!66 = !DILocation(line: 75, column: 45, scope: !52)
!67 = !DILocation(line: 76, column: 7, scope: !52)
!68 = !DILocation(line: 76, column: 17, scope: !52)
!69 = !DILocation(line: 75, column: 65, scope: !52)
!70 = !DILocation(line: 75, column: 5, scope: !52)
!71 = !DILocation(line: 79, column: 32, scope: !52)
!72 = !DILocation(line: 79, column: 3, scope: !52)
!73 = !DILocation(line: 82, column: 7, scope: !74)
!74 = distinct !DILexicalBlock(scope: !52, file: !6, line: 82, column: 6)
!75 = !DILocation(line: 82, column: 9, scope: !74)
!76 = !DILocation(line: 82, column: 26, scope: !74)
!77 = !DILocation(line: 82, column: 23, scope: !74)
!78 = !DILocation(line: 82, column: 6, scope: !52)
!79 = !DILocation(line: 86, column: 2, scope: !80)
!80 = distinct !DILexicalBlock(scope: !74, file: !6, line: 82, column: 39)
!81 = !DILocation(line: 89, column: 10, scope: !52)
!82 = !DILocation(line: 89, column: 12, scope: !52)
!83 = !DILocation(line: 89, column: 8, scope: !52)
!84 = !DILocation(line: 92, column: 10, scope: !52)
!85 = !DILocation(line: 92, column: 2, scope: !52)
!86 = !DILocation(line: 96, column: 8, scope: !87)
!87 = distinct !DILexicalBlock(scope: !52, file: !6, line: 92, column: 21)
!88 = !DILocation(line: 96, column: 18, scope: !87)
!89 = !DILocation(line: 96, column: 28, scope: !87)
!90 = !DILocation(line: 96, column: 38, scope: !87)
!91 = !DILocation(line: 96, column: 25, scope: !87)
!92 = !DILocation(line: 96, column: 5, scope: !87)
!93 = !DILocation(line: 97, column: 3, scope: !87)
!94 = !DILocation(line: 100, column: 8, scope: !87)
!95 = !DILocation(line: 100, column: 18, scope: !87)
!96 = !DILocation(line: 100, column: 28, scope: !87)
!97 = !DILocation(line: 100, column: 38, scope: !87)
!98 = !DILocation(line: 100, column: 25, scope: !87)
!99 = !DILocation(line: 101, column: 5, scope: !87)
!100 = !DILocation(line: 101, column: 15, scope: !87)
!101 = !DILocation(line: 100, column: 45, scope: !87)
!102 = !DILocation(line: 101, column: 25, scope: !87)
!103 = !DILocation(line: 101, column: 35, scope: !87)
!104 = !DILocation(line: 101, column: 22, scope: !87)
!105 = !DILocation(line: 100, column: 5, scope: !87)
!106 = !DILocation(line: 102, column: 3, scope: !87)
!107 = !DILocation(line: 104, column: 11, scope: !52)
!108 = !DILocation(line: 104, column: 13, scope: !52)
!109 = !DILocation(line: 104, column: 9, scope: !52)
!110 = !DILocation(line: 105, column: 11, scope: !111)
!111 = distinct !DILexicalBlock(scope: !52, file: !6, line: 105, column: 6)
!112 = !DILocation(line: 105, column: 7, scope: !111)
!113 = !DILocation(line: 105, column: 6, scope: !52)
!114 = !DILocation(line: 106, column: 3, scope: !115)
!115 = distinct !DILexicalBlock(scope: !111, file: !6, line: 105, column: 23)
!116 = !DILocation(line: 107, column: 2, scope: !115)
!117 = !DILocation(line: 108, column: 10, scope: !118)
!118 = distinct !DILexicalBlock(scope: !52, file: !6, line: 108, column: 6)
!119 = !DILocation(line: 108, column: 24, scope: !118)
!120 = !DILocation(line: 108, column: 21, scope: !118)
!121 = !DILocation(line: 108, column: 6, scope: !52)
!122 = !DILocation(line: 110, column: 3, scope: !123)
!123 = distinct !DILexicalBlock(scope: !118, file: !6, line: 108, column: 32)
!124 = !DILocation(line: 111, column: 12, scope: !125)
!125 = distinct !DILexicalBlock(scope: !123, file: !6, line: 111, column: 7)
!126 = !DILocation(line: 111, column: 8, scope: !125)
!127 = !DILocation(line: 111, column: 18, scope: !125)
!128 = !DILocation(line: 111, column: 26, scope: !125)
!129 = !DILocation(line: 111, column: 7, scope: !123)
!130 = !DILocation(line: 113, column: 4, scope: !131)
!131 = distinct !DILexicalBlock(scope: !125, file: !6, line: 111, column: 33)
!132 = !DILocation(line: 114, column: 3, scope: !131)
!133 = !DILocation(line: 118, column: 14, scope: !123)
!134 = !DILocation(line: 119, column: 3, scope: !123)
!135 = !DILocation(line: 121, column: 3, scope: !52)
!136 = !DILocation(line: 122, column: 1, scope: !52)
