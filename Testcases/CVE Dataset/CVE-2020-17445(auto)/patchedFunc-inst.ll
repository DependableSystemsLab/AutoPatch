; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2020-17445(auto)/patchedFunc.ll'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-17445(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [42 x i8] c"IPv6: home address option with length %u\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"IPv6: option with type %u and length %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @pico_ipv6_process_destopt(i8* %destopt, i32 %opt_ptr) #0 !dbg !18 {
entry:
  %retval = alloca i32, align 4
  %destopt.addr = alloca i8*, align 8
  %opt_ptr.addr = alloca i32, align 4
  %option = alloca i8*, align 8
  %len = alloca i8, align 1
  %optlen = alloca i8, align 1
  call void @TRAMPOLINE_FUNCTION()
  store i8* %destopt, i8** %destopt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %destopt.addr, metadata !24, metadata !DIExpression()), !dbg !25
  store i32 %opt_ptr, i32* %opt_ptr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opt_ptr.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %0 = load i32, i32* %opt_ptr.addr, align 4, !dbg !28
  %add = add i32 %0, 2, !dbg !28
  store i32 %add, i32* %opt_ptr.addr, align 4, !dbg !28
  call void @llvm.dbg.declare(metadata i8** %option, metadata !29, metadata !DIExpression()), !dbg !30
  %1 = load i8*, i8** %destopt.addr, align 8, !dbg !31
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 2, !dbg !32
  store i8* %add.ptr, i8** %option, align 8, !dbg !30
  call void @llvm.dbg.declare(metadata i8* %len, metadata !33, metadata !DIExpression()), !dbg !34
  %2 = load i8*, i8** %destopt.addr, align 8, !dbg !35
  %add.ptr1 = getelementptr inbounds i8, i8* %2, i64 1, !dbg !36
  %3 = load i8, i8* %add.ptr1, align 1, !dbg !37
  %conv = zext i8 %3 to i32, !dbg !37
  %add2 = add nsw i32 %conv, 1, !dbg !38
  %shl = shl i32 %add2, 3, !dbg !39
  %sub = sub nsw i32 %shl, 2, !dbg !40
  %conv3 = trunc i32 %sub to i8, !dbg !41
  store i8 %conv3, i8* %len, align 1, !dbg !34
  call void @llvm.dbg.declare(metadata i8* %optlen, metadata !42, metadata !DIExpression()), !dbg !43
  store i8 0, i8* %optlen, align 1, !dbg !43
  br label %while.cond, !dbg !44

while.cond:                                       ; preds = %sw.epilog, %entry
  call void @TRAMPOLINE_FUNCTION(), !dbg !45
  %4 = load i8, i8* %len, align 1, !dbg !45
  %tobool = icmp ne i8 %4, 0, !dbg !44
  br i1 %tobool, label %while.body, label %while.end, !dbg !44

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %option, align 8, !dbg !46
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i64 1, !dbg !48
  %6 = load i8, i8* %add.ptr4, align 1, !dbg !49
  %conv5 = zext i8 %6 to i32, !dbg !49
  %add6 = add nsw i32 %conv5, 2, !dbg !50
  %conv7 = trunc i32 %add6 to i8, !dbg !51
  store i8 %conv7, i8* %optlen, align 1, !dbg !52
  %7 = load i32, i32* %opt_ptr.addr, align 4, !dbg !53
  %8 = load i8, i8* %optlen, align 1, !dbg !55
  %conv8 = zext i8 %8 to i32, !dbg !55
  %add9 = add i32 %7, %conv8, !dbg !56
  %9 = load i32, i32* %opt_ptr.addr, align 4, !dbg !57
  %cmp = icmp ule i32 %add9, %9, !dbg !58
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !59

lor.lhs.false:                                    ; preds = %while.body
  %10 = load i8*, i8** %option, align 8, !dbg !60
  %11 = load i8, i8* %optlen, align 1, !dbg !61
  %conv11 = zext i8 %11 to i32, !dbg !61
  %idx.ext = sext i32 %conv11 to i64, !dbg !62
  %add.ptr12 = getelementptr inbounds i8, i8* %10, i64 %idx.ext, !dbg !62
  %12 = load i8*, i8** %option, align 8, !dbg !63
  %cmp13 = icmp ule i8* %add.ptr12, %12, !dbg !64
  br i1 %cmp13, label %if.then, label %lor.lhs.false15, !dbg !65

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %13 = load i8, i8* %len, align 1, !dbg !66
  %conv16 = zext i8 %13 to i32, !dbg !66
  %14 = load i8, i8* %optlen, align 1, !dbg !67
  %conv17 = zext i8 %14 to i32, !dbg !67
  %sub18 = sub nsw i32 %conv16, %conv17, !dbg !68
  %15 = load i8, i8* %len, align 1, !dbg !69
  %conv19 = zext i8 %15 to i32, !dbg !69
  %cmp20 = icmp sge i32 %sub18, %conv19, !dbg !70
  br i1 %cmp20, label %if.then, label %if.end, !dbg !71

if.then:                                          ; preds = %lor.lhs.false15, %lor.lhs.false, %while.body
  store i32 -22, i32* %retval, align 4, !dbg !72
  br label %return, !dbg !72

if.end:                                           ; preds = %lor.lhs.false15
  %16 = load i8*, i8** %option, align 8, !dbg !74
  %17 = load i8, i8* %16, align 1, !dbg !75
  %conv22 = zext i8 %17 to i32, !dbg !75
  switch i32 %conv22, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb23
    i32 201, label %sw.bb24
  ], !dbg !76

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog, !dbg !77

sw.bb23:                                          ; preds = %if.end
  br label %sw.epilog, !dbg !79

sw.bb24:                                          ; preds = %if.end
  %18 = load i8, i8* %optlen, align 1, !dbg !80
  %conv25 = zext i8 %18 to i32, !dbg !80
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i32 %conv25), !dbg !81
  br label %sw.epilog, !dbg !82

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %option, align 8, !dbg !83
  %20 = load i8, i8* %19, align 1, !dbg !84
  %conv26 = zext i8 %20 to i32, !dbg !84
  %21 = load i8, i8* %optlen, align 1, !dbg !85
  %conv27 = zext i8 %21 to i32, !dbg !85
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i32 %conv26, i32 %conv27), !dbg !86
  br label %sw.epilog, !dbg !87

sw.epilog:                                        ; preds = %sw.default, %sw.bb24, %sw.bb23, %sw.bb
  %22 = load i8, i8* %optlen, align 1, !dbg !88
  %conv29 = zext i8 %22 to i32, !dbg !88
  %23 = load i32, i32* %opt_ptr.addr, align 4, !dbg !89
  %add30 = add i32 %23, %conv29, !dbg !89
  store i32 %add30, i32* %opt_ptr.addr, align 4, !dbg !89
  %24 = load i8, i8* %optlen, align 1, !dbg !90
  %conv31 = zext i8 %24 to i32, !dbg !90
  %25 = load i8*, i8** %option, align 8, !dbg !91
  %idx.ext32 = sext i32 %conv31 to i64, !dbg !91
  %add.ptr33 = getelementptr inbounds i8, i8* %25, i64 %idx.ext32, !dbg !91
  store i8* %add.ptr33, i8** %option, align 8, !dbg !91
  %26 = load i8, i8* %len, align 1, !dbg !92
  %conv34 = zext i8 %26 to i32, !dbg !92
  %27 = load i8, i8* %optlen, align 1, !dbg !93
  %conv35 = zext i8 %27 to i32, !dbg !93
  %sub36 = sub nsw i32 %conv34, %conv35, !dbg !94
  %conv37 = trunc i32 %sub36 to i8, !dbg !95
  store i8 %conv37, i8* %len, align 1, !dbg !96
  br label %while.cond, !dbg !44, !llvm.loop !97

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !100
  br label %return, !dbg !100

return:                                           ; preds = %while.end, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !101
  ret i32 %28, !dbg !101
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

declare void @TRAMPOLINE_FUNCTION()

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-17445(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{!4, !9}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !5, line: 26, baseType: !6)
!5 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !7, line: 42, baseType: !8)
!7 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!8 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !5, line: 24, baseType: !10)
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !7, line: 38, baseType: !11)
!11 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!12 = !{i32 7, !"Dwarf Version", i32 4}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 7, !"uwtable", i32 1}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!18 = distinct !DISubprogram(name: "pico_ipv6_process_destopt", scope: !19, file: !19, line: 11, type: !20, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!19 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2020-17445(auto)/patchedFunc.c", directory: "~/AutoPatch")
!20 = !DISubroutineType(types: !21)
!21 = !{!22, !23, !4}
!22 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!24 = !DILocalVariable(name: "destopt", arg: 1, scope: !18, file: !19, line: 11, type: !23)
!25 = !DILocation(line: 11, column: 40, scope: !18)
!26 = !DILocalVariable(name: "opt_ptr", arg: 2, scope: !18, file: !19, line: 11, type: !4)
!27 = !DILocation(line: 11, column: 58, scope: !18)
!28 = !DILocation(line: 13, column: 10, scope: !18)
!29 = !DILocalVariable(name: "option", scope: !18, file: !19, line: 16, type: !23)
!30 = !DILocation(line: 16, column: 11, scope: !18)
!31 = !DILocation(line: 16, column: 21, scope: !18)
!32 = !DILocation(line: 16, column: 29, scope: !18)
!33 = !DILocalVariable(name: "len", scope: !18, file: !19, line: 17, type: !9)
!34 = !DILocation(line: 17, column: 10, scope: !18)
!35 = !DILocation(line: 17, column: 30, scope: !18)
!36 = !DILocation(line: 17, column: 38, scope: !18)
!37 = !DILocation(line: 17, column: 28, scope: !18)
!38 = !DILocation(line: 17, column: 43, scope: !18)
!39 = !DILocation(line: 17, column: 48, scope: !18)
!40 = !DILocation(line: 17, column: 54, scope: !18)
!41 = !DILocation(line: 17, column: 16, scope: !18)
!42 = !DILocalVariable(name: "optlen", scope: !18, file: !19, line: 18, type: !9)
!43 = !DILocation(line: 18, column: 10, scope: !18)
!44 = !DILocation(line: 20, column: 2, scope: !18)
!45 = !DILocation(line: 20, column: 9, scope: !18)
!46 = !DILocation(line: 21, column: 33, scope: !47)
!47 = distinct !DILexicalBlock(scope: !18, file: !19, line: 20, column: 14)
!48 = !DILocation(line: 21, column: 40, scope: !47)
!49 = !DILocation(line: 21, column: 31, scope: !47)
!50 = !DILocation(line: 21, column: 45, scope: !47)
!51 = !DILocation(line: 21, column: 21, scope: !47)
!52 = !DILocation(line: 21, column: 19, scope: !47)
!53 = !DILocation(line: 24, column: 16, scope: !54)
!54 = distinct !DILexicalBlock(scope: !47, file: !19, line: 24, column: 16)
!55 = !DILocation(line: 24, column: 26, scope: !54)
!56 = !DILocation(line: 24, column: 24, scope: !54)
!57 = !DILocation(line: 24, column: 36, scope: !54)
!58 = !DILocation(line: 24, column: 33, scope: !54)
!59 = !DILocation(line: 24, column: 44, scope: !54)
!60 = !DILocation(line: 24, column: 47, scope: !54)
!61 = !DILocation(line: 24, column: 56, scope: !54)
!62 = !DILocation(line: 24, column: 54, scope: !54)
!63 = !DILocation(line: 24, column: 66, scope: !54)
!64 = !DILocation(line: 24, column: 63, scope: !54)
!65 = !DILocation(line: 24, column: 73, scope: !54)
!66 = !DILocation(line: 24, column: 76, scope: !54)
!67 = !DILocation(line: 24, column: 82, scope: !54)
!68 = !DILocation(line: 24, column: 80, scope: !54)
!69 = !DILocation(line: 24, column: 92, scope: !54)
!70 = !DILocation(line: 24, column: 89, scope: !54)
!71 = !DILocation(line: 24, column: 16, scope: !47)
!72 = !DILocation(line: 25, column: 15, scope: !73)
!73 = distinct !DILexicalBlock(scope: !54, file: !19, line: 24, column: 97)
!74 = !DILocation(line: 28, column: 14, scope: !47)
!75 = !DILocation(line: 28, column: 13, scope: !47)
!76 = !DILocation(line: 28, column: 5, scope: !47)
!77 = !DILocation(line: 31, column: 19, scope: !78)
!78 = distinct !DILexicalBlock(scope: !47, file: !19, line: 29, column: 14)
!79 = !DILocation(line: 34, column: 19, scope: !78)
!80 = !DILocation(line: 37, column: 72, scope: !78)
!81 = !DILocation(line: 37, column: 19, scope: !78)
!82 = !DILocation(line: 38, column: 19, scope: !78)
!83 = !DILocation(line: 40, column: 72, scope: !78)
!84 = !DILocation(line: 40, column: 71, scope: !78)
!85 = !DILocation(line: 40, column: 80, scope: !78)
!86 = !DILocation(line: 40, column: 19, scope: !78)
!87 = !DILocation(line: 41, column: 19, scope: !78)
!88 = !DILocation(line: 44, column: 24, scope: !47)
!89 = !DILocation(line: 44, column: 21, scope: !47)
!90 = !DILocation(line: 45, column: 23, scope: !47)
!91 = !DILocation(line: 45, column: 20, scope: !47)
!92 = !DILocation(line: 46, column: 29, scope: !47)
!93 = !DILocation(line: 46, column: 35, scope: !47)
!94 = !DILocation(line: 46, column: 33, scope: !47)
!95 = !DILocation(line: 46, column: 19, scope: !47)
!96 = !DILocation(line: 46, column: 17, scope: !47)
!97 = distinct !{!97, !44, !98, !99}
!98 = !DILocation(line: 47, column: 6, scope: !18)
!99 = !{!"llvm.loop.mustprogress"}
!100 = !DILocation(line: 48, column: 6, scope: !18)
!101 = !DILocation(line: 49, column: 1, scope: !18)
