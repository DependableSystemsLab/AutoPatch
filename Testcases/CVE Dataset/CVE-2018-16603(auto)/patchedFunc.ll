; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2018-16603(auto)/patchedFunc.c'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2018-16603(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [47 x i8] c"xDataLength = %p and %lu and tcpLength = %lu \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @prvCheckOptions(i32* %pxNetwork) #0 !dbg !19 {
entry:
  %retval = alloca i32, align 4
  %pxNetwork.addr = alloca i32*, align 8
  %xDataLength = alloca i64, align 8
  %tcpLength = alloca i64, align 8
  store i32* %pxNetwork, i32** %pxNetwork.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pxNetwork.addr, metadata !28, metadata !DIExpression()), !dbg !29
  call void @llvm.dbg.declare(metadata i64* %xDataLength, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32*, i32** %pxNetwork.addr, align 8, !dbg !32
  %1 = bitcast i32* %0 to i8*, !dbg !33
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 32, !dbg !34
  %2 = bitcast i8* %add.ptr to i64*, !dbg !35
  %3 = load i64, i64* %2, align 8, !dbg !35
  store i64 %3, i64* %xDataLength, align 8, !dbg !31
  call void @llvm.dbg.declare(metadata i64* %tcpLength, metadata !36, metadata !DIExpression()), !dbg !37
  %4 = load i64, i64* %xDataLength, align 8, !dbg !38
  %sub = sub i64 %4, 14, !dbg !39
  %sub1 = sub i64 %sub, 20, !dbg !40
  store i64 %sub1, i64* %tcpLength, align 8, !dbg !37
  %5 = load i32*, i32** %pxNetwork.addr, align 8, !dbg !41
  %6 = bitcast i32* %5 to i8*, !dbg !42
  %7 = load i64, i64* %xDataLength, align 8, !dbg !43
  %8 = load i64, i64* %tcpLength, align 8, !dbg !44
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i8* %6, i64 %7, i64 %8), !dbg !45
  %9 = load i64, i64* %tcpLength, align 8, !dbg !46
  %cmp = icmp ult i64 %9, 20, !dbg !48
  br i1 %cmp, label %if.then, label %if.end, !dbg !49

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !50
  br label %return, !dbg !50

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !52
  br label %return, !dbg !52

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !53
  ret i32 %10, !dbg !53
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!13, !14, !15, !16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2018-16603(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{!4, !10, !12}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !6, line: 27, baseType: !7)
!6 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !8, line: 45, baseType: !9)
!8 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!9 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!13 = !{i32 7, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 7, !"uwtable", i32 1}
!17 = !{i32 7, !"frame-pointer", i32 2}
!18 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!19 = distinct !DISubprogram(name: "prvCheckOptions", scope: !20, file: !20, line: 13, type: !21, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!20 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2018-16603(auto)/patchedFunc.c", directory: "~/AutoPatch")
!21 = !DISubroutineType(types: !22)
!22 = !{!23, !24}
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !6, line: 26, baseType: !26)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !8, line: 42, baseType: !27)
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !DILocalVariable(name: "pxNetwork", arg: 1, scope: !19, file: !20, line: 13, type: !24)
!29 = !DILocation(line: 13, column: 31, scope: !19)
!30 = !DILocalVariable(name: "xDataLength", scope: !19, file: !20, line: 17, type: !5)
!31 = !DILocation(line: 17, column: 14, scope: !19)
!32 = !DILocation(line: 17, column: 50, scope: !19)
!33 = !DILocation(line: 17, column: 41, scope: !19)
!34 = !DILocation(line: 17, column: 60, scope: !19)
!35 = !DILocation(line: 17, column: 28, scope: !19)
!36 = !DILocalVariable(name: "tcpLength", scope: !19, file: !20, line: 19, type: !5)
!37 = !DILocation(line: 19, column: 14, scope: !19)
!38 = !DILocation(line: 19, column: 26, scope: !19)
!39 = !DILocation(line: 19, column: 38, scope: !19)
!40 = !DILocation(line: 19, column: 61, scope: !19)
!41 = !DILocation(line: 21, column: 70, scope: !19)
!42 = !DILocation(line: 21, column: 63, scope: !19)
!43 = !DILocation(line: 21, column: 81, scope: !19)
!44 = !DILocation(line: 21, column: 95, scope: !19)
!45 = !DILocation(line: 21, column: 5, scope: !19)
!46 = !DILocation(line: 22, column: 9, scope: !47)
!47 = distinct !DILexicalBlock(scope: !19, file: !20, line: 22, column: 9)
!48 = !DILocation(line: 22, column: 19, scope: !47)
!49 = !DILocation(line: 22, column: 9, scope: !19)
!50 = !DILocation(line: 23, column: 2, scope: !51)
!51 = distinct !DILexicalBlock(scope: !47, file: !20, line: 22, column: 43)
!52 = !DILocation(line: 25, column: 5, scope: !19)
!53 = !DILocation(line: 26, column: 1, scope: !19)
