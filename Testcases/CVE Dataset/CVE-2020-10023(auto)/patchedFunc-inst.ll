; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10023(auto)/patchedFunc.ll'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10023(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @isspace(i8 signext %v) #0 !dbg !11 {
entry:
  %v.addr = alloca i8, align 1
  call void @TRAMPOLINE_FUNCTION()
  store i8 %v, i8* %v.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %v.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i8, i8* %v.addr, align 1, !dbg !18
  %conv = sext i8 %0 to i32, !dbg !18
  %cmp = icmp eq i32 %conv, 32, !dbg !19
  %conv1 = zext i1 %cmp to i32, !dbg !19
  ret i32 %conv1, !dbg !20
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @memmove(i8* %dst, i8* %src, i32 %len) #0 !dbg !21 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !25, metadata !DIExpression()), !dbg !26
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !27, metadata !DIExpression()), !dbg !28
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !29, metadata !DIExpression()), !dbg !30
  call void @llvm.dbg.declare(metadata i32* %i, metadata !31, metadata !DIExpression()), !dbg !33
  store i32 0, i32* %i, align 4, !dbg !33
  br label %for.cond, !dbg !34

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !35
  %1 = load i32, i32* %len.addr, align 4, !dbg !37
  %cmp = icmp slt i32 %0, %1, !dbg !38
  br i1 %cmp, label %for.body, label %for.end, !dbg !39

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %src.addr, align 8, !dbg !40
  %3 = load i32, i32* %i, align 4, !dbg !42
  %idxprom = sext i32 %3 to i64, !dbg !40
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !40
  %4 = load i8, i8* %arrayidx, align 1, !dbg !40
  %5 = load i8*, i8** %dst.addr, align 8, !dbg !43
  %6 = load i32, i32* %i, align 4, !dbg !44
  %idxprom1 = sext i32 %6 to i64, !dbg !43
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 %idxprom1, !dbg !43
  store i8 %4, i8* %arrayidx2, align 1, !dbg !45
  br label %for.inc, !dbg !46

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !47
  %inc = add nsw i32 %7, 1, !dbg !47
  store i32 %inc, i32* %i, align 4, !dbg !47
  br label %for.cond, !dbg !48, !llvm.loop !49

for.end:                                          ; preds = %for.cond
  ret void, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell_spaces_trim(i8* %str) #0 !dbg !53 {
entry:
  %str.addr = alloca i8*, align 8
  %len = alloca i16, align 2
  %shift = alloca i16, align 2
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @TRAMPOLINE_FUNCTION()
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !56, metadata !DIExpression()), !dbg !57
  call void @llvm.dbg.declare(metadata i16* %len, metadata !58, metadata !DIExpression()), !dbg !64
  store i16 0, i16* %len, align 2, !dbg !64
  call void @llvm.dbg.declare(metadata i16* %shift, metadata !65, metadata !DIExpression()), !dbg !66
  store i16 0, i16* %shift, align 2, !dbg !66
  %0 = load i8*, i8** %str.addr, align 8, !dbg !67
  %tobool = icmp ne i8* %0, null, !dbg !67
  br i1 %tobool, label %if.end, label %if.then, !dbg !69

if.then:                                          ; preds = %entry
  br label %for.end31, !dbg !70

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !72, metadata !DIExpression()), !dbg !74
  store i32 0, i32* %i, align 4, !dbg !74
  br label %for.cond, !dbg !75

for.cond:                                         ; preds = %for.inc29, %if.end
  call void @TRAMPOLINE_FUNCTION(), !dbg !76
  %1 = load i32, i32* %i, align 4, !dbg !76
  %2 = load i16, i16* %len, align 2, !dbg !78
  %conv = zext i16 %2 to i32, !dbg !78
  %sub = sub nsw i32 %conv, 1, !dbg !79
  %cmp = icmp slt i32 %1, %sub, !dbg !80
  br i1 %cmp, label %for.body, label %for.end31, !dbg !81

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 8, !dbg !82
  %4 = load i32, i32* %i, align 4, !dbg !85
  %idxprom = sext i32 %4 to i64, !dbg !82
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom, !dbg !82
  %5 = load i8, i8* %arrayidx, align 1, !dbg !82
  %conv2 = sext i8 %5 to i32, !dbg !86
  %conv3 = trunc i32 %conv2 to i8, !dbg !86
  %call = call i32 @isspace(i8 signext %conv3), !dbg !87
  call void @TRAMPOLINE_FUNCTION(), !dbg !87
  %tobool4 = icmp ne i32 %call, 0, !dbg !87
  br i1 %tobool4, label %if.then5, label %if.end28, !dbg !88

if.then5:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %j, metadata !89, metadata !DIExpression()), !dbg !92
  %6 = load i32, i32* %i, align 4, !dbg !93
  %add = add nsw i32 %6, 1, !dbg !94
  store i32 %add, i32* %j, align 4, !dbg !92
  br label %for.cond6, !dbg !95

for.cond6:                                        ; preds = %for.inc, %if.then5
  call void @TRAMPOLINE_FUNCTION(), !dbg !96
  %7 = load i32, i32* %j, align 4, !dbg !96
  %8 = load i16, i16* %len, align 2, !dbg !98
  %conv7 = zext i16 %8 to i32, !dbg !98
  %cmp8 = icmp slt i32 %7, %conv7, !dbg !99
  br i1 %cmp8, label %for.body10, label %for.end, !dbg !100

for.body10:                                       ; preds = %for.cond6
  %9 = load i16, i16* %shift, align 2, !dbg !101
  %conv11 = zext i16 %9 to i32, !dbg !101
  %cmp12 = icmp sgt i32 %conv11, 0, !dbg !104
  br i1 %cmp12, label %if.then14, label %if.end27, !dbg !105

if.then14:                                        ; preds = %for.body10
  %10 = load i8*, i8** %str.addr, align 8, !dbg !106
  %11 = load i32, i32* %i, align 4, !dbg !108
  %add15 = add nsw i32 %11, 1, !dbg !109
  %idxprom16 = sext i32 %add15 to i64, !dbg !106
  %arrayidx17 = getelementptr inbounds i8, i8* %10, i64 %idxprom16, !dbg !106
  %12 = load i8*, i8** %str.addr, align 8, !dbg !110
  %13 = load i32, i32* %j, align 4, !dbg !111
  %idxprom18 = sext i32 %13 to i64, !dbg !110
  %arrayidx19 = getelementptr inbounds i8, i8* %12, i64 %idxprom18, !dbg !110
  %14 = load i16, i16* %len, align 2, !dbg !112
  %conv20 = zext i16 %14 to i32, !dbg !112
  %15 = load i32, i32* %j, align 4, !dbg !113
  %sub21 = sub nsw i32 %conv20, %15, !dbg !114
  %add22 = add nsw i32 %sub21, 1, !dbg !115
  call void @memmove(i8* %arrayidx17, i8* %arrayidx19, i32 %add22), !dbg !116
  %16 = load i16, i16* %len, align 2, !dbg !117
  %conv23 = zext i16 %16 to i32, !dbg !117
  %17 = load i16, i16* %shift, align 2, !dbg !118
  %conv24 = zext i16 %17 to i32, !dbg !118
  %sub25 = sub nsw i32 %conv23, %conv24, !dbg !119
  %conv26 = trunc i32 %sub25 to i16, !dbg !117
  store i16 %conv26, i16* %len, align 2, !dbg !120
  store i16 0, i16* %shift, align 2, !dbg !121
  br label %if.end27, !dbg !122

if.end27:                                         ; preds = %if.then14, %for.body10
  br label %for.inc, !dbg !123

for.inc:                                          ; preds = %if.end27
  %18 = load i32, i32* %j, align 4, !dbg !124
  %inc = add nsw i32 %18, 1, !dbg !124
  store i32 %inc, i32* %j, align 4, !dbg !124
  br label %for.cond6, !dbg !125, !llvm.loop !126

for.end:                                          ; preds = %for.cond6
  br label %if.end28, !dbg !128

if.end28:                                         ; preds = %for.end, %for.body
  br label %for.inc29, !dbg !129

for.inc29:                                        ; preds = %if.end28
  %19 = load i32, i32* %i, align 4, !dbg !130
  %inc30 = add nsw i32 %19, 1, !dbg !130
  store i32 %inc30, i32* %i, align 4, !dbg !130
  br label %for.cond, !dbg !131, !llvm.loop !132

for.end31:                                        ; preds = %for.cond, %if.then
  call void @TRAMPOLINE_FUNCTION(), !dbg !134
  ret void, !dbg !134
}

declare void @TRAMPOLINE_FUNCTION()

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10023(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!5 = !{i32 7, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 2}
!10 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!11 = distinct !DISubprogram(name: "isspace", scope: !12, file: !12, line: 16, type: !13, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!12 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2020-10023(auto)/patchedFunc.c", directory: "~/AutoPatch")
!13 = !DISubroutineType(types: !14)
!14 = !{!4, !15}
!15 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!16 = !DILocalVariable(name: "v", arg: 1, scope: !11, file: !12, line: 16, type: !15)
!17 = !DILocation(line: 16, column: 18, scope: !11)
!18 = !DILocation(line: 17, column: 9, scope: !11)
!19 = !DILocation(line: 17, column: 11, scope: !11)
!20 = !DILocation(line: 17, column: 2, scope: !11)
!21 = distinct !DISubprogram(name: "memmove", scope: !12, file: !12, line: 20, type: !22, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{null, !24, !24, !4}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!25 = !DILocalVariable(name: "dst", arg: 1, scope: !21, file: !12, line: 20, type: !24)
!26 = !DILocation(line: 20, column: 20, scope: !21)
!27 = !DILocalVariable(name: "src", arg: 2, scope: !21, file: !12, line: 20, type: !24)
!28 = !DILocation(line: 20, column: 31, scope: !21)
!29 = !DILocalVariable(name: "len", arg: 3, scope: !21, file: !12, line: 20, type: !4)
!30 = !DILocation(line: 20, column: 40, scope: !21)
!31 = !DILocalVariable(name: "i", scope: !32, file: !12, line: 21, type: !4)
!32 = distinct !DILexicalBlock(scope: !21, file: !12, line: 21, column: 2)
!33 = !DILocation(line: 21, column: 11, scope: !32)
!34 = !DILocation(line: 21, column: 7, scope: !32)
!35 = !DILocation(line: 21, column: 18, scope: !36)
!36 = distinct !DILexicalBlock(scope: !32, file: !12, line: 21, column: 2)
!37 = !DILocation(line: 21, column: 22, scope: !36)
!38 = !DILocation(line: 21, column: 20, scope: !36)
!39 = !DILocation(line: 21, column: 2, scope: !32)
!40 = !DILocation(line: 22, column: 12, scope: !41)
!41 = distinct !DILexicalBlock(scope: !36, file: !12, line: 21, column: 32)
!42 = !DILocation(line: 22, column: 16, scope: !41)
!43 = !DILocation(line: 22, column: 3, scope: !41)
!44 = !DILocation(line: 22, column: 7, scope: !41)
!45 = !DILocation(line: 22, column: 10, scope: !41)
!46 = !DILocation(line: 23, column: 2, scope: !41)
!47 = !DILocation(line: 21, column: 28, scope: !36)
!48 = !DILocation(line: 21, column: 2, scope: !36)
!49 = distinct !{!49, !39, !50, !51}
!50 = !DILocation(line: 23, column: 2, scope: !32)
!51 = !{!"llvm.loop.mustprogress"}
!52 = !DILocation(line: 24, column: 1, scope: !21)
!53 = distinct !DISubprogram(name: "shell_spaces_trim", scope: !12, file: !12, line: 26, type: !54, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!54 = !DISubroutineType(types: !55)
!55 = !{null, !24}
!56 = !DILocalVariable(name: "str", arg: 1, scope: !53, file: !12, line: 26, type: !24)
!57 = !DILocation(line: 26, column: 30, scope: !53)
!58 = !DILocalVariable(name: "len", scope: !53, file: !12, line: 29, type: !59)
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !60, line: 25, baseType: !61)
!60 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !62, line: 40, baseType: !63)
!62 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!63 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!64 = !DILocation(line: 29, column: 11, scope: !53)
!65 = !DILocalVariable(name: "shift", scope: !53, file: !12, line: 30, type: !59)
!66 = !DILocation(line: 30, column: 11, scope: !53)
!67 = !DILocation(line: 32, column: 7, scope: !68)
!68 = distinct !DILexicalBlock(scope: !53, file: !12, line: 32, column: 6)
!69 = !DILocation(line: 32, column: 6, scope: !53)
!70 = !DILocation(line: 33, column: 3, scope: !71)
!71 = distinct !DILexicalBlock(scope: !68, file: !12, line: 32, column: 12)
!72 = !DILocalVariable(name: "i", scope: !73, file: !12, line: 37, type: !4)
!73 = distinct !DILexicalBlock(scope: !53, file: !12, line: 37, column: 2)
!74 = !DILocation(line: 37, column: 11, scope: !73)
!75 = !DILocation(line: 37, column: 7, scope: !73)
!76 = !DILocation(line: 37, column: 18, scope: !77)
!77 = distinct !DILexicalBlock(scope: !73, file: !12, line: 37, column: 2)
!78 = !DILocation(line: 37, column: 22, scope: !77)
!79 = !DILocation(line: 37, column: 26, scope: !77)
!80 = !DILocation(line: 37, column: 20, scope: !77)
!81 = !DILocation(line: 37, column: 2, scope: !73)
!82 = !DILocation(line: 38, column: 20, scope: !83)
!83 = distinct !DILexicalBlock(scope: !84, file: !12, line: 38, column: 7)
!84 = distinct !DILexicalBlock(scope: !77, file: !12, line: 37, column: 36)
!85 = !DILocation(line: 38, column: 24, scope: !83)
!86 = !DILocation(line: 38, column: 15, scope: !83)
!87 = !DILocation(line: 38, column: 7, scope: !83)
!88 = !DILocation(line: 38, column: 7, scope: !84)
!89 = !DILocalVariable(name: "j", scope: !90, file: !12, line: 39, type: !4)
!90 = distinct !DILexicalBlock(scope: !91, file: !12, line: 39, column: 4)
!91 = distinct !DILexicalBlock(scope: !83, file: !12, line: 38, column: 29)
!92 = !DILocation(line: 39, column: 13, scope: !90)
!93 = !DILocation(line: 39, column: 17, scope: !90)
!94 = !DILocation(line: 39, column: 19, scope: !90)
!95 = !DILocation(line: 39, column: 9, scope: !90)
!96 = !DILocation(line: 39, column: 24, scope: !97)
!97 = distinct !DILexicalBlock(scope: !90, file: !12, line: 39, column: 4)
!98 = !DILocation(line: 39, column: 28, scope: !97)
!99 = !DILocation(line: 39, column: 26, scope: !97)
!100 = !DILocation(line: 39, column: 4, scope: !90)
!101 = !DILocation(line: 44, column: 9, scope: !102)
!102 = distinct !DILexicalBlock(scope: !103, file: !12, line: 44, column: 9)
!103 = distinct !DILexicalBlock(scope: !97, file: !12, line: 39, column: 38)
!104 = !DILocation(line: 44, column: 15, scope: !102)
!105 = !DILocation(line: 44, column: 9, scope: !103)
!106 = !DILocation(line: 45, column: 15, scope: !107)
!107 = distinct !DILexicalBlock(scope: !102, file: !12, line: 44, column: 20)
!108 = !DILocation(line: 45, column: 19, scope: !107)
!109 = !DILocation(line: 45, column: 21, scope: !107)
!110 = !DILocation(line: 45, column: 28, scope: !107)
!111 = !DILocation(line: 45, column: 32, scope: !107)
!112 = !DILocation(line: 45, column: 35, scope: !107)
!113 = !DILocation(line: 45, column: 41, scope: !107)
!114 = !DILocation(line: 45, column: 39, scope: !107)
!115 = !DILocation(line: 45, column: 43, scope: !107)
!116 = !DILocation(line: 45, column: 6, scope: !107)
!117 = !DILocation(line: 46, column: 12, scope: !107)
!118 = !DILocation(line: 46, column: 18, scope: !107)
!119 = !DILocation(line: 46, column: 16, scope: !107)
!120 = !DILocation(line: 46, column: 10, scope: !107)
!121 = !DILocation(line: 47, column: 12, scope: !107)
!122 = !DILocation(line: 48, column: 5, scope: !107)
!123 = !DILocation(line: 50, column: 4, scope: !103)
!124 = !DILocation(line: 39, column: 34, scope: !97)
!125 = !DILocation(line: 39, column: 4, scope: !97)
!126 = distinct !{!126, !100, !127, !51}
!127 = !DILocation(line: 50, column: 4, scope: !90)
!128 = !DILocation(line: 51, column: 3, scope: !91)
!129 = !DILocation(line: 52, column: 2, scope: !84)
!130 = !DILocation(line: 37, column: 32, scope: !77)
!131 = !DILocation(line: 37, column: 2, scope: !77)
!132 = distinct !{!132, !81, !133, !51}
!133 = !DILocation(line: 52, column: 2, scope: !73)
!134 = !DILocation(line: 53, column: 1, scope: !53)
