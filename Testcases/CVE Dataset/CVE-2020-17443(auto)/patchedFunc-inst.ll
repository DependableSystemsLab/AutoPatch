; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2020-17443(auto)/patchedFunc.ll'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-17443(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [21 x i8] c"transport_len = %u \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @pico_icmp6_send_echoreply(i8* %echo) #0 !dbg !16 {
entry:
  %retval = alloca i32, align 4
  %echo.addr = alloca i8*, align 8
  %transport_len_ptr = alloca i16*, align 8
  %transport_len = alloca i16, align 2
  call void @TRAMPOLINE_FUNCTION()
  store i8* %echo, i8** %echo.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %echo.addr, metadata !25, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.declare(metadata i16** %transport_len_ptr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i8*, i8** %echo.addr, align 8, !dbg !29
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 38, !dbg !30
  %1 = bitcast i8* %add.ptr to i16*, !dbg !31
  store i16* %1, i16** %transport_len_ptr, align 8, !dbg !28
  call void @llvm.dbg.declare(metadata i16* %transport_len, metadata !32, metadata !DIExpression()), !dbg !33
  %2 = load i16*, i16** %transport_len_ptr, align 8, !dbg !34
  %3 = load i16, i16* %2, align 2, !dbg !35
  store i16 %3, i16* %transport_len, align 2, !dbg !33
  %4 = load i16, i16* %transport_len, align 2, !dbg !36
  %conv = zext i16 %4 to i32, !dbg !36
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %conv), !dbg !37
  %5 = load i16, i16* %transport_len, align 2, !dbg !38
  %conv1 = zext i16 %5 to i32, !dbg !38
  %cmp = icmp slt i32 %conv1, 8, !dbg !40
  br i1 %cmp, label %if.then, label %if.end, !dbg !41

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !42
  br label %return, !dbg !42

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !44
  br label %return, !dbg !44

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !45
  ret i32 %6, !dbg !45
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

declare void @TRAMPOLINE_FUNCTION()

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10, !11, !12, !13, !14}
!llvm.ident = !{!15}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-17443(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{!4, !5}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !6, line: 25, baseType: !7)
!6 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !8, line: 40, baseType: !9)
!8 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!9 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 7, !"uwtable", i32 1}
!14 = !{i32 7, !"frame-pointer", i32 2}
!15 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!16 = distinct !DISubprogram(name: "pico_icmp6_send_echoreply", scope: !17, file: !17, line: 8, type: !18, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!17 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2020-17443(auto)/patchedFunc.c", directory: "~/AutoPatch")
!18 = !DISubroutineType(types: !19)
!19 = !{!20, !21}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !6, line: 24, baseType: !23)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !8, line: 38, baseType: !24)
!24 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!25 = !DILocalVariable(name: "echo", arg: 1, scope: !16, file: !17, line: 8, type: !21)
!26 = !DILocation(line: 8, column: 40, scope: !16)
!27 = !DILocalVariable(name: "transport_len_ptr", scope: !16, file: !17, line: 11, type: !4)
!28 = !DILocation(line: 11, column: 16, scope: !16)
!29 = !DILocation(line: 11, column: 49, scope: !16)
!30 = !DILocation(line: 11, column: 54, scope: !16)
!31 = !DILocation(line: 11, column: 36, scope: !16)
!32 = !DILocalVariable(name: "transport_len", scope: !16, file: !17, line: 12, type: !5)
!33 = !DILocation(line: 12, column: 15, scope: !16)
!34 = !DILocation(line: 12, column: 43, scope: !16)
!35 = !DILocation(line: 12, column: 42, scope: !16)
!36 = !DILocation(line: 14, column: 39, scope: !16)
!37 = !DILocation(line: 14, column: 6, scope: !16)
!38 = !DILocation(line: 15, column: 10, scope: !39)
!39 = distinct !DILexicalBlock(scope: !16, file: !17, line: 15, column: 10)
!40 = !DILocation(line: 15, column: 24, scope: !39)
!41 = !DILocation(line: 15, column: 10, scope: !16)
!42 = !DILocation(line: 16, column: 3, scope: !43)
!43 = distinct !DILexicalBlock(scope: !39, file: !17, line: 15, column: 29)
!44 = !DILocation(line: 18, column: 6, scope: !16)
!45 = !DILocation(line: 19, column: 1, scope: !16)
