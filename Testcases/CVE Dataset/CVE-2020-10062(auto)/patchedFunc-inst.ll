; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10062(auto)/patchedFunc.ll'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10062(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.buf_ctx = type { i8*, i8* }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @packet_length_decode(%struct.buf_ctx* %buf, i32 %length) #0 !dbg !15 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca %struct.buf_ctx*, align 8
  %length.addr = alloca i32, align 4
  %shift = alloca i8, align 1
  %bytes = alloca i8, align 1
  call void @TRAMPOLINE_FUNCTION()
  store %struct.buf_ctx* %buf, %struct.buf_ctx** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.buf_ctx** %buf.addr, metadata !27, metadata !DIExpression()), !dbg !28
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !29, metadata !DIExpression()), !dbg !30
  call void @llvm.dbg.declare(metadata i8* %shift, metadata !31, metadata !DIExpression()), !dbg !34
  store i8 0, i8* %shift, align 1, !dbg !34
  call void @llvm.dbg.declare(metadata i8* %bytes, metadata !35, metadata !DIExpression()), !dbg !36
  store i8 0, i8* %bytes, align 1, !dbg !36
  store i32 0, i32* %length.addr, align 4, !dbg !37
  br label %do.body, !dbg !38

do.body:                                          ; preds = %do.cond, %entry
  call void @TRAMPOLINE_FUNCTION(), !dbg !39
  %0 = load i8, i8* %bytes, align 1, !dbg !39
  %conv = zext i8 %0 to i32, !dbg !39
  %cmp = icmp sge i32 %conv, 4, !dbg !42
  br i1 %cmp, label %if.then, label %if.end, !dbg !43

if.then:                                          ; preds = %do.body
  store i32 -22, i32* %retval, align 4, !dbg !44
  br label %return, !dbg !44

if.end:                                           ; preds = %do.body
  %1 = load %struct.buf_ctx*, %struct.buf_ctx** %buf.addr, align 8, !dbg !46
  %cur = getelementptr inbounds %struct.buf_ctx, %struct.buf_ctx* %1, i32 0, i32 0, !dbg !47
  %2 = load i8*, i8** %cur, align 8, !dbg !47
  %3 = load i8, i8* %2, align 1, !dbg !48
  %conv2 = zext i8 %3 to i32, !dbg !49
  %and = and i32 %conv2, 127, !dbg !50
  %4 = load i8, i8* %shift, align 1, !dbg !51
  %conv3 = zext i8 %4 to i32, !dbg !51
  %shl = shl i32 %and, %conv3, !dbg !52
  %5 = load i32, i32* %length.addr, align 4, !dbg !53
  %add = add i32 %5, %shl, !dbg !53
  store i32 %add, i32* %length.addr, align 4, !dbg !53
  %6 = load i8, i8* %shift, align 1, !dbg !54
  %conv4 = zext i8 %6 to i32, !dbg !54
  %add5 = add nsw i32 %conv4, 7, !dbg !54
  %conv6 = trunc i32 %add5 to i8, !dbg !54
  store i8 %conv6, i8* %shift, align 1, !dbg !54
  %7 = load i8, i8* %bytes, align 1, !dbg !55
  %inc = add i8 %7, 1, !dbg !55
  store i8 %inc, i8* %bytes, align 1, !dbg !55
  br label %do.cond, !dbg !56

do.cond:                                          ; preds = %if.end
  %8 = load %struct.buf_ctx*, %struct.buf_ctx** %buf.addr, align 8, !dbg !57
  %cur7 = getelementptr inbounds %struct.buf_ctx, %struct.buf_ctx* %8, i32 0, i32 0, !dbg !58
  %9 = load i8*, i8** %cur7, align 8, !dbg !59
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !59
  store i8* %incdec.ptr, i8** %cur7, align 8, !dbg !59
  %10 = load i8, i8* %9, align 1, !dbg !60
  %conv8 = zext i8 %10 to i32, !dbg !60
  %and9 = and i32 %conv8, 128, !dbg !61
  %cmp10 = icmp ne i32 %and9, 0, !dbg !62
  br i1 %cmp10, label %do.body, label %do.end, !dbg !56, !llvm.loop !63

do.end:                                           ; preds = %do.cond
  call void @TRAMPOLINE_FUNCTION(), !dbg !66
  %11 = load i32, i32* %length.addr, align 4, !dbg !66
  %cmp12 = icmp ugt i32 %11, 268435455, !dbg !68
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !69

if.then14:                                        ; preds = %do.end
  store i32 -22, i32* %retval, align 4, !dbg !70
  br label %return, !dbg !70

if.end15:                                         ; preds = %do.end
  store i32 0, i32* %retval, align 4, !dbg !72
  br label %return, !dbg !72

return:                                           ; preds = %if.end15, %if.then14, %if.then
  call void @TRAMPOLINE_FUNCTION(), !dbg !73
  %12 = load i32, i32* %retval, align 4, !dbg !73
  ret i32 %12, !dbg !73
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @TRAMPOLINE_FUNCTION()

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10062(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !5, line: 26, baseType: !6)
!5 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !7, line: 42, baseType: !8)
!7 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!8 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 7, !"uwtable", i32 1}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!15 = distinct !DISubprogram(name: "packet_length_decode", scope: !16, file: !16, line: 18, type: !17, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!16 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2020-10062(auto)/patchedFunc.c", directory: "~/AutoPatch")
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !20, !4}
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "buf_ctx", file: !16, line: 13, size: 128, elements: !22)
!22 = !{!23, !26}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "cur", scope: !21, file: !16, line: 14, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !21, file: !16, line: 15, baseType: !24, size: 64, offset: 64)
!27 = !DILocalVariable(name: "buf", arg: 1, scope: !15, file: !16, line: 18, type: !20)
!28 = !DILocation(line: 18, column: 42, scope: !15)
!29 = !DILocalVariable(name: "length", arg: 2, scope: !15, file: !16, line: 18, type: !4)
!30 = !DILocation(line: 18, column: 56, scope: !15)
!31 = !DILocalVariable(name: "shift", scope: !15, file: !16, line: 20, type: !32)
!32 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !5, line: 24, baseType: !33)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !7, line: 38, baseType: !25)
!34 = !DILocation(line: 20, column: 10, scope: !15)
!35 = !DILocalVariable(name: "bytes", scope: !15, file: !16, line: 21, type: !32)
!36 = !DILocation(line: 21, column: 10, scope: !15)
!37 = !DILocation(line: 23, column: 9, scope: !15)
!38 = !DILocation(line: 24, column: 2, scope: !15)
!39 = !DILocation(line: 25, column: 7, scope: !40)
!40 = distinct !DILexicalBlock(scope: !41, file: !16, line: 25, column: 7)
!41 = distinct !DILexicalBlock(scope: !15, file: !16, line: 24, column: 5)
!42 = !DILocation(line: 25, column: 13, scope: !40)
!43 = !DILocation(line: 25, column: 7, scope: !41)
!44 = !DILocation(line: 26, column: 4, scope: !45)
!45 = distinct !DILexicalBlock(scope: !40, file: !16, line: 25, column: 39)
!46 = !DILocation(line: 32, column: 26, scope: !41)
!47 = !DILocation(line: 32, column: 31, scope: !41)
!48 = !DILocation(line: 32, column: 24, scope: !41)
!49 = !DILocation(line: 32, column: 14, scope: !41)
!50 = !DILocation(line: 32, column: 36, scope: !41)
!51 = !DILocation(line: 33, column: 12, scope: !41)
!52 = !DILocation(line: 33, column: 9, scope: !41)
!53 = !DILocation(line: 32, column: 10, scope: !41)
!54 = !DILocation(line: 34, column: 9, scope: !41)
!55 = !DILocation(line: 35, column: 8, scope: !41)
!56 = !DILocation(line: 36, column: 2, scope: !41)
!57 = !DILocation(line: 36, column: 14, scope: !15)
!58 = !DILocation(line: 36, column: 19, scope: !15)
!59 = !DILocation(line: 36, column: 22, scope: !15)
!60 = !DILocation(line: 36, column: 12, scope: !15)
!61 = !DILocation(line: 36, column: 26, scope: !15)
!62 = !DILocation(line: 36, column: 58, scope: !15)
!63 = distinct !{!63, !38, !64, !65}
!64 = !DILocation(line: 36, column: 63, scope: !15)
!65 = !{!"llvm.loop.mustprogress"}
!66 = !DILocation(line: 38, column: 6, scope: !67)
!67 = distinct !DILexicalBlock(scope: !15, file: !16, line: 38, column: 6)
!68 = !DILocation(line: 38, column: 13, scope: !67)
!69 = !DILocation(line: 38, column: 6, scope: !15)
!70 = !DILocation(line: 39, column: 3, scope: !71)
!71 = distinct !DILexicalBlock(scope: !67, file: !16, line: 38, column: 38)
!72 = !DILocation(line: 44, column: 2, scope: !15)
!73 = !DILocation(line: 45, column: 1, scope: !15)
