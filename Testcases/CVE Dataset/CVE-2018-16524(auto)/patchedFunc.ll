; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2018-16524(auto)/patchedFunc.c'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2018-16524(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [76 x i8] c"pxNetwork = %p and pxTCPPacket = %p and pucLast = %p and xdatalength = %u \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @prvCheckOptions() #0 !dbg !19 {
entry:
  %retval = alloca i32, align 4
  %pxNetwork = alloca i32*, align 8
  %pxTCPPacket = alloca i8*, align 8
  %pxTCPHeader = alloca i8*, align 8
  %pucLast = alloca i8*, align 8
  %xdatalength = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i32** %pxNetwork, metadata !24, metadata !DIExpression()), !dbg !29
  call void @llvm.dbg.declare(metadata i8** %pxTCPPacket, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32*, i32** %pxNetwork, align 8, !dbg !32
  %1 = bitcast i32* %0 to i8*, !dbg !33
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 24, !dbg !34
  store i8* %add.ptr, i8** %pxTCPPacket, align 8, !dbg !31
  call void @llvm.dbg.declare(metadata i8** %pxTCPHeader, metadata !35, metadata !DIExpression()), !dbg !36
  %2 = load i8*, i8** %pxTCPPacket, align 8, !dbg !37
  %add.ptr1 = getelementptr inbounds i8, i8* %2, i64 34, !dbg !38
  store i8* %add.ptr1, i8** %pxTCPHeader, align 8, !dbg !36
  call void @llvm.dbg.declare(metadata i8** %pucLast, metadata !39, metadata !DIExpression()), !dbg !40
  %3 = load i8*, i8** %pxTCPHeader, align 8, !dbg !41
  %add.ptr2 = getelementptr inbounds i8, i8* %3, i64 20, !dbg !42
  %4 = load i8*, i8** %pxTCPHeader, align 8, !dbg !43
  %add.ptr3 = getelementptr inbounds i8, i8* %4, i64 12, !dbg !44
  %5 = load i8, i8* %add.ptr3, align 1, !dbg !45
  %conv = zext i8 %5 to i32, !dbg !46
  %shr = ashr i32 %conv, 4, !dbg !47
  %sub = sub nsw i32 %shr, 5, !dbg !48
  %shl = shl i32 %sub, 2, !dbg !49
  %idx.ext = sext i32 %shl to i64, !dbg !50
  %add.ptr4 = getelementptr inbounds i8, i8* %add.ptr2, i64 %idx.ext, !dbg !50
  store i8* %add.ptr4, i8** %pucLast, align 8, !dbg !40
  call void @llvm.dbg.declare(metadata i8* %xdatalength, metadata !51, metadata !DIExpression()), !dbg !52
  %6 = load i32*, i32** %pxNetwork, align 8, !dbg !53
  %7 = bitcast i32* %6 to i8*, !dbg !54
  %add.ptr5 = getelementptr inbounds i8, i8* %7, i64 28, !dbg !55
  %8 = load i8, i8* %add.ptr5, align 1, !dbg !56
  store i8 %8, i8* %xdatalength, align 1, !dbg !52
  %9 = load i32*, i32** %pxNetwork, align 8, !dbg !57
  %10 = bitcast i32* %9 to i8*, !dbg !58
  %11 = load i8*, i8** %pxTCPPacket, align 8, !dbg !59
  %12 = load i8*, i8** %pucLast, align 8, !dbg !60
  %13 = load i8, i8* %xdatalength, align 1, !dbg !61
  %conv6 = zext i8 %13 to i32, !dbg !61
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 0), i8* %10, i8* %11, i8* %12, i32 %conv6), !dbg !62
  %14 = load i8*, i8** %pucLast, align 8, !dbg !63
  %15 = load i8*, i8** %pxTCPPacket, align 8, !dbg !65
  %16 = load i8, i8* %xdatalength, align 1, !dbg !66
  %conv7 = zext i8 %16 to i32, !dbg !66
  %idx.ext8 = sext i32 %conv7 to i64, !dbg !67
  %add.ptr9 = getelementptr inbounds i8, i8* %15, i64 %idx.ext8, !dbg !67
  %cmp = icmp ugt i8* %14, %add.ptr9, !dbg !68
  br i1 %cmp, label %if.then, label %if.end, !dbg !69

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !70
  br label %return, !dbg !70

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !72
  br label %return, !dbg !72

return:                                           ; preds = %if.end, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !73
  ret i32 %17, !dbg !73
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!13, !14, !15, !16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2018-16524(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{!4, !10, !12}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !6, line: 24, baseType: !7)
!6 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !8, line: 38, baseType: !9)
!8 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!9 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!13 = !{i32 7, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 7, !"uwtable", i32 1}
!17 = !{i32 7, !"frame-pointer", i32 2}
!18 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!19 = distinct !DISubprogram(name: "prvCheckOptions", scope: !20, file: !20, line: 8, type: !21, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!20 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2018-16524(auto)/patchedFunc.c", directory: "~/AutoPatch")
!21 = !DISubroutineType(types: !22)
!22 = !{!23}
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !DILocalVariable(name: "pxNetwork", scope: !19, file: !20, line: 10, type: !25)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !6, line: 26, baseType: !27)
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !8, line: 42, baseType: !28)
!28 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!29 = !DILocation(line: 10, column: 12, scope: !19)
!30 = !DILocalVariable(name: "pxTCPPacket", scope: !19, file: !20, line: 11, type: !4)
!31 = !DILocation(line: 11, column: 11, scope: !19)
!32 = !DILocation(line: 11, column: 49, scope: !19)
!33 = !DILocation(line: 11, column: 37, scope: !19)
!34 = !DILocation(line: 11, column: 59, scope: !19)
!35 = !DILocalVariable(name: "pxTCPHeader", scope: !19, file: !20, line: 12, type: !4)
!36 = !DILocation(line: 12, column: 15, scope: !19)
!37 = !DILocation(line: 12, column: 53, scope: !19)
!38 = !DILocation(line: 12, column: 65, scope: !19)
!39 = !DILocalVariable(name: "pucLast", scope: !19, file: !20, line: 14, type: !4)
!40 = !DILocation(line: 14, column: 15, scope: !19)
!41 = !DILocation(line: 14, column: 51, scope: !19)
!42 = !DILocation(line: 14, column: 63, scope: !19)
!43 = !DILocation(line: 14, column: 78, scope: !19)
!44 = !DILocation(line: 14, column: 90, scope: !19)
!45 = !DILocation(line: 14, column: 76, scope: !19)
!46 = !DILocation(line: 14, column: 75, scope: !19)
!47 = !DILocation(line: 14, column: 97, scope: !19)
!48 = !DILocation(line: 14, column: 103, scope: !19)
!49 = !DILocation(line: 14, column: 108, scope: !19)
!50 = !DILocation(line: 14, column: 70, scope: !19)
!51 = !DILocalVariable(name: "xdatalength", scope: !19, file: !20, line: 15, type: !5)
!52 = !DILocation(line: 15, column: 14, scope: !19)
!53 = !DILocation(line: 15, column: 49, scope: !19)
!54 = !DILocation(line: 15, column: 40, scope: !19)
!55 = !DILocation(line: 15, column: 59, scope: !19)
!56 = !DILocation(line: 15, column: 28, scope: !19)
!57 = !DILocation(line: 17, column: 100, scope: !19)
!58 = !DILocation(line: 17, column: 93, scope: !19)
!59 = !DILocation(line: 17, column: 118, scope: !19)
!60 = !DILocation(line: 17, column: 139, scope: !19)
!61 = !DILocation(line: 17, column: 149, scope: !19)
!62 = !DILocation(line: 17, column: 6, scope: !19)
!63 = !DILocation(line: 18, column: 10, scope: !64)
!64 = distinct !DILexicalBlock(scope: !19, file: !20, line: 18, column: 10)
!65 = !DILocation(line: 18, column: 20, scope: !64)
!66 = !DILocation(line: 18, column: 34, scope: !64)
!67 = !DILocation(line: 18, column: 32, scope: !64)
!68 = !DILocation(line: 18, column: 18, scope: !64)
!69 = !DILocation(line: 18, column: 10, scope: !19)
!70 = !DILocation(line: 20, column: 10, scope: !71)
!71 = distinct !DILexicalBlock(scope: !64, file: !20, line: 19, column: 6)
!72 = !DILocation(line: 23, column: 6, scope: !19)
!73 = !DILocation(line: 24, column: 1, scope: !19)
