; ModuleID = '~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10024(auto)/patchedFunc.ll'
source_filename = "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10024(auto)/patchedFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_syscall() #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %C_flag = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %C_flag, metadata !14, metadata !DIExpression()), !dbg !20
  call void @TRAMPOLINE_FUNCTION()
  %0 = load i32, i32* %C_flag, align 4, !dbg !21
  %and = and i32 %0, 536870912, !dbg !22
  store i32 %and, i32* %C_flag, align 4, !dbg !23
  %1 = load i32, i32* %C_flag, align 4, !dbg !24
  %cmp = icmp ne i32 %1, 0, !dbg !26
  br i1 %cmp, label %if.then, label %if.end, !dbg !27

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !28
  br label %return, !dbg !28

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !30
  br label %return, !dbg !30

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !31
  ret i32 %2, !dbg !31
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @TRAMPOLINE_FUNCTION()

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "~/AutoPatch/Testcases/CVE-Lists/CVE-2020-10024(auto)/patchedFunc.c", directory: "~/AutoPatch/Scripts")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.1 (https://github.com/llvm/llvm-project.git 75e33f71c2dae584b13a7d1186ae0a038ba98838)"}
!9 = distinct !DISubprogram(name: "do_syscall", scope: !10, file: !10, line: 8, type: !11, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "Testcases/CVE-Lists/CVE-2020-10024(auto)/patchedFunc.c", directory: "~/AutoPatch")
!11 = !DISubroutineType(types: !12)
!12 = !{!13}
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DILocalVariable(name: "C_flag", scope: !9, file: !10, line: 10, type: !15)
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !16, line: 26, baseType: !17)
!16 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !18, line: 42, baseType: !19)
!18 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!19 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!20 = !DILocation(line: 10, column: 11, scope: !9)
!21 = !DILocation(line: 12, column: 11, scope: !9)
!22 = !DILocation(line: 12, column: 18, scope: !9)
!23 = !DILocation(line: 12, column: 9, scope: !9)
!24 = !DILocation(line: 13, column: 6, scope: !25)
!25 = distinct !DILexicalBlock(scope: !9, file: !10, line: 13, column: 6)
!26 = !DILocation(line: 13, column: 13, scope: !25)
!27 = !DILocation(line: 13, column: 6, scope: !9)
!28 = !DILocation(line: 14, column: 10, scope: !29)
!29 = distinct !DILexicalBlock(scope: !25, file: !10, line: 13, column: 19)
!30 = !DILocation(line: 16, column: 6, scope: !9)
!31 = !DILocation(line: 17, column: 1, scope: !9)
