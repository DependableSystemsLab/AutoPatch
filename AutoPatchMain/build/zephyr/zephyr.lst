
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	40 3b 00 20 3d 40 00 00 9b 9c 00 00 11 40 00 00     @;. =@.......@..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	11 40 00 00 11 40 00 00 11 40 00 00 00 00 00 00     .@...@...@......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	fd 3c 00 00 11 40 00 00 00 00 00 00 a5 3c 00 00     .<...@.......<..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	11 40 00 00                                         .@..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
			switch (*fmt) {
  c0:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
  d0:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
  e0:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..
  f0:	b1 3d 00 00 b1 3d 00 00 b1 3d 00 00 b1 3d 00 00     .=...=...=...=..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
				align = VA_STACK_ALIGN(void *);
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
			switch (*fmt) {
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
		buf = (void *) ROUND_UP(buf, align);
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <CONFIG_SHELL_BACKEND_DUMMY_BUF_SIZE+0x8>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
		if (is_str_arg) {
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     166:	3a01      	subs	r2, #1
			int v = va_arg(ap, int);
     168:	ea83 0301 	eor.w	r3, r3, r1

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
			}
			buf += sizeof(int);
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
				arg_idx--;
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
				parsing = false;
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
				continue;
     17e:	3803      	subeq	r0, #3
				if (fmt[-1] == 'l') {
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
					if (fmt[-2] == 'l') {
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
				parsing = false;
     190:	3001      	addeq	r0, #1
					if (fmt[-2] == 'l') {
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
						align = VA_STACK_ALIGN(long long);
     196:	3001      	addeq	r0, #1
				size = sizeof(void *);
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
					v.ld = va_arg(ap, long double);
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <filter_10067>:
     1a0:	e9d0 1000 	ldrd	r1, r0, [r0]
				buf = (void *) ROUND_UP(buf, align);
     1a4:	1840      	adds	r0, r0, r1
					v.ld = va_arg(ap, long double);
     1a6:	f06f 0015 	mvn.w	r0, #21
				buf = (void *) ROUND_UP(buf, align);
     1aa:	f04f 0101 	mov.w	r1, #1
				if (buf0 != NULL) {
     1ae:	bf38      	it	cc
					if (BUF_OFFSET + size > len) {
     1b0:	2000      	movcc	r0, #0
     1b2:	bf38      	it	cc
     1b4:	2100      	movcc	r1, #0
     1b6:	4770      	bx	lr

000001b8 <__aeabi_uldivmod>:
     1b8:	b953      	cbnz	r3, 1d0 <__aeabi_uldivmod+0x18>
						*(long double *)buf = v.ld;
     1ba:	b94a      	cbnz	r2, 1d0 <__aeabi_uldivmod+0x18>
     1bc:	2900      	cmp	r1, #0
				buf += size;
     1be:	bf08      	it	eq
				parsing = false;
     1c0:	2800      	cmpeq	r0, #0
     1c2:	bf1c      	itt	ne
			switch (*fmt) {
     1c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			if (*++fmt == '\0') {
     1cc:	f000 b80c 	b.w	1e8 <__aeabi_idiv0>
     1d0:	f1ad 0c08 	sub.w	ip, sp, #8
			if (!parsing) {
     1d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1d8:	f000 f808 	bl	1ec <__udivmoddi4>
				if (*fmt == '%') {
     1dc:	f8dd e004 	ldr.w	lr, [sp, #4]
					arg_idx++;
     1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
					parsing = true;
     1e4:	b004      	add	sp, #16
     1e6:	4770      	bx	lr

000001e8 <__aeabi_idiv0>:
				align = VA_STACK_ALIGN(size_t);
     1e8:	4770      	bx	lr
     1ea:	bf00      	nop

000001ec <__udivmoddi4>:
     1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			switch (*fmt) {
     1f0:	4686      	mov	lr, r0
     1f2:	468c      	mov	ip, r1
				parsing = false;
     1f4:	4608      	mov	r0, r1
     1f6:	9e08      	ldr	r6, [sp, #32]

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f8:	4615      	mov	r5, r2
     1fa:	4674      	mov	r4, lr
					return -EINVAL;
     1fc:	4619      	mov	r1, r3
     1fe:	2b00      	cmp	r3, #0
     200:	f040 80c2 	bne.w	388 <__data_size+0xb0>
			long long v = va_arg(ap, long long);
     204:	4285      	cmp	r5, r0
     206:	fab2 f282 	clz	r2, r2
     20a:	d945      	bls.n	298 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x98>
     20c:	b14a      	cbz	r2, 222 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x22>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	f1c2 0320 	rsb	r3, r2, #32
				}
			}
			buf += sizeof(long long);
     212:	fa00 fc02 	lsl.w	ip, r0, r2
     216:	fa2e f303 	lsr.w	r3, lr, r3
		} else if (size == sizeof(int)) {
     21a:	4095      	lsls	r5, r2
     21c:	ea43 0c0c 	orr.w	ip, r3, ip
			int v = va_arg(ap, int);
     220:	4094      	lsls	r4, r2
			if (buf0 != NULL) {
     222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
		} else if (size == sizeof(long long)) {
     226:	b2a8      	uxth	r0, r5
			long long v = va_arg(ap, long long);
     228:	fbbc f8fe 	udiv	r8, ip, lr
     22c:	0c23      	lsrs	r3, r4, #16
     22e:	fb0e cc18 	mls	ip, lr, r8, ip
     232:	fb08 f900 	mul.w	r9, r8, r0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     23a:	4599      	cmp	r9, r3
			s = va_arg(ap, char *);
     23c:	d928      	bls.n	290 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x90>
     23e:	18eb      	adds	r3, r5, r3
     240:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
			if (is_ro && !do_ro) {
     244:	d204      	bcs.n	250 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x50>
     246:	4599      	cmp	r9, r3
     248:	d902      	bls.n	250 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x50>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	f1a8 0702 	sub.w	r7, r8, #2
     24e:	442b      	add	r3, r5
     250:	eba3 0309 	sub.w	r3, r3, r9
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     254:	b2a4      	uxth	r4, r4
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	fbb3 fcfe 	udiv	ip, r3, lr
     25a:	fb0e 331c 	mls	r3, lr, ip, r3
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25e:	fb0c f000 	mul.w	r0, ip, r0
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     266:	42a0      	cmp	r0, r4
     268:	d914      	bls.n	294 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x94>
     26a:	192c      	adds	r4, r5, r4
					str_ptr_arg[s_idx] = arg_idx;
     26c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
					str_ptr_pos[s_idx] = s_ptr_idx;
     270:	d204      	bcs.n	27c <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x7c>
					str_ptr_arg[s_idx] = arg_idx;
     272:	42a0      	cmp	r0, r4
     274:	d902      	bls.n	27c <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x7c>
					if (is_ro) {
     276:	f1ac 0302 	sub.w	r3, ip, #2
     27a:	442c      	add	r4, r5
     27c:	1a24      	subs	r4, r4, r0
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     282:	b11e      	cbz	r6, 28c <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x8c>
     284:	40d4      	lsrs	r4, r2
						s_ro_cnt++;
     286:	2300      	movs	r3, #0
     288:	6034      	str	r4, [r6, #0]
				s_idx++;
     28a:	6073      	str	r3, [r6, #4]
					if (BUF_OFFSET + size > len) {
     28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			buf += sizeof(char *);
     290:	4647      	mov	r7, r8
					if (BUF_OFFSET + size > len) {
     292:	e7dd      	b.n	250 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x50>
			switch (*fmt) {
     294:	4663      	mov	r3, ip
     296:	e7f1      	b.n	27c <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x7c>
     298:	bb92      	cbnz	r2, 300 <__data_size+0x28>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	1b43      	subs	r3, r0, r5
     29c:	2101      	movs	r1, #1
     29e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				} else if (is_ro) {
     2a2:	b2af      	uxth	r7, r5
     2a4:	fbb3 fcfe 	udiv	ip, r3, lr
					len += 1;
     2a8:	0c20      	lsrs	r0, r4, #16
				} else if (rws_pos_en) {
     2aa:	fb0e 331c 	mls	r3, lr, ip, r3
     2ae:	fb0c f807 	mul.w	r8, ip, r7
					len += strlen(s) + 1 + 1;
     2b2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     2b6:	4598      	cmp	r8, r3
     2b8:	d962      	bls.n	380 <__data_size+0xa8>
     2ba:	18eb      	adds	r3, r5, r3
     2bc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2c0:	d204      	bcs.n	2cc <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0xcc>
     2c2:	4598      	cmp	r8, r3
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	d902      	bls.n	2cc <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0xcc>
     2c6:	f1ac 0002 	sub.w	r0, ip, #2
     2ca:	442b      	add	r3, r5

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	eba3 0308 	sub.w	r3, r3, r8
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	b2a4      	uxth	r4, r4
     2d2:	fbb3 fcfe 	udiv	ip, r3, lr
     2d6:	fb0e 331c 	mls	r3, lr, ip, r3
     2da:	fb0c f707 	mul.w	r7, ip, r7
     2de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     2e2:	42a7      	cmp	r7, r4

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e4:	d94e      	bls.n	384 <__data_size+0xac>
     2e6:	192c      	adds	r4, r5, r4

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
	if (rws_pos_en) {
     2ec:	d204      	bcs.n	2f8 <__data_size+0x20>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	42a7      	cmp	r7, r4
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	d902      	bls.n	2f8 <__data_size+0x20>
     2f2:	f1ac 0302 	sub.w	r3, ip, #2
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f6:	442c      	add	r4, r5
     2f8:	1be4      	subs	r4, r4, r7
     2fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	e7c0      	b.n	282 <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x82>
     300:	f1c2 0320 	rsb	r3, r2, #32
		for (i = 0; i < s_idx; i++) {
     304:	fa20 f103 	lsr.w	r1, r0, r3
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	4095      	lsls	r5, r2
     30a:	4090      	lsls	r0, r2
     30c:	fa2e f303 	lsr.w	r3, lr, r3
			*buf++ = str_ptr_arg[i];
     310:	4303      	orrs	r3, r0
		if (BUF_OFFSET + 1 + size > len) {
     312:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			*buf++ = str_ptr_arg[i];
     316:	b2af      	uxth	r7, r5
	for (i = 0; i < s_idx; i++) {
     318:	fbb1 fcfe 	udiv	ip, r1, lr
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31c:	fb0e 101c 	mls	r0, lr, ip, r1
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	0c19      	lsrs	r1, r3, #16
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	fb0c f807 	mul.w	r8, ip, r7
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     326:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32a:	4588      	cmp	r8, r1
			if (BUF_OFFSET + 1 > len) {
     32c:	fa04 f402 	lsl.w	r4, r4, r2
     330:	d922      	bls.n	378 <__data_size+0xa0>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	1869      	adds	r1, r5, r1
     334:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
			if (BUF_OFFSET + 1 > len) {
     338:	d204      	bcs.n	344 <__data_size+0x6c>
			*buf++ = pos;
     33a:	4588      	cmp	r8, r1
     33c:	d902      	bls.n	344 <__data_size+0x6c>
		for (i = 0; i < s_idx; i++) {
     33e:	f1ac 0002 	sub.w	r0, ip, #2
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	4429      	add	r1, r5
     344:	eba1 0108 	sub.w	r1, r1, r8
     348:	b29b      	uxth	r3, r3
     34a:	fbb1 fcfe 	udiv	ip, r1, lr
     34e:	fb0e 111c 	mls	r1, lr, ip, r1
		if (rws_pos_en) {
     352:	fb0c f707 	mul.w	r7, ip, r7
			*buf++ = str_ptr_arg[i];
     356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     35a:	429f      	cmp	r7, r3
			size = 0;
     35c:	d90e      	bls.n	37c <__data_size+0xa4>
		if (BUF_OFFSET + 1 + size > len) {
     35e:	18eb      	adds	r3, r5, r3
     360:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     364:	d204      	bcs.n	370 <__data_size+0x98>
     366:	429f      	cmp	r7, r3
     368:	d902      	bls.n	370 <__data_size+0x98>
		*buf++ = str_ptr_pos[i];
     36a:	f1ac 0102 	sub.w	r1, ip, #2
     36e:	442b      	add	r3, r5
     370:	1bdb      	subs	r3, r3, r7
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     372:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     376:	e792      	b.n	29e <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x9e>
     378:	4660      	mov	r0, ip
     37a:	e7e3      	b.n	344 <__data_size+0x6c>
		buf += size;
     37c:	4661      	mov	r1, ip
     37e:	e7f7      	b.n	370 <__data_size+0x98>
	for (i = 0; i < s_idx; i++) {
     380:	4660      	mov	r0, ip
     382:	e7a3      	b.n	2cc <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0xcc>
     384:	4663      	mov	r3, ip
     386:	e7b7      	b.n	2f8 <__data_size+0x20>
     388:	4283      	cmp	r3, r0
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	d906      	bls.n	39a <__data_size+0xc2>
     38c:	b916      	cbnz	r6, 394 <__data_size+0xbc>
     38e:	2100      	movs	r1, #0
     390:	4608      	mov	r0, r1
     392:	e77b      	b.n	28c <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x8c>
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	e9c6 e000 	strd	lr, r0, [r6]
     398:	e7f9      	b.n	38e <__data_size+0xb6>
			size = strlen(s) + 1;
     39a:	fab3 f783 	clz	r7, r3
     39e:	b98f      	cbnz	r7, 3c4 <__data_size+0xec>
     3a0:	4283      	cmp	r3, r0
     3a2:	d301      	bcc.n	3a8 <__data_size+0xd0>
		return -EFAULT;
     3a4:	4572      	cmp	r2, lr
     3a6:	d808      	bhi.n	3ba <__data_size+0xe2>
     3a8:	ebbe 0402 	subs.w	r4, lr, r2
     3ac:	eb60 0303 	sbc.w	r3, r0, r3
     3b0:	2001      	movs	r0, #1
     3b2:	469c      	mov	ip, r3
     3b4:	b91e      	cbnz	r6, 3be <__data_size+0xe6>
     3b6:	2100      	movs	r1, #0
     3b8:	e768      	b.n	28c <CONFIG_SHELL_BACKEND_SERIAL_LOG_MESSAGE_QUEUE_SIZE+0x8c>
     3ba:	4638      	mov	r0, r7
     3bc:	e7fa      	b.n	3b4 <__data_size+0xdc>
     3be:	e9c6 4c00 	strd	r4, ip, [r6]
     3c2:	e7f8      	b.n	3b6 <__data_size+0xde>
     3c4:	f1c7 0c20 	rsb	ip, r7, #32
     3c8:	40bb      	lsls	r3, r7
     3ca:	fa22 f40c 	lsr.w	r4, r2, ip
     3ce:	431c      	orrs	r4, r3
     3d0:	fa2e f10c 	lsr.w	r1, lr, ip
     3d4:	fa20 f30c 	lsr.w	r3, r0, ip
     3d8:	40b8      	lsls	r0, r7
     3da:	4301      	orrs	r1, r0
     3dc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     3e0:	fa0e f507 	lsl.w	r5, lr, r7
     3e4:	fbb3 f8f9 	udiv	r8, r3, r9
     3e8:	fa1f fe84 	uxth.w	lr, r4
     3ec:	fb09 3018 	mls	r0, r9, r8, r3
     3f0:	0c0b      	lsrs	r3, r1, #16
     3f2:	fb08 fa0e 	mul.w	sl, r8, lr
     3f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     3fa:	459a      	cmp	sl, r3
     3fc:	fa02 f207 	lsl.w	r2, r2, r7
     400:	d940      	bls.n	484 <CONFIG_FLASH_SIZE+0x84>
     402:	18e3      	adds	r3, r4, r3
     404:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     408:	d204      	bcs.n	414 <CONFIG_FLASH_SIZE+0x14>
     40a:	459a      	cmp	sl, r3
     40c:	d902      	bls.n	414 <CONFIG_FLASH_SIZE+0x14>
     40e:	f1a8 0002 	sub.w	r0, r8, #2
     412:	4423      	add	r3, r4
     414:	eba3 030a 	sub.w	r3, r3, sl
     418:	b289      	uxth	r1, r1
     41a:	fbb3 f8f9 	udiv	r8, r3, r9
     41e:	fb09 3318 	mls	r3, r9, r8, r3
     422:	fb08 fe0e 	mul.w	lr, r8, lr
     426:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     42a:	458e      	cmp	lr, r1
     42c:	d92c      	bls.n	488 <CONFIG_FLASH_SIZE+0x88>
     42e:	1861      	adds	r1, r4, r1
     430:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     434:	d204      	bcs.n	440 <CONFIG_FLASH_SIZE+0x40>
     436:	458e      	cmp	lr, r1
     438:	d902      	bls.n	440 <CONFIG_FLASH_SIZE+0x40>
     43a:	f1a8 0302 	sub.w	r3, r8, #2
     43e:	4421      	add	r1, r4
     440:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     444:	fba0 9802 	umull	r9, r8, r0, r2
     448:	eba1 010e 	sub.w	r1, r1, lr
     44c:	4541      	cmp	r1, r8
     44e:	46ce      	mov	lr, r9
     450:	4643      	mov	r3, r8
     452:	d302      	bcc.n	45a <CONFIG_FLASH_SIZE+0x5a>
     454:	d106      	bne.n	464 <CONFIG_FLASH_SIZE+0x64>
     456:	454d      	cmp	r5, r9
     458:	d204      	bcs.n	464 <CONFIG_FLASH_SIZE+0x64>
     45a:	ebb9 0e02 	subs.w	lr, r9, r2
     45e:	eb68 0304 	sbc.w	r3, r8, r4
     462:	3801      	subs	r0, #1
     464:	2e00      	cmp	r6, #0
     466:	d0a6      	beq.n	3b6 <__data_size+0xde>
     468:	ebb5 020e 	subs.w	r2, r5, lr
     46c:	eb61 0103 	sbc.w	r1, r1, r3
     470:	fa01 fc0c 	lsl.w	ip, r1, ip
     474:	fa22 f307 	lsr.w	r3, r2, r7
     478:	ea4c 0303 	orr.w	r3, ip, r3
     47c:	40f9      	lsrs	r1, r7
     47e:	e9c6 3100 	strd	r3, r1, [r6]
     482:	e798      	b.n	3b6 <__data_size+0xde>
     484:	4640      	mov	r0, r8
     486:	e7c5      	b.n	414 <CONFIG_FLASH_SIZE+0x14>
     488:	4643      	mov	r3, r8
     48a:	e7d9      	b.n	440 <CONFIG_FLASH_SIZE+0x40>

0000048c <strcmp>:
     48c:	f810 2b01 	ldrb.w	r2, [r0], #1
     490:	f811 3b01 	ldrb.w	r3, [r1], #1
     494:	2a01      	cmp	r2, #1
     496:	bf28      	it	cs
     498:	429a      	cmpcs	r2, r3
     49a:	d0f7      	beq.n	48c <strcmp>
     49c:	1ad0      	subs	r0, r2, r3
     49e:	4770      	bx	lr

000004a0 <strlen>:
     4a0:	4603      	mov	r3, r0
     4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
     4a6:	2a00      	cmp	r2, #0
     4a8:	d1fb      	bne.n	4a2 <strlen+0x2>
     4aa:	1a18      	subs	r0, r3, r0
     4ac:	3801      	subs	r0, #1
     4ae:	4770      	bx	lr

000004b0 <z_impl_sys_clock_hw_cycles_per_sec_runtime_get>:
			// 32
		case EBPF_OP_ADD_IMM:
			DST = (u32)DST + (u32)IMM;
			break;
		case EBPF_OP_ADD_REG:
			DST = (u32)DST + (u32)SRC;
     4b0:	b480      	push	{r7}
     4b2:	af00      	add	r7, sp, #0
     4b4:	4b02      	ldr	r3, [pc, #8]	; (4c0 <z_impl_sys_clock_hw_cycles_per_sec_runtime_get+0x10>)
     4b6:	681b      	ldr	r3, [r3, #0]
     4b8:	4618      	mov	r0, r3
     4ba:	46bd      	mov	sp, r7
     4bc:	bc80      	pop	{r7}
     4be:	4770      	bx	lr
     4c0:	20000200 	.word	0x20000200

000004c4 <dwt_init>:
     4c4:	b480      	push	{r7}
     4c6:	af00      	add	r7, sp, #0
     4c8:	4b0a      	ldr	r3, [pc, #40]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     4ca:	2240      	movs	r2, #64	; 0x40
     4cc:	601a      	str	r2, [r3, #0]
     4ce:	4b0a      	ldr	r3, [pc, #40]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	4a09      	ldr	r2, [pc, #36]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     4d8:	6013      	str	r3, [r2, #0]
     4da:	4b08      	ldr	r3, [pc, #32]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
			break;
     4dc:	2200      	movs	r2, #0
     4de:	601a      	str	r2, [r3, #0]
		case EBPF_OP_SUB_IMM:
			DST = (u32)DST - (u32)IMM;
     4e0:	4b07      	ldr	r3, [pc, #28]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4e2:	681b      	ldr	r3, [r3, #0]
     4e4:	4a06      	ldr	r2, [pc, #24]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4e6:	f043 0301 	orr.w	r3, r3, #1
     4ea:	6013      	str	r3, [r2, #0]
     4ec:	bf00      	nop
     4ee:	46bd      	mov	sp, r7
     4f0:	bc80      	pop	{r7}
     4f2:	4770      	bx	lr
     4f4:	20000000 	.word	0x20000000
     4f8:	e000edfc 	.word	0xe000edfc
     4fc:	e0001004 	.word	0xe0001004
     500:	e0001000 	.word	0xe0001000

00000504 <dwt_get_counter>:
     504:	b480      	push	{r7}
     506:	af00      	add	r7, sp, #0
     508:	4b02      	ldr	r3, [pc, #8]	; (514 <dwt_get_counter+0x10>)
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	4618      	mov	r0, r3
     50e:	46bd      	mov	sp, r7
     510:	bc80      	pop	{r7}
     512:	4770      	bx	lr
     514:	e0001004 	.word	0xe0001004

00000518 <setup_profiler>:
     518:	b580      	push	{r7, lr}
     51a:	af00      	add	r7, sp, #0
     51c:	4b07      	ldr	r3, [pc, #28]	; (53c <setup_profiler+0x24>)
     51e:	2200      	movs	r2, #0
     520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
     524:	f7ff ffce 	bl	4c4 <dwt_init>
     528:	4b05      	ldr	r3, [pc, #20]	; (540 <setup_profiler+0x28>)
     52a:	681b      	ldr	r3, [r3, #0]
     52c:	4a03      	ldr	r2, [pc, #12]	; (53c <setup_profiler+0x24>)
     52e:	6613      	str	r3, [r2, #96]	; 0x60
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <setup_profiler+0x2c>)
     532:	681b      	ldr	r3, [r3, #0]
			break;
     534:	4a01      	ldr	r2, [pc, #4]	; (53c <setup_profiler+0x24>)
     536:	6653      	str	r3, [r2, #100]	; 0x64
		case EBPF_OP_SUB_REG:
			DST = (u32)DST - (u32)SRC;
     538:	bf00      	nop
     53a:	bd80      	pop	{r7, pc}
     53c:	20000778 	.word	0x20000778
     540:	0000bc7c 	.word	0x0000bc7c
     544:	0000bc78 	.word	0x0000bc78

00000548 <profile_add_event>:
     548:	b580      	push	{r7, lr}
     54a:	b084      	sub	sp, #16
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
     550:	4b1b      	ldr	r3, [pc, #108]	; (5c0 <profile_add_event+0x78>)
     552:	781b      	ldrb	r3, [r3, #0]
     554:	f083 0301 	eor.w	r3, r3, #1
     558:	b2db      	uxtb	r3, r3
     55a:	2b00      	cmp	r3, #0
     55c:	d001      	beq.n	562 <profile_add_event+0x1a>
     55e:	f7ff ffdb 	bl	518 <setup_profiler>
     562:	4b18      	ldr	r3, [pc, #96]	; (5c4 <profile_add_event+0x7c>)
     564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
     568:	2b0b      	cmp	r3, #11
     56a:	dd03      	ble.n	574 <profile_add_event+0x2c>
     56c:	4b15      	ldr	r3, [pc, #84]	; (5c4 <profile_add_event+0x7c>)
     56e:	2200      	movs	r2, #0
     570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
     574:	4b13      	ldr	r3, [pc, #76]	; (5c4 <profile_add_event+0x7c>)
     576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
     57a:	60fb      	str	r3, [r7, #12]
     57c:	4911      	ldr	r1, [pc, #68]	; (5c4 <profile_add_event+0x7c>)
     57e:	68fb      	ldr	r3, [r7, #12]
     580:	3318      	adds	r3, #24
     582:	687a      	ldr	r2, [r7, #4]
     584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     588:	4a0e      	ldr	r2, [pc, #56]	; (5c4 <profile_add_event+0x7c>)
     58a:	68fb      	ldr	r3, [r7, #12]
     58c:	330c      	adds	r3, #12
     58e:	2100      	movs	r1, #0
     590:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     594:	4a0b      	ldr	r2, [pc, #44]	; (5c4 <profile_add_event+0x7c>)
     596:	68fb      	ldr	r3, [r7, #12]
     598:	330c      	adds	r3, #12
     59a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     59e:	4909      	ldr	r1, [pc, #36]	; (5c4 <profile_add_event+0x7c>)
     5a0:	68fb      	ldr	r3, [r7, #12]
     5a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     5a6:	4b07      	ldr	r3, [pc, #28]	; (5c4 <profile_add_event+0x7c>)
			break;
     5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
		case EBPF_OP_MUL_IMM:
			DST = (u32)DST * (u32)IMM;
     5ac:	3301      	adds	r3, #1
     5ae:	4a05      	ldr	r2, [pc, #20]	; (5c4 <profile_add_event+0x7c>)
     5b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
     5b4:	68fb      	ldr	r3, [r7, #12]
     5b6:	4618      	mov	r0, r3
     5b8:	3710      	adds	r7, #16
     5ba:	46bd      	mov	sp, r7
     5bc:	bd80      	pop	{r7, pc}
     5be:	bf00      	nop
     5c0:	2000184c 	.word	0x2000184c
     5c4:	20000778 	.word	0x20000778

000005c8 <profile_start>:
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
     5d0:	4b0b      	ldr	r3, [pc, #44]	; (600 <profile_start+0x38>)
     5d2:	781b      	ldrb	r3, [r3, #0]
     5d4:	f083 0301 	eor.w	r3, r3, #1
     5d8:	b2db      	uxtb	r3, r3
     5da:	2b00      	cmp	r3, #0
     5dc:	d004      	beq.n	5e8 <profile_start+0x20>
     5de:	f7ff ff9b 	bl	518 <setup_profiler>
     5e2:	4b07      	ldr	r3, [pc, #28]	; (600 <profile_start+0x38>)
     5e4:	2201      	movs	r2, #1
     5e6:	701a      	strb	r2, [r3, #0]
     5e8:	f7ff ff8c 	bl	504 <dwt_get_counter>
     5ec:	4602      	mov	r2, r0
     5ee:	4905      	ldr	r1, [pc, #20]	; (604 <profile_start+0x3c>)
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     5f6:	bf00      	nop
     5f8:	3708      	adds	r7, #8
     5fa:	46bd      	mov	sp, r7
     5fc:	bd80      	pop	{r7, pc}
     5fe:	bf00      	nop
     600:	2000184c 	.word	0x2000184c
			break;
     604:	20000778 	.word	0x20000778

00000608 <profile_end>:
		case EBPF_OP_MUL_REG:
			DST = (u32)DST * (u32)SRC;
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
     610:	f7ff ff78 	bl	504 <dwt_get_counter>
     614:	4602      	mov	r2, r0
     616:	4909      	ldr	r1, [pc, #36]	; (63c <profile_end+0x34>)
     618:	687b      	ldr	r3, [r7, #4]
     61a:	330c      	adds	r3, #12
     61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     620:	4a06      	ldr	r2, [pc, #24]	; (63c <profile_end+0x34>)
     622:	687b      	ldr	r3, [r7, #4]
     624:	330c      	adds	r3, #12
     626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     62a:	4904      	ldr	r1, [pc, #16]	; (63c <profile_end+0x34>)
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     632:	1ad3      	subs	r3, r2, r3
     634:	4618      	mov	r0, r3
     636:	3708      	adds	r7, #8
     638:	46bd      	mov	sp, r7
     63a:	bd80      	pop	{r7, pc}
     63c:	20000778 	.word	0x20000778

00000640 <main>:
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	f008 f98b 	bl	8960 <sys_clock_hw_cycles_per_sec>
     64a:	4603      	mov	r3, r0
     64c:	607b      	str	r3, [r7, #4]
     64e:	6879      	ldr	r1, [r7, #4]
     650:	4804      	ldr	r0, [pc, #16]	; (664 <main+0x24>)
     652:	f007 f875 	bl	7740 <iprintf>
     656:	f000 f807 	bl	668 <test_c27>
     65a:	bf00      	nop
     65c:	3708      	adds	r7, #8
     65e:	46bd      	mov	sp, r7
     660:	bd80      	pop	{r7, pc}
     662:	bf00      	nop
     664:	0000b898 	.word	0x0000b898

00000668 <test_c27>:
     668:	b5b0      	push	{r4, r5, r7, lr}
     66a:	b090      	sub	sp, #64	; 0x40
     66c:	af00      	add	r7, sp, #0
     66e:	f04f 0200 	mov.w	r2, #0
     672:	f04f 0300 	mov.w	r3, #0
     676:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			break;
     67a:	2305      	movs	r3, #5
		case EBPF_OP_DIV_IMM:
			DST = (u32)DST / (u32)IMM;
     67c:	62fb      	str	r3, [r7, #44]	; 0x2c
     67e:	2300      	movs	r3, #0
     680:	62bb      	str	r3, [r7, #40]	; 0x28
     682:	2300      	movs	r3, #0
     684:	627b      	str	r3, [r7, #36]	; 0x24
     686:	1d3b      	adds	r3, r7, #4
     688:	2220      	movs	r2, #32
     68a:	2100      	movs	r1, #0
     68c:	4618      	mov	r0, r3
     68e:	f00a fa5d 	bl	ab4c <memset>
     692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     694:	607b      	str	r3, [r7, #4]
     696:	6abb      	ldr	r3, [r7, #40]	; 0x28
     698:	60bb      	str	r3, [r7, #8]
     69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     69c:	60fb      	str	r3, [r7, #12]
     69e:	2300      	movs	r3, #0
     6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
     6a2:	4814      	ldr	r0, [pc, #80]	; (6f4 <test_c27+0x8c>)
     6a4:	f7ff ff50 	bl	548 <profile_add_event>
     6a8:	2300      	movs	r3, #0
     6aa:	63bb      	str	r3, [r7, #56]	; 0x38
     6ac:	e016      	b.n	6dc <test_c27+0x74>
     6ae:	2000      	movs	r0, #0
     6b0:	f7ff ff8a 	bl	5c8 <profile_start>
     6b4:	1d3b      	adds	r3, r7, #4
     6b6:	4618      	mov	r0, r3
     6b8:	f7ff fd72 	bl	1a0 <filter_10067>
     6bc:	4603      	mov	r3, r0
     6be:	17da      	asrs	r2, r3, #31
     6c0:	461c      	mov	r4, r3
     6c2:	4615      	mov	r5, r2
     6c4:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
     6c8:	2000      	movs	r0, #0
     6ca:	f7ff ff9d 	bl	608 <profile_end>
     6ce:	4602      	mov	r2, r0
     6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
			break;
     6d2:	4413      	add	r3, r2
     6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		case EBPF_OP_DIV_REG:
			if (SRC == 0) {
     6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6d8:	3301      	adds	r3, #1
     6da:	63bb      	str	r3, [r7, #56]	; 0x38
     6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     6e2:	dbe4      	blt.n	6ae <test_c27+0x46>
     6e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     6e6:	4804      	ldr	r0, [pc, #16]	; (6f8 <test_c27+0x90>)
     6e8:	f007 f82a 	bl	7740 <iprintf>
     6ec:	bf00      	nop
     6ee:	3740      	adds	r7, #64	; 0x40
     6f0:	46bd      	mov	sp, r7
     6f2:	bdb0      	pop	{r4, r5, r7, pc}
     6f4:	0000b6e8 	.word	0x0000b6e8
				//fprintf(stderr, "uBPF error: division by zero at PC %u\n", cur_pc);
				return -1;
     6f8:	0000b8b0 	.word	0x0000b8b0

000006fc <getopt>:
/*
 * getopt --
 *	Parse argc/argv argument vector.
 */
int getopt(int nargc, char *const nargv[], const char *ostr)
{
     6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     700:	4607      	mov	r7, r0
     702:	460e      	mov	r6, r1
     704:	4615      	mov	r5, r2
	struct getopt_state *state;
	char *oli; /* option letter list index */

	/* get getopt state of the current thread */
	state = getopt_state_get();
     706:	f000 f88f 	bl	828 <getopt_state_get>

	if (state->optreset || *state->place == 0) { /* update scanning pointer */
     70a:	68c3      	ldr	r3, [r0, #12]
	state = getopt_state_get();
     70c:	4604      	mov	r4, r0
	if (state->optreset || *state->place == 0) { /* update scanning pointer */
     70e:	b91b      	cbnz	r3, 718 <getopt+0x1c>
     710:	6943      	ldr	r3, [r0, #20]
     712:	781a      	ldrb	r2, [r3, #0]
     714:	2a00      	cmp	r2, #0
     716:	d140      	bne.n	79a <getopt+0x9e>
		state->optreset = 0;
     718:	2300      	movs	r3, #0
     71a:	60e3      	str	r3, [r4, #12]
		state->place = nargv[state->optind];
     71c:	6863      	ldr	r3, [r4, #4]
		if (state->optind >= nargc || *state->place++ != '-') {
     71e:	42bb      	cmp	r3, r7
		state->place = nargv[state->optind];
     720:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
		if (state->optind >= nargc || *state->place++ != '-') {
     724:	db08      	blt.n	738 <getopt+0x3c>
		}
		state->optopt = *state->place++;
		if (state->optopt == '-' && *state->place == 0) {
			/* "--" => end of options */
			++state->optind;
			state->place = EMSG;
     726:	4b32      	ldr	r3, [pc, #200]	; (7f0 <getopt+0xf4>)
     728:	6163      	str	r3, [r4, #20]
			z_getopt_global_state_update(state);
     72a:	4620      	mov	r0, r4
     72c:	f000 f862 	bl	7f4 <z_getopt_global_state_update>
			return -1;
     730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		state->place = EMSG;
		++state->optind;
	}
	z_getopt_global_state_update(state);
	return state->optopt;	/* return option letter */
}
     734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (state->optind >= nargc || *state->place++ != '-') {
     738:	1c51      	adds	r1, r2, #1
     73a:	6161      	str	r1, [r4, #20]
     73c:	f892 8000 	ldrb.w	r8, [r2]
     740:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
     744:	d1ef      	bne.n	726 <getopt+0x2a>
		state->optopt = *state->place++;
     746:	1c91      	adds	r1, r2, #2
     748:	6161      	str	r1, [r4, #20]
     74a:	7851      	ldrb	r1, [r2, #1]
     74c:	60a1      	str	r1, [r4, #8]
		if (state->optopt == '-' && *state->place == 0) {
     74e:	292d      	cmp	r1, #45	; 0x2d
     750:	d104      	bne.n	75c <getopt+0x60>
     752:	7892      	ldrb	r2, [r2, #2]
     754:	b96a      	cbnz	r2, 772 <getopt+0x76>
			++state->optind;
     756:	3301      	adds	r3, #1
     758:	6063      	str	r3, [r4, #4]
     75a:	e7e4      	b.n	726 <getopt+0x2a>
		if (state->optopt == 0) {
     75c:	b949      	cbnz	r1, 772 <getopt+0x76>
			state->place = EMSG;
     75e:	4b24      	ldr	r3, [pc, #144]	; (7f0 <getopt+0xf4>)
     760:	6163      	str	r3, [r4, #20]
			if (strchr(ostr, '-') == NULL) {
     762:	4641      	mov	r1, r8
     764:	4628      	mov	r0, r5
     766:	f00a fa02 	bl	ab6e <strchr>
     76a:	2800      	cmp	r0, #0
     76c:	d0dd      	beq.n	72a <getopt+0x2e>
			state->optopt = '-';
     76e:	f8c4 8008 	str.w	r8, [r4, #8]
	oli = strchr(ostr, state->optopt);
     772:	68a1      	ldr	r1, [r4, #8]
     774:	4628      	mov	r0, r5
     776:	f00a f9fa 	bl	ab6e <strchr>
	if (state->optopt == ':' || oli == NULL) {
     77a:	68a3      	ldr	r3, [r4, #8]
     77c:	2b3a      	cmp	r3, #58	; 0x3a
     77e:	6963      	ldr	r3, [r4, #20]
     780:	d001      	beq.n	786 <getopt+0x8a>
		if (*state->place == 0) {
     782:	461a      	mov	r2, r3
	if (state->optopt == ':' || oli == NULL) {
     784:	b970      	cbnz	r0, 7a4 <getopt+0xa8>
		if (*state->place == 0) {
     786:	781b      	ldrb	r3, [r3, #0]
     788:	b913      	cbnz	r3, 790 <getopt+0x94>
			++state->optind;
     78a:	6863      	ldr	r3, [r4, #4]
     78c:	3301      	adds	r3, #1
     78e:	6063      	str	r3, [r4, #4]
		z_getopt_global_state_update(state);
     790:	4620      	mov	r0, r4
			z_getopt_global_state_update(state);
     792:	f000 f82f 	bl	7f4 <z_getopt_global_state_update>
		return BADCH;
     796:	203f      	movs	r0, #63	; 0x3f
     798:	e7cc      	b.n	734 <getopt+0x38>
		state->optopt = *state->place++;
     79a:	1c5a      	adds	r2, r3, #1
     79c:	6142      	str	r2, [r0, #20]
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	6083      	str	r3, [r0, #8]
     7a2:	e7e6      	b.n	772 <getopt+0x76>
	if (oli[1] != ':') {
     7a4:	7841      	ldrb	r1, [r0, #1]
     7a6:	293a      	cmp	r1, #58	; 0x3a
     7a8:	d00b      	beq.n	7c2 <getopt+0xc6>
		state->optarg = NULL;
     7aa:	2200      	movs	r2, #0
     7ac:	6122      	str	r2, [r4, #16]
		if (*state->place == 0) {
     7ae:	781b      	ldrb	r3, [r3, #0]
     7b0:	b913      	cbnz	r3, 7b8 <getopt+0xbc>
		++state->optind;
     7b2:	6863      	ldr	r3, [r4, #4]
     7b4:	3301      	adds	r3, #1
     7b6:	6063      	str	r3, [r4, #4]
	z_getopt_global_state_update(state);
     7b8:	4620      	mov	r0, r4
     7ba:	f000 f81b 	bl	7f4 <z_getopt_global_state_update>
	return state->optopt;	/* return option letter */
     7be:	68a0      	ldr	r0, [r4, #8]
     7c0:	e7b8      	b.n	734 <getopt+0x38>
		if (*state->place) {
     7c2:	7810      	ldrb	r0, [r2, #0]
			++state->optind;
     7c4:	6863      	ldr	r3, [r4, #4]
     7c6:	490a      	ldr	r1, [pc, #40]	; (7f0 <getopt+0xf4>)
		if (*state->place) {
     7c8:	b928      	cbnz	r0, 7d6 <getopt+0xda>
		} else if (nargc > ++state->optind) {
     7ca:	3301      	adds	r3, #1
     7cc:	429f      	cmp	r7, r3
     7ce:	6063      	str	r3, [r4, #4]
     7d0:	dd04      	ble.n	7dc <getopt+0xe0>
			state->optarg = nargv[state->optind];
     7d2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
		state->place = EMSG;
     7d6:	e9c4 2104 	strd	r2, r1, [r4, #16]
     7da:	e7ea      	b.n	7b2 <getopt+0xb6>
			state->place = EMSG;
     7dc:	6161      	str	r1, [r4, #20]
			if (*ostr == ':') {
     7de:	782d      	ldrb	r5, [r5, #0]
     7e0:	2d3a      	cmp	r5, #58	; 0x3a
				z_getopt_global_state_update(state);
     7e2:	4620      	mov	r0, r4
			if (*ostr == ':') {
     7e4:	d1d5      	bne.n	792 <getopt+0x96>
				z_getopt_global_state_update(state);
     7e6:	f000 f805 	bl	7f4 <z_getopt_global_state_update>
				return BADARG;
     7ea:	4628      	mov	r0, r5
     7ec:	e7a2      	b.n	734 <getopt+0x38>
     7ee:	bf00      	nop
     7f0:	0000c50b 	.word	0x0000c50b

000007f4 <z_getopt_global_state_update>:
/* This function is not thread safe. All threads using getopt are calling
 * this function.
 */
void z_getopt_global_state_update(struct getopt_state *state)
{
	opterr = state->opterr;
     7f4:	4b07      	ldr	r3, [pc, #28]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     7f6:	6802      	ldr	r2, [r0, #0]
     7f8:	601a      	str	r2, [r3, #0]
	optind = state->optind;
     7fa:	4b07      	ldr	r3, [pc, #28]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7fc:	6842      	ldr	r2, [r0, #4]
     7fe:	601a      	str	r2, [r3, #0]
	optopt = state->optopt;
     800:	4b06      	ldr	r3, [pc, #24]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     802:	6882      	ldr	r2, [r0, #8]
     804:	601a      	str	r2, [r3, #0]
	optreset = state->optreset;
     806:	4b06      	ldr	r3, [pc, #24]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     808:	68c2      	ldr	r2, [r0, #12]
     80a:	601a      	str	r2, [r3, #0]
	optarg = state->optarg;
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     80e:	6902      	ldr	r2, [r0, #16]
     810:	601a      	str	r2, [r3, #0]
}
     812:	4770      	bx	lr
     814:	20000020 	.word	0x20000020
     818:	2000001c 	.word	0x2000001c
     81c:	20000814 	.word	0x20000814
     820:	20000810 	.word	0x20000810
     824:	2000080c 	.word	0x2000080c

00000828 <getopt_state_get>:
		}
	}
#endif
	/* If not a shell thread return a common pointer */
	return &m_getopt_common_state;
}
     828:	4800      	ldr	r0, [pc, #0]	; (82c <getopt_state_get+0x4>)
     82a:	4770      	bx	lr
     82c:	20000004 	.word	0x20000004

00000830 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     830:	4b01      	ldr	r3, [pc, #4]	; (838 <char_out+0x8>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	4718      	bx	r3
     836:	bf00      	nop
     838:	20000024 	.word	0x20000024

0000083c <__printk_hook_install>:
	_char_out = fn;
     83c:	4b01      	ldr	r3, [pc, #4]	; (844 <__z_interrupt_stack_SIZEOF+0x4>)
     83e:	6018      	str	r0, [r3, #0]
}
     840:	4770      	bx	lr
     842:	bf00      	nop
     844:	20000024 	.word	0x20000024

00000848 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     848:	b507      	push	{r0, r1, r2, lr}
     84a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     84c:	2100      	movs	r1, #0
     84e:	4602      	mov	r2, r0
     850:	9100      	str	r1, [sp, #0]
     852:	4803      	ldr	r0, [pc, #12]	; (860 <vprintk+0x18>)
     854:	f000 f976 	bl	b44 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     858:	b003      	add	sp, #12
     85a:	f85d fb04 	ldr.w	pc, [sp], #4
     85e:	bf00      	nop
     860:	00000831 	.word	0x00000831

00000864 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     868:	8b05      	ldrh	r5, [r0, #24]
{
     86a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     86c:	0728      	lsls	r0, r5, #28
{
     86e:	4690      	mov	r8, r2
	if (processing) {
     870:	d411      	bmi.n	896 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     872:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     874:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     878:	f040 80cd 	bne.w	a16 <process_event+0x1b2>
			evt = process_recheck(mgr);
     87c:	4620      	mov	r0, r4
     87e:	f008 f8fa 	bl	8a76 <process_recheck>
		}

		if (evt == EVT_NOP) {
     882:	b178      	cbz	r0, 8a4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     884:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     886:	8b21      	ldrh	r1, [r4, #24]
     888:	2804      	cmp	r0, #4
     88a:	d811      	bhi.n	8b0 <process_event+0x4c>
     88c:	e8df f000 	tbb	[pc, r0]
     890:	856d10c3 	.word	0x856d10c3
     894:	95          	.byte	0x95
     895:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     896:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     898:	bf0c      	ite	eq
     89a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     89e:	f045 0520 	orrne.w	r5, r5, #32
     8a2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     8a4:	f388 8811 	msr	BASEPRI, r8
     8a8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     8b0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     8b4:	45aa      	cmp	sl, r5
     8b6:	f000 80a6 	beq.w	a06 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     8ba:	2700      	movs	r7, #0
     8bc:	46b9      	mov	r9, r7
     8be:	463e      	mov	r6, r7
     8c0:	68a3      	ldr	r3, [r4, #8]
     8c2:	2b00      	cmp	r3, #0
     8c4:	f000 80bd 	beq.w	a42 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     8c8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     8cc:	8321      	strh	r1, [r4, #24]
     8ce:	f388 8811 	msr	BASEPRI, r8
     8d2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     8d6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8d8:	2900      	cmp	r1, #0
     8da:	f000 80bb 	beq.w	a54 <process_event+0x1f0>
	return node->next;
     8de:	680d      	ldr	r5, [r1, #0]
     8e0:	2900      	cmp	r1, #0
     8e2:	f000 80b7 	beq.w	a54 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     8e6:	f8d1 8004 	ldr.w	r8, [r1, #4]
     8ea:	4633      	mov	r3, r6
     8ec:	4652      	mov	r2, sl
     8ee:	4620      	mov	r0, r4
     8f0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8f2:	2d00      	cmp	r5, #0
     8f4:	d076      	beq.n	9e4 <process_event+0x180>
     8f6:	682b      	ldr	r3, [r5, #0]
     8f8:	4629      	mov	r1, r5
     8fa:	461d      	mov	r5, r3
     8fc:	e7f0      	b.n	8e0 <process_event+0x7c>
     8fe:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     902:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     904:	2a01      	cmp	r2, #1
     906:	d81b      	bhi.n	940 <process_event+0xdc>
	list->head = NULL;
     908:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     90a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     90e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     910:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     912:	b289      	uxth	r1, r1
	list->tail = NULL;
     914:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     918:	d109      	bne.n	92e <process_event+0xca>
     91a:	463b      	mov	r3, r7
     91c:	e003      	b.n	926 <process_event+0xc2>
				mgr->refs += 1U;
     91e:	8b62      	ldrh	r2, [r4, #26]
     920:	3201      	adds	r2, #1
     922:	8362      	strh	r2, [r4, #26]
	return node->next;
     924:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     926:	2b00      	cmp	r3, #0
     928:	d1f9      	bne.n	91e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     92a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     92e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     930:	4620      	mov	r0, r4
     932:	f008 f8a0 	bl	8a76 <process_recheck>
     936:	2800      	cmp	r0, #0
     938:	d07b      	beq.n	a32 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     93a:	f041 0120 	orr.w	r1, r1, #32
     93e:	e077      	b.n	a30 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     940:	2b04      	cmp	r3, #4
     942:	d10a      	bne.n	95a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     944:	f021 0107 	bic.w	r1, r1, #7
     948:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     94a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     94c:	4620      	mov	r0, r4
     94e:	f008 f892 	bl	8a76 <process_recheck>
     952:	b110      	cbz	r0, 95a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     954:	f041 0120 	orr.w	r1, r1, #32
     958:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     95a:	8b21      	ldrh	r1, [r4, #24]
     95c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     960:	45aa      	cmp	sl, r5
     962:	d050      	beq.n	a06 <process_event+0x1a2>
     964:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     966:	46b9      	mov	r9, r7
     968:	e7aa      	b.n	8c0 <process_event+0x5c>
			transit = mgr->transitions->start;
     96a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     96c:	f021 0107 	bic.w	r1, r1, #7
     970:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     974:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     976:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     97a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     97c:	d12d      	bne.n	9da <process_event+0x176>
		    || (transit != NULL)) {
     97e:	f1b9 0f00 	cmp.w	r9, #0
     982:	d040      	beq.n	a06 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     984:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     988:	8321      	strh	r1, [r4, #24]
     98a:	f388 8811 	msr	BASEPRI, r8
     98e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     992:	493a      	ldr	r1, [pc, #232]	; (a7c <process_event+0x218>)
     994:	4620      	mov	r0, r4
     996:	47c8      	blx	r9
     998:	e029      	b.n	9ee <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     99a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     99e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9a0:	f041 0104 	orr.w	r1, r1, #4
     9a4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     9a6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     9a8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     9ac:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     9ae:	d0e6      	beq.n	97e <process_event+0x11a>
     9b0:	2700      	movs	r7, #0
		res = 0;
     9b2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9b4:	f04f 0a04 	mov.w	sl, #4
     9b8:	e782      	b.n	8c0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ba:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     9be:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9c0:	f041 0105 	orr.w	r1, r1, #5
     9c4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     9c6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     9c8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     9cc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     9ce:	d0d6      	beq.n	97e <process_event+0x11a>
     9d0:	2700      	movs	r7, #0
		res = 0;
     9d2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9d4:	f04f 0a05 	mov.w	sl, #5
     9d8:	e772      	b.n	8c0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     9da:	2700      	movs	r7, #0
		res = 0;
     9dc:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9de:	f04f 0a06 	mov.w	sl, #6
     9e2:	e76d      	b.n	8c0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     9e4:	462b      	mov	r3, r5
     9e6:	e787      	b.n	8f8 <process_event+0x94>
			if (transit != NULL) {
     9e8:	f1b9 0f00 	cmp.w	r9, #0
     9ec:	d1d1      	bne.n	992 <process_event+0x12e>
	__asm__ volatile(
     9ee:	f04f 0320 	mov.w	r3, #32
     9f2:	f3ef 8811 	mrs	r8, BASEPRI
     9f6:	f383 8812 	msr	BASEPRI_MAX, r3
     9fa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     9fe:	8b23      	ldrh	r3, [r4, #24]
     a00:	f023 0308 	bic.w	r3, r3, #8
     a04:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a06:	8b25      	ldrh	r5, [r4, #24]
     a08:	06ea      	lsls	r2, r5, #27
     a0a:	d52e      	bpl.n	a6a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a0c:	f025 0310 	bic.w	r3, r5, #16
     a10:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     a12:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     a16:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a18:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     a1a:	2e00      	cmp	r6, #0
     a1c:	f6bf af6f 	bge.w	8fe <process_event+0x9a>
	list->head = NULL;
     a20:	2300      	movs	r3, #0
		*clients = mgr->clients;
     a22:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     a24:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a28:	f021 0107 	bic.w	r1, r1, #7
     a2c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a30:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     a32:	8b21      	ldrh	r1, [r4, #24]
     a34:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     a38:	45aa      	cmp	sl, r5
     a3a:	f04f 0900 	mov.w	r9, #0
     a3e:	f47f af3f 	bne.w	8c0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     a42:	2f00      	cmp	r7, #0
     a44:	d09b      	beq.n	97e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     a46:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     a4a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     a4c:	f388 8811 	msr	BASEPRI, r8
     a50:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     a54:	2f00      	cmp	r7, #0
     a56:	d0c7      	beq.n	9e8 <process_event+0x184>
	return node->next;
     a58:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     a5a:	4639      	mov	r1, r7
     a5c:	4633      	mov	r3, r6
     a5e:	4652      	mov	r2, sl
     a60:	4620      	mov	r0, r4
     a62:	f008 f834 	bl	8ace <notify_one>
	list->head = node;
     a66:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     a68:	e7f4      	b.n	a54 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a6a:	06ab      	lsls	r3, r5, #26
     a6c:	f57f af1a 	bpl.w	8a4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a70:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a74:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     a76:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     a7a:	e6ff      	b.n	87c <process_event+0x18>
     a7c:	00008afb 	.word	0x00008afb

00000a80 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
     a80:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
     a82:	4e09      	ldr	r6, [pc, #36]	; (aa8 <extract_decimal+0x28>)
     a84:	6801      	ldr	r1, [r0, #0]
{
     a86:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
     a88:	270a      	movs	r7, #10
	size_t val = 0;
     a8a:	2000      	movs	r0, #0
     a8c:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
     a8e:	3101      	adds	r1, #1
     a90:	781c      	ldrb	r4, [r3, #0]
     a92:	5d35      	ldrb	r5, [r6, r4]
     a94:	076d      	lsls	r5, r5, #29
     a96:	d401      	bmi.n	a9c <extract_decimal+0x1c>
	}
	*str = sp;
     a98:	6013      	str	r3, [r2, #0]
	return val;
}
     a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
     a9c:	fb07 4300 	mla	r3, r7, r0, r4
     aa0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
     aa4:	e7f2      	b.n	a8c <extract_decimal+0xc>
     aa6:	bf00      	nop
     aa8:	0000d4bf 	.word	0x0000d4bf

00000aac <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
     aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ab0:	4615      	mov	r5, r2
     ab2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
     ab4:	78d3      	ldrb	r3, [r2, #3]
     ab6:	4a22      	ldr	r2, [pc, #136]	; (b40 <encode_uint+0x94>)
     ab8:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
     abc:	2b6f      	cmp	r3, #111	; 0x6f
{
     abe:	4680      	mov	r8, r0
     ac0:	460f      	mov	r7, r1
     ac2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
     ac6:	d029      	beq.n	b1c <encode_uint+0x70>
     ac8:	d824      	bhi.n	b14 <encode_uint+0x68>
		return 10;
     aca:	2b58      	cmp	r3, #88	; 0x58
     acc:	bf0c      	ite	eq
     ace:	2610      	moveq	r6, #16
     ad0:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
     ad2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
     ad6:	4632      	mov	r2, r6
     ad8:	2300      	movs	r3, #0
     ada:	4640      	mov	r0, r8
     adc:	4639      	mov	r1, r7
     ade:	f7ff fb6b 	bl	1b8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
     ae2:	2a09      	cmp	r2, #9
     ae4:	b2d4      	uxtb	r4, r2
     ae6:	d81e      	bhi.n	b26 <encode_uint+0x7a>
     ae8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
     aea:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
     aec:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
     aee:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
     af2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
     af6:	d301      	bcc.n	afc <encode_uint+0x50>
     af8:	45d1      	cmp	r9, sl
     afa:	d811      	bhi.n	b20 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
     afc:	782b      	ldrb	r3, [r5, #0]
     afe:	069b      	lsls	r3, r3, #26
     b00:	d505      	bpl.n	b0e <encode_uint+0x62>
		if (radix == 8) {
     b02:	2e08      	cmp	r6, #8
     b04:	d115      	bne.n	b32 <encode_uint+0x86>
			conv->altform_0 = true;
     b06:	78ab      	ldrb	r3, [r5, #2]
     b08:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
     b0c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
     b0e:	4648      	mov	r0, r9
     b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
     b14:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
     b18:	2b70      	cmp	r3, #112	; 0x70
     b1a:	e7d7      	b.n	acc <encode_uint+0x20>
	switch (specifier) {
     b1c:	2608      	movs	r6, #8
     b1e:	e7d8      	b.n	ad2 <encode_uint+0x26>
		value /= radix;
     b20:	4680      	mov	r8, r0
     b22:	460f      	mov	r7, r1
     b24:	e7d7      	b.n	ad6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
     b26:	f1bb 0f01 	cmp.w	fp, #1
     b2a:	bf0c      	ite	eq
     b2c:	3437      	addeq	r4, #55	; 0x37
     b2e:	3457      	addne	r4, #87	; 0x57
     b30:	e7db      	b.n	aea <encode_uint+0x3e>
		} else if (radix == 16) {
     b32:	2e10      	cmp	r6, #16
     b34:	d1eb      	bne.n	b0e <encode_uint+0x62>
			conv->altform_0c = true;
     b36:	78ab      	ldrb	r3, [r5, #2]
     b38:	f043 0310 	orr.w	r3, r3, #16
     b3c:	e7e6      	b.n	b0c <encode_uint+0x60>
     b3e:	bf00      	nop
     b40:	0000d4bf 	.word	0x0000d4bf

00000b44 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b48:	b097      	sub	sp, #92	; 0x5c
     b4a:	4682      	mov	sl, r0
     b4c:	9103      	str	r1, [sp, #12]
     b4e:	4617      	mov	r7, r2
     b50:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     b52:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     b54:	7838      	ldrb	r0, [r7, #0]
     b56:	b908      	cbnz	r0, b5c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     b58:	4628      	mov	r0, r5
     b5a:	e34a      	b.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
			OUTC(*fp++);
     b5c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     b5e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     b60:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
     b62:	d006      	beq.n	b72 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     b64:	9903      	ldr	r1, [sp, #12]
     b66:	47d0      	blx	sl
     b68:	2800      	cmp	r0, #0
     b6a:	f2c0 8342 	blt.w	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
     b6e:	3501      	adds	r5, #1
		if (bps == NULL) {
     b70:	e1f0      	b.n	f54 <z_cbvprintf_impl+0x410>
		} state = {
     b72:	2218      	movs	r2, #24
     b74:	2100      	movs	r1, #0
     b76:	a810      	add	r0, sp, #64	; 0x40
     b78:	f009 ffe8 	bl	ab4c <memset>
	if (*sp == '%') {
     b7c:	787b      	ldrb	r3, [r7, #1]
     b7e:	2b25      	cmp	r3, #37	; 0x25
     b80:	f000 80a3 	beq.w	cca <z_cbvprintf_impl+0x186>
     b84:	2300      	movs	r3, #0
     b86:	1c79      	adds	r1, r7, #1
     b88:	4698      	mov	r8, r3
     b8a:	469e      	mov	lr, r3
     b8c:	469c      	mov	ip, r3
     b8e:	4618      	mov	r0, r3
     b90:	460e      	mov	r6, r1
		switch (*sp) {
     b92:	f811 2b01 	ldrb.w	r2, [r1], #1
     b96:	2a2b      	cmp	r2, #43	; 0x2b
     b98:	f000 80c6 	beq.w	d28 <z_cbvprintf_impl+0x1e4>
     b9c:	f200 80bd 	bhi.w	d1a <z_cbvprintf_impl+0x1d6>
     ba0:	2a20      	cmp	r2, #32
     ba2:	f000 80c4 	beq.w	d2e <z_cbvprintf_impl+0x1ea>
     ba6:	2a23      	cmp	r2, #35	; 0x23
     ba8:	f000 80c4 	beq.w	d34 <z_cbvprintf_impl+0x1f0>
     bac:	b12b      	cbz	r3, bba <z_cbvprintf_impl+0x76>
     bae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     bb6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     bba:	f1b8 0f00 	cmp.w	r8, #0
     bbe:	d005      	beq.n	bcc <z_cbvprintf_impl+0x88>
     bc0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     bc4:	f043 0320 	orr.w	r3, r3, #32
     bc8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     bcc:	f1be 0f00 	cmp.w	lr, #0
     bd0:	d005      	beq.n	bde <z_cbvprintf_impl+0x9a>
     bd2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     bd6:	f043 0310 	orr.w	r3, r3, #16
     bda:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     bde:	f1bc 0f00 	cmp.w	ip, #0
     be2:	d005      	beq.n	bf0 <z_cbvprintf_impl+0xac>
     be4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     be8:	f043 0308 	orr.w	r3, r3, #8
     bec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     bf0:	b128      	cbz	r0, bfe <z_cbvprintf_impl+0xba>
     bf2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     bf6:	f043 0304 	orr.w	r3, r3, #4
     bfa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     bfe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     c02:	f003 0144 	and.w	r1, r3, #68	; 0x44
     c06:	2944      	cmp	r1, #68	; 0x44
     c08:	d103      	bne.n	c12 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
     c0a:	f36f 1386 	bfc	r3, #6, #1
     c0e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     c12:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     c16:	9609      	str	r6, [sp, #36]	; 0x24
     c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
     c1c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     c1e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     c22:	f040 808c 	bne.w	d3e <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
     c26:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     c2a:	f043 0301 	orr.w	r3, r3, #1
     c2e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
     c32:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
     c34:	781a      	ldrb	r2, [r3, #0]
     c36:	2a2e      	cmp	r2, #46	; 0x2e
     c38:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c3c:	bf0c      	ite	eq
     c3e:	2101      	moveq	r1, #1
     c40:	2100      	movne	r1, #0
     c42:	f361 0241 	bfi	r2, r1, #1, #1
     c46:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     c4a:	d10c      	bne.n	c66 <z_cbvprintf_impl+0x122>
	++sp;
     c4c:	1c5a      	adds	r2, r3, #1
     c4e:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
     c50:	785a      	ldrb	r2, [r3, #1]
     c52:	2a2a      	cmp	r2, #42	; 0x2a
     c54:	f040 8083 	bne.w	d5e <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
     c58:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c5c:	f042 0204 	orr.w	r2, r2, #4
     c60:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     c64:	3302      	adds	r3, #2
	switch (*sp) {
     c66:	781a      	ldrb	r2, [r3, #0]
     c68:	2a6c      	cmp	r2, #108	; 0x6c
     c6a:	f000 80a4 	beq.w	db6 <z_cbvprintf_impl+0x272>
     c6e:	f200 8086 	bhi.w	d7e <z_cbvprintf_impl+0x23a>
     c72:	2a68      	cmp	r2, #104	; 0x68
     c74:	f000 808c 	beq.w	d90 <z_cbvprintf_impl+0x24c>
     c78:	2a6a      	cmp	r2, #106	; 0x6a
     c7a:	f000 80a5 	beq.w	dc8 <z_cbvprintf_impl+0x284>
     c7e:	2a4c      	cmp	r2, #76	; 0x4c
     c80:	f000 80aa 	beq.w	dd8 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
     c84:	461a      	mov	r2, r3
     c86:	f812 3b01 	ldrb.w	r3, [r2], #1
     c8a:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
     c8c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     c8e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
     c92:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
     c96:	f200 8117 	bhi.w	ec8 <z_cbvprintf_impl+0x384>
     c9a:	2b6d      	cmp	r3, #109	; 0x6d
     c9c:	f200 80a9 	bhi.w	df2 <z_cbvprintf_impl+0x2ae>
     ca0:	2b69      	cmp	r3, #105	; 0x69
     ca2:	f200 8111 	bhi.w	ec8 <z_cbvprintf_impl+0x384>
     ca6:	2b57      	cmp	r3, #87	; 0x57
     ca8:	f200 80be 	bhi.w	e28 <z_cbvprintf_impl+0x2e4>
     cac:	2b41      	cmp	r3, #65	; 0x41
     cae:	d003      	beq.n	cb8 <z_cbvprintf_impl+0x174>
     cb0:	3b45      	subs	r3, #69	; 0x45
     cb2:	2b02      	cmp	r3, #2
     cb4:	f200 8108 	bhi.w	ec8 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
     cb8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     cbc:	2204      	movs	r2, #4
     cbe:	f362 0302 	bfi	r3, r2, #0, #3
     cc2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
     cc6:	2301      	movs	r3, #1
			break;
     cc8:	e0ca      	b.n	e60 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
     cca:	1cba      	adds	r2, r7, #2
     ccc:	9204      	str	r2, [sp, #16]
     cce:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     cd2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     cd6:	07da      	lsls	r2, r3, #31
     cd8:	f140 80fd 	bpl.w	ed6 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
     cdc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     ce0:	f1b9 0f00 	cmp.w	r9, #0
     ce4:	da07      	bge.n	cf6 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
     ce6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     cea:	f042 0204 	orr.w	r2, r2, #4
     cee:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
     cf2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     cf6:	075e      	lsls	r6, r3, #29
     cf8:	f140 80f6 	bpl.w	ee8 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
     cfc:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
     d00:	f1bb 0f00 	cmp.w	fp, #0
     d04:	f280 80f5 	bge.w	ef2 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
     d08:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     d0c:	f36f 0341 	bfc	r3, #1, #1
     d10:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     d14:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     d18:	e0eb      	b.n	ef2 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
     d1a:	2a2d      	cmp	r2, #45	; 0x2d
     d1c:	d00d      	beq.n	d3a <z_cbvprintf_impl+0x1f6>
     d1e:	2a30      	cmp	r2, #48	; 0x30
     d20:	f47f af44 	bne.w	bac <z_cbvprintf_impl+0x68>
     d24:	2301      	movs	r3, #1
	} while (loop);
     d26:	e733      	b.n	b90 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
     d28:	f04f 0c01 	mov.w	ip, #1
     d2c:	e730      	b.n	b90 <z_cbvprintf_impl+0x4c>
     d2e:	f04f 0e01 	mov.w	lr, #1
     d32:	e72d      	b.n	b90 <z_cbvprintf_impl+0x4c>
     d34:	f04f 0801 	mov.w	r8, #1
     d38:	e72a      	b.n	b90 <z_cbvprintf_impl+0x4c>
     d3a:	2001      	movs	r0, #1
     d3c:	e728      	b.n	b90 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
     d3e:	a809      	add	r0, sp, #36	; 0x24
     d40:	f7ff fe9e 	bl	a80 <extract_decimal>
	if (sp != wp) {
     d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d46:	42b3      	cmp	r3, r6
     d48:	f43f af74 	beq.w	c34 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
     d4c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
     d50:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     d52:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
     d54:	f360 0241 	bfi	r2, r0, #1, #1
     d58:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
     d5c:	e76a      	b.n	c34 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
     d5e:	a809      	add	r0, sp, #36	; 0x24
     d60:	f7ff fe8e 	bl	a80 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
     d64:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
     d68:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     d6a:	f3c3 0240 	ubfx	r2, r3, #1, #1
     d6e:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
     d72:	f362 0341 	bfi	r3, r2, #1, #1
     d76:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
     d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d7c:	e773      	b.n	c66 <z_cbvprintf_impl+0x122>
	switch (*sp) {
     d7e:	2a74      	cmp	r2, #116	; 0x74
     d80:	d026      	beq.n	dd0 <z_cbvprintf_impl+0x28c>
     d82:	2a7a      	cmp	r2, #122	; 0x7a
     d84:	f47f af7e 	bne.w	c84 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
     d88:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     d8c:	2106      	movs	r1, #6
     d8e:	e00c      	b.n	daa <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
     d90:	785a      	ldrb	r2, [r3, #1]
     d92:	2a68      	cmp	r2, #104	; 0x68
     d94:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     d98:	d106      	bne.n	da8 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
     d9a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d9c:	f361 02c6 	bfi	r2, r1, #3, #4
     da0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     da4:	3302      	adds	r3, #2
     da6:	e76d      	b.n	c84 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
     da8:	2102      	movs	r1, #2
     daa:	f361 02c6 	bfi	r2, r1, #3, #4
     dae:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     db2:	3301      	adds	r3, #1
     db4:	e766      	b.n	c84 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
     db6:	785a      	ldrb	r2, [r3, #1]
     db8:	2a6c      	cmp	r2, #108	; 0x6c
     dba:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     dbe:	d101      	bne.n	dc4 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
     dc0:	2104      	movs	r1, #4
     dc2:	e7eb      	b.n	d9c <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
     dc4:	2103      	movs	r1, #3
     dc6:	e7f0      	b.n	daa <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
     dc8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     dcc:	2105      	movs	r1, #5
     dce:	e7ec      	b.n	daa <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
     dd0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     dd4:	2107      	movs	r1, #7
     dd6:	e7e8      	b.n	daa <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
     dd8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     ddc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     de0:	f022 0202 	bic.w	r2, r2, #2
     de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     de8:	f042 0202 	orr.w	r2, r2, #2
     dec:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     df0:	e7df      	b.n	db2 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
     df2:	3b6e      	subs	r3, #110	; 0x6e
     df4:	b2d9      	uxtb	r1, r3
     df6:	2301      	movs	r3, #1
     df8:	408b      	lsls	r3, r1
     dfa:	f240 4182 	movw	r1, #1154	; 0x482
     dfe:	420b      	tst	r3, r1
     e00:	d138      	bne.n	e74 <z_cbvprintf_impl+0x330>
     e02:	f013 0f24 	tst.w	r3, #36	; 0x24
     e06:	d152      	bne.n	eae <z_cbvprintf_impl+0x36a>
     e08:	07d8      	lsls	r0, r3, #31
     e0a:	d55d      	bpl.n	ec8 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
     e0c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     e10:	2103      	movs	r1, #3
     e12:	f361 0302 	bfi	r3, r1, #0, #3
     e16:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     e1a:	f002 0378 	and.w	r3, r2, #120	; 0x78
     e1e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     e22:	424b      	negs	r3, r1
     e24:	414b      	adcs	r3, r1
     e26:	e01b      	b.n	e60 <z_cbvprintf_impl+0x31c>
	switch (conv->specifier) {
     e28:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     e2c:	b2c9      	uxtb	r1, r1
     e2e:	2001      	movs	r0, #1
     e30:	fa00 f101 	lsl.w	r1, r0, r1
     e34:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     e38:	f47f af3e 	bne.w	cb8 <z_cbvprintf_impl+0x174>
     e3c:	f640 0601 	movw	r6, #2049	; 0x801
     e40:	4231      	tst	r1, r6
     e42:	d11d      	bne.n	e80 <z_cbvprintf_impl+0x33c>
     e44:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     e48:	d03e      	beq.n	ec8 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
     e4a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     e4e:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e52:	f002 0278 	and.w	r2, r2, #120	; 0x78
     e56:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     e58:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     e5c:	d034      	beq.n	ec8 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
     e5e:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     e60:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     e64:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e68:	430b      	orrs	r3, r1
     e6a:	f363 0241 	bfi	r2, r3, #1, #1
     e6e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     e72:	e72e      	b.n	cd2 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
     e74:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     e78:	2102      	movs	r1, #2
     e7a:	f361 0302 	bfi	r3, r1, #0, #3
     e7e:	e7e8      	b.n	e52 <z_cbvprintf_impl+0x30e>
     e80:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     e84:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     e86:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     e8a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e8e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e90:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     e94:	bf02      	ittt	eq
     e96:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     e9a:	f041 0101 	orreq.w	r1, r1, #1
     e9e:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     ea2:	2b63      	cmp	r3, #99	; 0x63
     ea4:	d1db      	bne.n	e5e <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ea6:	1e13      	subs	r3, r2, #0
     ea8:	bf18      	it	ne
     eaa:	2301      	movne	r3, #1
     eac:	e7d8      	b.n	e60 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
     eae:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     eb2:	2103      	movs	r1, #3
     eb4:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     eb8:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     ebc:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     ec0:	bf14      	ite	ne
     ec2:	2301      	movne	r3, #1
     ec4:	2300      	moveq	r3, #0
     ec6:	e7cb      	b.n	e60 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
     ec8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     ecc:	f043 0301 	orr.w	r3, r3, #1
     ed0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     ed4:	e7c3      	b.n	e5e <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
     ed6:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     eda:	2a00      	cmp	r2, #0
			width = conv->width_value;
     edc:	bfb4      	ite	lt
     ede:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
     ee2:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     ee6:	e706      	b.n	cf6 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
     ee8:	0798      	lsls	r0, r3, #30
     eea:	f57f af13 	bpl.w	d14 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
     eee:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
     ef2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
     ef6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ef8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
     efc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
     f00:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     f04:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     f06:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     f0a:	d133      	bne.n	f74 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
     f0c:	1ecb      	subs	r3, r1, #3
     f0e:	2b04      	cmp	r3, #4
     f10:	d804      	bhi.n	f1c <z_cbvprintf_impl+0x3d8>
     f12:	e8df f003 	tbb	[pc, r3]
     f16:	4621      	.short	0x4621
     f18:	2146      	.short	0x2146
     f1a:	21          	.byte	0x21
     f1b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     f1c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     f1e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     f20:	ea4f 72e3 	mov.w	r2, r3, asr #31
     f24:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     f28:	d11c      	bne.n	f64 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
     f2a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
     f2e:	17da      	asrs	r2, r3, #31
     f30:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
     f34:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     f36:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     f3a:	f013 0603 	ands.w	r6, r3, #3
     f3e:	d050      	beq.n	fe2 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
     f40:	9b04      	ldr	r3, [sp, #16]
     f42:	9903      	ldr	r1, [sp, #12]
     f44:	463a      	mov	r2, r7
     f46:	4650      	mov	r0, sl
     f48:	f007 fe7d 	bl	8c46 <outs>
     f4c:	2800      	cmp	r0, #0
     f4e:	f2c0 8150 	blt.w	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
     f52:	4405      	add	r5, r0
			continue;
     f54:	9f04      	ldr	r7, [sp, #16]
     f56:	e5fd      	b.n	b54 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f58:	f854 3b04 	ldr.w	r3, [r4], #4
     f5c:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     f5e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
     f62:	e7e8      	b.n	f36 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
     f64:	2902      	cmp	r1, #2
     f66:	d1e5      	bne.n	f34 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
     f68:	b21a      	sxth	r2, r3
     f6a:	f343 33c0 	sbfx	r3, r3, #15, #1
     f6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     f72:	e7df      	b.n	f34 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f74:	2b02      	cmp	r3, #2
     f76:	d124      	bne.n	fc2 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
     f78:	1ecb      	subs	r3, r1, #3
     f7a:	2b04      	cmp	r3, #4
     f7c:	d804      	bhi.n	f88 <z_cbvprintf_impl+0x444>
     f7e:	e8df f003 	tbb	[pc, r3]
     f82:	1018      	.short	0x1018
     f84:	1810      	.short	0x1810
     f86:	18          	.byte	0x18
     f87:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     f88:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     f8a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f8e:	f04f 0200 	mov.w	r2, #0
     f92:	d014      	beq.n	fbe <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
     f94:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     f96:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     f9a:	d1cc      	bne.n	f36 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
     f9c:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     f9e:	9310      	str	r3, [sp, #64]	; 0x40
     fa0:	e7c9      	b.n	f36 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
     fa2:	3407      	adds	r4, #7
     fa4:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     fa8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     fac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     fb0:	e7c1      	b.n	f36 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
     fb2:	f854 3b04 	ldr.w	r3, [r4], #4
     fb6:	9310      	str	r3, [sp, #64]	; 0x40
     fb8:	2300      	movs	r3, #0
     fba:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     fbc:	e7bb      	b.n	f36 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
     fbe:	b2db      	uxtb	r3, r3
     fc0:	e7cd      	b.n	f5e <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
     fc2:	2b04      	cmp	r3, #4
     fc4:	d108      	bne.n	fd8 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
     fc6:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     fc8:	f024 0407 	bic.w	r4, r4, #7
     fcc:	e9d4 2300 	ldrd	r2, r3, [r4]
     fd0:	3408      	adds	r4, #8
     fd2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     fd6:	e7ae      	b.n	f36 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
     fd8:	2b03      	cmp	r3, #3
     fda:	d1ac      	bne.n	f36 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
     fdc:	f854 3b04 	ldr.w	r3, [r4], #4
     fe0:	e7dd      	b.n	f9e <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
     fe2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
     fe6:	2878      	cmp	r0, #120	; 0x78
     fe8:	d8b4      	bhi.n	f54 <z_cbvprintf_impl+0x410>
     fea:	2862      	cmp	r0, #98	; 0x62
     fec:	d81c      	bhi.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fee:	2825      	cmp	r0, #37	; 0x25
     ff0:	f43f adb8 	beq.w	b64 <z_cbvprintf_impl+0x20>
     ff4:	2858      	cmp	r0, #88	; 0x58
     ff6:	d1ad      	bne.n	f54 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
     ff8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1002:	ab0a      	add	r3, sp, #40	; 0x28
    1004:	aa12      	add	r2, sp, #72	; 0x48
    1006:	f7ff fd51 	bl	aac <encode_uint>
			if (precision >= 0) {
    100a:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    100e:	4607      	mov	r7, r0
			if (precision >= 0) {
    1010:	f280 8098 	bge.w	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
		if (bps == NULL) {
    1014:	2f00      	cmp	r7, #0
    1016:	d09d      	beq.n	f54 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    1018:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    101c:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    1020:	2e00      	cmp	r6, #0
    1022:	d04e      	beq.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
			nj_len += 1U;
    1024:	3001      	adds	r0, #1
    1026:	e04c      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
		switch (conv->specifier) {
    1028:	3863      	subs	r0, #99	; 0x63
    102a:	2815      	cmp	r0, #21
    102c:	d892      	bhi.n	f54 <z_cbvprintf_impl+0x410>
    102e:	a201      	add	r2, pc, #4	; (adr r2, 1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    1030:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1034:	000010b3 	.word	0x000010b3
    1038:	00001119 	.word	0x00001119
    103c:	00000f55 	.word	0x00000f55
    1040:	00000f55 	.word	0x00000f55
    1044:	00000f55 	.word	0x00000f55
    1048:	00000f55 	.word	0x00000f55
    104c:	00001119 	.word	0x00001119
    1050:	00000f55 	.word	0x00000f55
    1054:	00000f55 	.word	0x00000f55
    1058:	00000f55 	.word	0x00000f55
    105c:	00000f55 	.word	0x00000f55
    1060:	000011a3 	.word	0x000011a3
    1064:	0000113f 	.word	0x0000113f
    1068:	00001165 	.word	0x00001165
    106c:	00000f55 	.word	0x00000f55
    1070:	00000f55 	.word	0x00000f55
    1074:	0000108d 	.word	0x0000108d
    1078:	00000f55 	.word	0x00000f55
    107c:	0000113f 	.word	0x0000113f
    1080:	00000f55 	.word	0x00000f55
    1084:	00000f55 	.word	0x00000f55
    1088:	0000113f 	.word	0x0000113f
			if (precision >= 0) {
    108c:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    1090:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    1092:	db0a      	blt.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
				len = strnlen(bps, precision);
    1094:	4659      	mov	r1, fp
    1096:	4638      	mov	r0, r7
    1098:	f009 fda3 	bl	abe2 <strnlen>
			bpe = bps + len;
    109c:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    10a0:	2f00      	cmp	r7, #0
    10a2:	f43f af57 	beq.w	f54 <z_cbvprintf_impl+0x410>
		char sign = 0;
    10a6:	2600      	movs	r6, #0
    10a8:	e00b      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
				len = strlen(bps);
    10aa:	4638      	mov	r0, r7
    10ac:	f7ff f9f8 	bl	4a0 <strlen>
    10b0:	e7f4      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    10b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    10b8:	2600      	movs	r6, #0
			bpe = buf + 1;
    10ba:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
    10be:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    10c0:	2001      	movs	r0, #1
		if (conv->altform_0c) {
    10c2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    10c6:	f013 0210 	ands.w	r2, r3, #16
    10ca:	9205      	str	r2, [sp, #20]
    10cc:	f000 8084 	beq.w	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
			nj_len += 2U;
    10d0:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    10d2:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    10d4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    10d8:	bf48      	it	mi
    10da:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    10dc:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    10de:	bf48      	it	mi
    10e0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    10e2:	f1b9 0f00 	cmp.w	r9, #0
    10e6:	f340 8091 	ble.w	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
			if (!conv->flag_dash) {
    10ea:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    10ee:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    10f2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    10f6:	0750      	lsls	r0, r2, #29
    10f8:	9306      	str	r3, [sp, #24]
    10fa:	f100 8087 	bmi.w	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
				if (conv->flag_zero) {
    10fe:	0651      	lsls	r1, r2, #25
    1100:	d57a      	bpl.n	11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
					if (sign != 0) {
    1102:	b13e      	cbz	r6, 1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
						OUTC(sign);
    1104:	9903      	ldr	r1, [sp, #12]
    1106:	4630      	mov	r0, r6
    1108:	47d0      	blx	sl
    110a:	2800      	cmp	r0, #0
    110c:	db71      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    110e:	9b06      	ldr	r3, [sp, #24]
    1110:	3501      	adds	r5, #1
    1112:	461e      	mov	r6, r3
					pad = '0';
    1114:	2230      	movs	r2, #48	; 0x30
    1116:	e070      	b.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
			if (conv->flag_plus) {
    1118:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    111a:	bf5c      	itt	pl
    111c:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1120:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    1126:	bf48      	it	mi
    1128:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    112a:	2b00      	cmp	r3, #0
    112c:	f6bf af64 	bge.w	ff8 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    1130:	4252      	negs	r2, r2
    1132:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1136:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    113a:	262d      	movs	r6, #45	; 0x2d
    113c:	e75c      	b.n	ff8 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    113e:	2600      	movs	r6, #0
    1140:	e75a      	b.n	ff8 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    1142:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1144:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    1148:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    114c:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    114e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1152:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    1154:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    1158:	f67f af5c 	bls.w	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
					conv->pad0_value = precision - (int)len;
    115c:	ebab 0303 	sub.w	r3, fp, r3
    1160:	9313      	str	r3, [sp, #76]	; 0x4c
    1162:	e757      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
			if (value->ptr != NULL) {
    1164:	9810      	ldr	r0, [sp, #64]	; 0x40
    1166:	b380      	cbz	r0, 11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1168:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    116c:	ab0a      	add	r3, sp, #40	; 0x28
    116e:	f8cd 8000 	str.w	r8, [sp]
    1172:	aa12      	add	r2, sp, #72	; 0x48
    1174:	2100      	movs	r1, #0
    1176:	f7ff fc99 	bl	aac <encode_uint>
				conv->altform_0c = true;
    117a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    117e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1182:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1186:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    118a:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    118e:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1190:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    1194:	dad5      	bge.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
		if (bps == NULL) {
    1196:	2800      	cmp	r0, #0
    1198:	f43f aedc 	beq.w	f54 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    119c:	eba8 0000 	sub.w	r0, r8, r0
    11a0:	e781      	b.n	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
				store_count(conv, value->ptr, count);
    11a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    11a4:	2907      	cmp	r1, #7
    11a6:	f63f aed5 	bhi.w	f54 <z_cbvprintf_impl+0x410>
    11aa:	e8df f001 	tbb	[pc, r1]
    11ae:	040c      	.short	0x040c
    11b0:	08080c06 	.word	0x08080c06
    11b4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    11b6:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    11b8:	e6cc      	b.n	f54 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    11ba:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    11bc:	e6ca      	b.n	f54 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    11be:	17ea      	asrs	r2, r5, #31
    11c0:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    11c4:	e6c6      	b.n	f54 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11c6:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    11c8:	e6c4      	b.n	f54 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    11ca:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
		char sign = 0;
    11ce:	4606      	mov	r6, r0
    11d0:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    11d4:	2005      	movs	r0, #5
    11d6:	e774      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
		} else if (conv->altform_0) {
    11d8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    11da:	bf48      	it	mi
    11dc:	3001      	addmi	r0, #1
    11de:	e778      	b.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    11e0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    11e2:	4610      	mov	r0, r2
    11e4:	9206      	str	r2, [sp, #24]
    11e6:	9903      	ldr	r1, [sp, #12]
    11e8:	47d0      	blx	sl
    11ea:	2800      	cmp	r0, #0
    11ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    11f0:	da04      	bge.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
#undef OUTS
#undef OUTC
}
    11f2:	b017      	add	sp, #92	; 0x5c
    11f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    11f8:	2220      	movs	r2, #32
					pad = '0';
    11fa:	464b      	mov	r3, r9
				while (width-- > 0) {
    11fc:	4619      	mov	r1, r3
    11fe:	2900      	cmp	r1, #0
    1200:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1204:	dcec      	bgt.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    1206:	444d      	add	r5, r9
    1208:	1a6d      	subs	r5, r5, r1
    120a:	4699      	mov	r9, r3
		if (sign != 0) {
    120c:	b12e      	cbz	r6, 121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
			OUTC(sign);
    120e:	9903      	ldr	r1, [sp, #12]
    1210:	4630      	mov	r0, r6
    1212:	47d0      	blx	sl
    1214:	2800      	cmp	r0, #0
    1216:	dbec      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    1218:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    121a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    121e:	06da      	lsls	r2, r3, #27
    1220:	d401      	bmi.n	1226 <CONFIG_FPROTECT_BLOCK_SIZE+0x226>
    1222:	071b      	lsls	r3, r3, #28
    1224:	d505      	bpl.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
				OUTC('0');
    1226:	9903      	ldr	r1, [sp, #12]
    1228:	2030      	movs	r0, #48	; 0x30
    122a:	47d0      	blx	sl
    122c:	2800      	cmp	r0, #0
    122e:	dbe0      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    1230:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1232:	9b05      	ldr	r3, [sp, #20]
    1234:	b133      	cbz	r3, 1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
				OUTC(conv->specifier);
    1236:	9903      	ldr	r1, [sp, #12]
    1238:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    123c:	47d0      	blx	sl
    123e:	2800      	cmp	r0, #0
    1240:	dbd7      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    1242:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1244:	44ab      	add	fp, r5
    1246:	e005      	b.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
				OUTC('0');
    1248:	9903      	ldr	r1, [sp, #12]
    124a:	2030      	movs	r0, #48	; 0x30
    124c:	47d0      	blx	sl
    124e:	2800      	cmp	r0, #0
    1250:	dbcf      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    1252:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1254:	ebab 0305 	sub.w	r3, fp, r5
    1258:	2b00      	cmp	r3, #0
    125a:	dcf5      	bgt.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
			OUTS(bps, bpe);
    125c:	9903      	ldr	r1, [sp, #12]
    125e:	4643      	mov	r3, r8
    1260:	463a      	mov	r2, r7
    1262:	4650      	mov	r0, sl
    1264:	f007 fcef 	bl	8c46 <outs>
    1268:	2800      	cmp	r0, #0
    126a:	dbc2      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    126c:	4405      	add	r5, r0
		while (width > 0) {
    126e:	44a9      	add	r9, r5
    1270:	eba9 0305 	sub.w	r3, r9, r5
    1274:	2b00      	cmp	r3, #0
    1276:	f77f ae6d 	ble.w	f54 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    127a:	9903      	ldr	r1, [sp, #12]
    127c:	2020      	movs	r0, #32
    127e:	47d0      	blx	sl
    1280:	2800      	cmp	r0, #0
    1282:	dbb6      	blt.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    1284:	3501      	adds	r5, #1
			--width;
    1286:	e7f3      	b.n	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    1288:	0000c3d9 	.word	0x0000c3d9

0000128c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    128c:	b508      	push	{r3, lr}
	__asm__ volatile(
    128e:	f04f 0220 	mov.w	r2, #32
    1292:	f3ef 8311 	mrs	r3, BASEPRI
    1296:	f382 8812 	msr	BASEPRI_MAX, r2
    129a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    129e:	f003 f8a7 	bl	43f0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    12a2:	4803      	ldr	r0, [pc, #12]	; (12b0 <sys_reboot+0x24>)
    12a4:	f007 fb6c 	bl	8980 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    12a8:	f002 fc72 	bl	3b90 <arch_cpu_idle>
    12ac:	e7fc      	b.n	12a8 <sys_reboot+0x1c>
    12ae:	bf00      	nop
    12b0:	0000c3da 	.word	0x0000c3da

000012b4 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    12b4:	070b      	lsls	r3, r1, #28
    12b6:	d506      	bpl.n	12c6 <foldcase+0x12>
    12b8:	4b03      	ldr	r3, [pc, #12]	; (12c8 <foldcase+0x14>)
    12ba:	5c1b      	ldrb	r3, [r3, r0]
    12bc:	f003 0303 	and.w	r3, r3, #3
    12c0:	2b01      	cmp	r3, #1
        return tolower(ch);
    12c2:	bf08      	it	eq
    12c4:	3020      	addeq	r0, #32
    return ch;
}
    12c6:	4770      	bx	lr
    12c8:	0000d4bf 	.word	0x0000d4bf

000012cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    12cc:	f004 b95a 	b.w	5584 <SystemInit>

000012d0 <cmd_kernel_version>:
#define THREAD_MAX_NAM_LEN 10
#endif

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    12d0:	b513      	push	{r0, r1, r4, lr}
    12d2:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    12d4:	f005 f9c0 	bl	6658 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    12d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
    12dc:	9301      	str	r3, [sp, #4]
    12de:	f3c0 4307 	ubfx	r3, r0, #16, #8
    12e2:	9300      	str	r3, [sp, #0]
    12e4:	4a04      	ldr	r2, [pc, #16]	; (12f8 <cmd_kernel_version+0x28>)
    12e6:	0e03      	lsrs	r3, r0, #24
    12e8:	2108      	movs	r1, #8
    12ea:	4620      	mov	r0, r4
    12ec:	f008 f87b 	bl	93e6 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    12f0:	2000      	movs	r0, #0
    12f2:	b002      	add	sp, #8
    12f4:	bd10      	pop	{r4, pc}
    12f6:	bf00      	nop
    12f8:	0000c403 	.word	0x0000c403

000012fc <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    12fc:	b538      	push	{r3, r4, r5, lr}
    12fe:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    1300:	f009 fa5c 	bl	a7bc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1304:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1308:	fba0 2305 	umull	r2, r3, r0, r5
    130c:	fb05 3301 	mla	r3, r5, r1, r3
    1310:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    1312:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    1316:	4620      	mov	r0, r4
    1318:	4a02      	ldr	r2, [pc, #8]	; (1324 <cmd_kernel_uptime+0x28>)
    131a:	2108      	movs	r1, #8
    131c:	f008 f863 	bl	93e6 <shell_fprintf>
	return 0;
}
    1320:	2000      	movs	r0, #0
    1322:	bd38      	pop	{r3, r4, r5, pc}
    1324:	0000c41c 	.word	0x0000c41c

00001328 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    1328:	b510      	push	{r4, lr}
    132a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    132c:	f004 f83c 	bl	53a8 <sys_clock_elapsed>
    1330:	4a08      	ldr	r2, [pc, #32]	; (1354 <cmd_kernel_threads+0x2c>)
    1332:	4603      	mov	r3, r0
    1334:	2108      	movs	r1, #8
    1336:	4620      	mov	r0, r4
    1338:	f008 f855 	bl	93e6 <shell_fprintf>
	shell_print(shell, "Threads:");
    133c:	4a06      	ldr	r2, [pc, #24]	; (1358 <cmd_kernel_threads+0x30>)
    133e:	4620      	mov	r0, r4
    1340:	2108      	movs	r1, #8
    1342:	f008 f850 	bl	93e6 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    1346:	4805      	ldr	r0, [pc, #20]	; (135c <cmd_kernel_threads+0x34>)
    1348:	4621      	mov	r1, r4
    134a:	f005 f801 	bl	6350 <k_thread_foreach>
	return 0;
}
    134e:	2000      	movs	r0, #0
    1350:	bd10      	pop	{r4, pc}
    1352:	bf00      	nop
    1354:	0000c42b 	.word	0x0000c42b
    1358:	0000c44a 	.word	0x0000c44a
    135c:	00001361 	.word	0x00001361

00001360 <shell_tdata_dump>:
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	b08f      	sub	sp, #60	; 0x3c
	size_t size = thread->stack_info.size;
    1364:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    1368:	4604      	mov	r4, r0
    136a:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    136c:	f009 f8d6 	bl	a51c <k_thread_name_get>
    1370:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    1372:	f005 fd79 	bl	6e68 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    1376:	4b24      	ldr	r3, [pc, #144]	; (1408 <shell_tdata_dump+0xa8>)
    1378:	4a24      	ldr	r2, [pc, #144]	; (140c <shell_tdata_dump+0xac>)
    137a:	2e00      	cmp	r6, #0
    137c:	bf08      	it	eq
    137e:	461e      	moveq	r6, r3
    1380:	4b23      	ldr	r3, [pc, #140]	; (1410 <shell_tdata_dump+0xb0>)
    1382:	e9cd 4600 	strd	r4, r6, [sp]
    1386:	4284      	cmp	r4, r0
    1388:	bf18      	it	ne
    138a:	4613      	movne	r3, r2
    138c:	2108      	movs	r1, #8
    138e:	4628      	mov	r0, r5
    1390:	4a20      	ldr	r2, [pc, #128]	; (1414 <shell_tdata_dump+0xb4>)
    1392:	f008 f828 	bl	93e6 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    1396:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    139a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    139e:	f994 300e 	ldrsb.w	r3, [r4, #14]
    13a2:	9300      	str	r3, [sp, #0]
    13a4:	7b23      	ldrb	r3, [r4, #12]
    13a6:	4a1c      	ldr	r2, [pc, #112]	; (1418 <shell_tdata_dump+0xb8>)
    13a8:	4628      	mov	r0, r5
    13aa:	2108      	movs	r1, #8
    13ac:	f008 f81b 	bl	93e6 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p",
    13b0:	a906      	add	r1, sp, #24
    13b2:	2220      	movs	r2, #32
    13b4:	4620      	mov	r0, r4
    13b6:	f005 f813 	bl	63e0 <k_thread_state_str>
    13ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
    13bc:	9200      	str	r2, [sp, #0]
    13be:	4603      	mov	r3, r0
    13c0:	4a16      	ldr	r2, [pc, #88]	; (141c <shell_tdata_dump+0xbc>)
    13c2:	2108      	movs	r1, #8
    13c4:	4628      	mov	r0, r5
    13c6:	f008 f80e 	bl	93e6 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    13ca:	a905      	add	r1, sp, #20
    13cc:	4620      	mov	r0, r4
    13ce:	f009 f8b5 	bl	a53c <z_impl_k_thread_stack_space_get>
	if (ret) {
    13d2:	4603      	mov	r3, r0
    13d4:	b130      	cbz	r0, 13e4 <shell_tdata_dump+0x84>
		shell_print(shell,
    13d6:	4a12      	ldr	r2, [pc, #72]	; (1420 <shell_tdata_dump+0xc0>)
    13d8:	2108      	movs	r1, #8
    13da:	4628      	mov	r0, r5
    13dc:	f008 f803 	bl	93e6 <shell_fprintf>
}
    13e0:	b00f      	add	sp, #60	; 0x3c
    13e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    13e4:	9a05      	ldr	r2, [sp, #20]
    13e6:	2364      	movs	r3, #100	; 0x64
    13e8:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    13ea:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    13ee:	434b      	muls	r3, r1
		shell_print(shell,
    13f0:	4a0c      	ldr	r2, [pc, #48]	; (1424 <shell_tdata_dump+0xc4>)
		pcnt = ((size - unused) * 100U) / size;
    13f2:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    13f6:	2108      	movs	r1, #8
    13f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
    13fc:	4628      	mov	r0, r5
    13fe:	463b      	mov	r3, r7
    1400:	f007 fff1 	bl	93e6 <shell_fprintf>
}
    1404:	e7ec      	b.n	13e0 <shell_tdata_dump+0x80>
    1406:	bf00      	nop
    1408:	0000c456 	.word	0x0000c456
    140c:	0000cd2b 	.word	0x0000cd2b
    1410:	0000c454 	.word	0x0000c454
    1414:	0000c459 	.word	0x0000c459
    1418:	0000c465 	.word	0x0000c465
    141c:	0000c491 	.word	0x0000c491
    1420:	0000c4a8 	.word	0x0000c4a8
    1424:	0000c4d5 	.word	0x0000c4d5

00001428 <cmd_kernel_stacks>:
K_KERNEL_STACK_ARRAY_DECLARE(z_interrupt_stacks, CONFIG_MP_MAX_NUM_CPUS,
			     CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    1428:	b530      	push	{r4, r5, lr}
    142a:	b093      	sub	sp, #76	; 0x4c
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    142c:	2100      	movs	r1, #0
    142e:	221c      	movs	r2, #28
{
    1430:	4604      	mov	r4, r0
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    1432:	a80b      	add	r0, sp, #44	; 0x2c
    1434:	910a      	str	r1, [sp, #40]	; 0x28
    1436:	f009 fb89 	bl	ab4c <memset>

	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    143a:	481b      	ldr	r0, [pc, #108]	; (14a8 <cmd_kernel_stacks+0x80>)
    143c:	f7ff f830 	bl	4a0 <strlen>
    1440:	f1c0 0020 	rsb	r0, r0, #32
    1444:	2801      	cmp	r0, #1
    1446:	d92d      	bls.n	14a4 <cmd_kernel_stacks+0x7c>
    1448:	4817      	ldr	r0, [pc, #92]	; (14a8 <cmd_kernel_stacks+0x80>)
    144a:	f7ff f829 	bl	4a0 <strlen>
    144e:	f1c0 0220 	rsb	r2, r0, #32
    1452:	2320      	movs	r3, #32
    1454:	ad0a      	add	r5, sp, #40	; 0x28
    1456:	4619      	mov	r1, r3
    1458:	4628      	mov	r0, r5
    145a:	f009 fb7f 	bl	ab5c <__memset_chk>

	k_thread_foreach(shell_stack_dump, (void *)shell);
    145e:	4621      	mov	r1, r4
    1460:	4812      	ldr	r0, [pc, #72]	; (14ac <cmd_kernel_stacks+0x84>)
    1462:	f004 ff75 	bl	6350 <k_thread_foreach>

	for (int i = 0; i < num_cpus; i++) {
		size_t unused;
		const uint8_t *buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size_t size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);
		int err = z_stack_space_get(buf, size, &unused);
    1466:	aa09      	add	r2, sp, #36	; 0x24
    1468:	f44f 6100 	mov.w	r1, #2048	; 0x800
    146c:	4810      	ldr	r0, [pc, #64]	; (14b0 <cmd_kernel_stacks+0x88>)
    146e:	f009 f859 	bl	a524 <z_stack_space_get>

		(void)err;
		__ASSERT_NO_MSG(err == 0);

		shell_print(shell,
    1472:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1474:	9501      	str	r5, [sp, #4]
    1476:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
    147a:	2364      	movs	r3, #100	; 0x64
    147c:	434b      	muls	r3, r1
    147e:	0adb      	lsrs	r3, r3, #11
    1480:	9306      	str	r3, [sp, #24]
    1482:	2500      	movs	r5, #0
    1484:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1488:	e9cd 1304 	strd	r1, r3, [sp, #16]
    148c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1490:	4620      	mov	r0, r4
    1492:	4b08      	ldr	r3, [pc, #32]	; (14b4 <cmd_kernel_stacks+0x8c>)
    1494:	4a08      	ldr	r2, [pc, #32]	; (14b8 <cmd_kernel_stacks+0x90>)
    1496:	9500      	str	r5, [sp, #0]
    1498:	2108      	movs	r1, #8
    149a:	f007 ffa4 	bl	93e6 <shell_fprintf>
			    &z_interrupt_stacks[i], i, pad, size, unused, size - unused, size,
			    ((size - unused) * 100U) / size);
	}

	return 0;
}
    149e:	4628      	mov	r0, r5
    14a0:	b013      	add	sp, #76	; 0x4c
    14a2:	bd30      	pop	{r4, r5, pc}
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    14a4:	2201      	movs	r2, #1
    14a6:	e7d4      	b.n	1452 <cmd_kernel_stacks+0x2a>
    14a8:	0000c50c 	.word	0x0000c50c
    14ac:	0000152d 	.word	0x0000152d
    14b0:	20002dc0 	.word	0x20002dc0
    14b4:	20002d80 	.word	0x20002d80
    14b8:	0000c513 	.word	0x0000c513

000014bc <cmd_kernel_cycles>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    14c0:	f008 fec2 	bl	a248 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    14c4:	4a03      	ldr	r2, [pc, #12]	; (14d4 <cmd_kernel_cycles+0x18>)
    14c6:	4603      	mov	r3, r0
    14c8:	2108      	movs	r1, #8
    14ca:	4620      	mov	r0, r4
    14cc:	f007 ff8b 	bl	93e6 <shell_fprintf>
}
    14d0:	2000      	movs	r0, #0
    14d2:	bd10      	pop	{r4, pc}
    14d4:	0000c55c 	.word	0x0000c55c

000014d8 <cmd_kernel_sleep>:
#endif

static int cmd_kernel_sleep(const struct shell *sh,
			    size_t argc, char **argv)
{
    14d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    14da:	4613      	mov	r3, r2
	ARG_UNUSED(sh);
	ARG_UNUSED(argc);

	uint32_t ms;
	int err = 0;
    14dc:	2200      	movs	r2, #0
    14de:	9201      	str	r2, [sp, #4]
{
    14e0:	4604      	mov	r4, r0

	ms = shell_strtoul(argv[1], 10, &err);
    14e2:	aa01      	add	r2, sp, #4
    14e4:	6858      	ldr	r0, [r3, #4]
    14e6:	210a      	movs	r1, #10
    14e8:	f008 f86d 	bl	95c6 <shell_strtoul>

	if (!err) {
    14ec:	9d01      	ldr	r5, [sp, #4]
    14ee:	b995      	cbnz	r5, 1516 <cmd_kernel_sleep+0x3e>
	return k_sleep(Z_TIMEOUT_MS(ms));
    14f0:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    14f4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    14f8:	4629      	mov	r1, r5
    14fa:	f240 30e7 	movw	r0, #999	; 0x3e7
    14fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1502:	2300      	movs	r3, #0
    1504:	fbc4 0106 	smlal	r0, r1, r4, r6
    1508:	f7fe fe56 	bl	1b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    150c:	f005 fc92 	bl	6e34 <z_impl_k_sleep>
		shell_error(sh, "Unable to parse input (err %d)", err);
		return err;
	}

	return 0;
}
    1510:	4628      	mov	r0, r5
    1512:	b002      	add	sp, #8
    1514:	bd70      	pop	{r4, r5, r6, pc}
		shell_error(sh, "Unable to parse input (err %d)", err);
    1516:	462b      	mov	r3, r5
    1518:	4a03      	ldr	r2, [pc, #12]	; (1528 <cmd_kernel_sleep+0x50>)
    151a:	2101      	movs	r1, #1
    151c:	4620      	mov	r0, r4
    151e:	f007 ff62 	bl	93e6 <shell_fprintf>
		return err;
    1522:	9d01      	ldr	r5, [sp, #4]
    1524:	e7f4      	b.n	1510 <cmd_kernel_sleep+0x38>
    1526:	bf00      	nop
    1528:	0000c572 	.word	0x0000c572

0000152c <shell_stack_dump>:
{
    152c:	b5f0      	push	{r4, r5, r6, r7, lr}
    152e:	4604      	mov	r4, r0
	size_t size = thread->stack_info.size;
    1530:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    1534:	b089      	sub	sp, #36	; 0x24
    1536:	460d      	mov	r5, r1
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    1538:	a907      	add	r1, sp, #28
    153a:	f008 ffff 	bl	a53c <z_impl_k_thread_stack_space_get>
	if (ret) {
    153e:	4603      	mov	r3, r0
    1540:	b130      	cbz	r0, 1550 <shell_stack_dump+0x24>
		shell_print(shell,
    1542:	4a10      	ldr	r2, [pc, #64]	; (1584 <shell_stack_dump+0x58>)
    1544:	2108      	movs	r1, #8
    1546:	4628      	mov	r0, r5
    1548:	f007 ff4d 	bl	93e6 <shell_fprintf>
}
    154c:	b009      	add	sp, #36	; 0x24
    154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    1550:	4620      	mov	r0, r4
    1552:	f008 ffe3 	bl	a51c <k_thread_name_get>
	shell_print(
    1556:	4f0c      	ldr	r7, [pc, #48]	; (1588 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    1558:	9a07      	ldr	r2, [sp, #28]
	shell_print(
    155a:	2800      	cmp	r0, #0
    155c:	bf18      	it	ne
    155e:	4607      	movne	r7, r0
	pcnt = ((size - unused) * 100U) / size;
    1560:	1ab1      	subs	r1, r6, r2
    1562:	2364      	movs	r3, #100	; 0x64
	shell_print(
    1564:	e9cd 2102 	strd	r2, r1, [sp, #8]
	pcnt = ((size - unused) * 100U) / size;
    1568:	434b      	muls	r3, r1
	shell_print(
    156a:	e9cd 7600 	strd	r7, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    156e:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print(
    1572:	4a06      	ldr	r2, [pc, #24]	; (158c <shell_stack_dump+0x60>)
    1574:	e9cd 6304 	strd	r6, r3, [sp, #16]
    1578:	2108      	movs	r1, #8
    157a:	4623      	mov	r3, r4
    157c:	4628      	mov	r0, r5
    157e:	f007 ff32 	bl	93e6 <shell_fprintf>
    1582:	e7e3      	b.n	154c <shell_stack_dump+0x20>
    1584:	0000c4a8 	.word	0x0000c4a8
    1588:	0000c456 	.word	0x0000c456
    158c:	0000c592 	.word	0x0000c592

00001590 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    1590:	b510      	push	{r4, lr}
    1592:	4603      	mov	r3, r0
	const char *name = dev->name;
    1594:	6800      	ldr	r0, [r0, #0]
{
    1596:	460c      	mov	r4, r1
    1598:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    159a:	b108      	cbz	r0, 15a0 <get_device_name+0x10>
    159c:	7802      	ldrb	r2, [r0, #0]
    159e:	b922      	cbnz	r2, 15aa <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    15a0:	4a02      	ldr	r2, [pc, #8]	; (15ac <get_device_name+0x1c>)
    15a2:	4620      	mov	r0, r4
    15a4:	f006 f8f4 	bl	7790 <sniprintf>
    15a8:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
    15aa:	bd10      	pop	{r4, pc}
    15ac:	0000c6aa 	.word	0x0000c6aa

000015b0 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    15b0:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    15b2:	680c      	ldr	r4, [r1, #0]
    15b4:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    15b8:	f7ff ffea 	bl	1590 <get_device_name>
    15bc:	4a03      	ldr	r2, [pc, #12]	; (15cc <cmd_device_list_visitor+0x1c>)
    15be:	4603      	mov	r3, r0
    15c0:	2108      	movs	r1, #8
    15c2:	4620      	mov	r0, r4
    15c4:	f007 ff0f 	bl	93e6 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    15c8:	2000      	movs	r0, #0
    15ca:	bd10      	pop	{r4, pc}
    15cc:	0000c6af 	.word	0x0000c6af

000015d0 <cmd_device_list>:

static int cmd_device_list(const struct shell *sh,
			   size_t argc, char **argv)
{
    15d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15d4:	b08a      	sub	sp, #40	; 0x28
    15d6:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    15d8:	a801      	add	r0, sp, #4
    15da:	f004 fd71 	bl	60c0 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    15de:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    15e0:	4a1b      	ldr	r2, [pc, #108]	; (1650 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    15e2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1654 <cmd_device_list+0x84>
		const char *state = "READY";
    15e6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1658 <cmd_device_list+0x88>
    15ea:	f8df a070 	ldr.w	sl, [pc, #112]	; 165c <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    15ee:	2318      	movs	r3, #24
    15f0:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    15f4:	2108      	movs	r1, #8
    15f6:	4628      	mov	r0, r5
    15f8:	f007 fef5 	bl	93e6 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    15fc:	9c01      	ldr	r4, [sp, #4]
    15fe:	42b4      	cmp	r4, r6
    1600:	d303      	bcc.n	160a <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    1602:	2000      	movs	r0, #0
    1604:	b00a      	add	sp, #40	; 0x28
    1606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    160a:	af05      	add	r7, sp, #20
    160c:	4639      	mov	r1, r7
    160e:	2214      	movs	r2, #20
    1610:	4620      	mov	r0, r4
    1612:	f7ff ffbd 	bl	1590 <get_device_name>
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    1616:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    1618:	4603      	mov	r3, r0
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    161a:	2108      	movs	r1, #8
    161c:	4628      	mov	r0, r5
    161e:	f007 fee2 	bl	93e6 <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1622:	4620      	mov	r0, r4
    1624:	f008 fee4 	bl	a3f0 <z_device_is_ready>
		shell_fprintf(sh, SHELL_NORMAL, " (%s)\n", state);
    1628:	4a0d      	ldr	r2, [pc, #52]	; (1660 <cmd_device_list+0x90>)
    162a:	2800      	cmp	r0, #0
    162c:	bf0c      	ite	eq
    162e:	464b      	moveq	r3, r9
    1630:	4653      	movne	r3, sl
    1632:	2108      	movs	r1, #8
    1634:	4628      	mov	r0, r5
    1636:	f007 fed6 	bl	93e6 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    163a:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    163c:	4620      	mov	r0, r4
    163e:	4909      	ldr	r1, [pc, #36]	; (1664 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    1640:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    1642:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    1644:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    1648:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    164a:	f008 fedc 	bl	a406 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    164e:	e7d6      	b.n	15fe <cmd_device_list+0x2e>
    1650:	0000c6ce 	.word	0x0000c6ce
    1654:	0000c6d8 	.word	0x0000c6d8
    1658:	0000c6c5 	.word	0x0000c6c5
    165c:	0000c6bf 	.word	0x0000c6bf
    1660:	0000c6dd 	.word	0x0000c6dd
    1664:	000015b1 	.word	0x000015b1

00001668 <device_get_config_level>:
{
    1668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    166c:	4b11      	ldr	r3, [pc, #68]	; (16b4 <device_get_config_level+0x4c>)
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    166e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16b8 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1672:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    1676:	3101      	adds	r1, #1
{
    1678:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    167a:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    167e:	4606      	mov	r6, r0
	bool devices = false;
    1680:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1682:	45a0      	cmp	r8, r4
    1684:	d803      	bhi.n	168e <device_get_config_level+0x26>
}
    1686:	4638      	mov	r0, r7
    1688:	b007      	add	sp, #28
    168a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    168e:	4620      	mov	r0, r4
    1690:	f008 feae 	bl	a3f0 <z_device_is_ready>
		if (device_is_ready(dev)) {
    1694:	4605      	mov	r5, r0
    1696:	b158      	cbz	r0, 16b0 <device_get_config_level+0x48>
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    1698:	2214      	movs	r2, #20
    169a:	a901      	add	r1, sp, #4
    169c:	4620      	mov	r0, r4
    169e:	f7ff ff77 	bl	1590 <get_device_name>
    16a2:	464a      	mov	r2, r9
    16a4:	4603      	mov	r3, r0
    16a6:	2108      	movs	r1, #8
    16a8:	4630      	mov	r0, r6
    16aa:	f007 fe9c 	bl	93e6 <shell_fprintf>
			devices = true;
    16ae:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    16b0:	3418      	adds	r4, #24
    16b2:	e7e6      	b.n	1682 <device_get_config_level+0x1a>
    16b4:	0000bdcc 	.word	0x0000bdcc
    16b8:	0000c6e4 	.word	0x0000c6e4

000016bc <cmd_device_levels>:
{
    16bc:	b510      	push	{r4, lr}
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    16be:	2108      	movs	r1, #8
{
    16c0:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    16c2:	4a25      	ldr	r2, [pc, #148]	; (1758 <cmd_device_levels+0x9c>)
    16c4:	f007 fe8f 	bl	93e6 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_EARLY);
    16c8:	2100      	movs	r1, #0
    16ca:	4620      	mov	r0, r4
    16cc:	f7ff ffcc 	bl	1668 <device_get_config_level>
	if (ret == false) {
    16d0:	b920      	cbnz	r0, 16dc <cmd_device_levels+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    16d2:	4a22      	ldr	r2, [pc, #136]	; (175c <cmd_device_levels+0xa0>)
    16d4:	2108      	movs	r1, #8
    16d6:	4620      	mov	r0, r4
    16d8:	f007 fe85 	bl	93e6 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 1:\n");
    16dc:	2108      	movs	r1, #8
    16de:	4620      	mov	r0, r4
    16e0:	4a1f      	ldr	r2, [pc, #124]	; (1760 <cmd_device_levels+0xa4>)
    16e2:	f007 fe80 	bl	93e6 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_1);
    16e6:	2101      	movs	r1, #1
    16e8:	4620      	mov	r0, r4
    16ea:	f7ff ffbd 	bl	1668 <device_get_config_level>
	if (ret == false) {
    16ee:	b920      	cbnz	r0, 16fa <cmd_device_levels+0x3e>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    16f0:	4a1a      	ldr	r2, [pc, #104]	; (175c <cmd_device_levels+0xa0>)
    16f2:	2108      	movs	r1, #8
    16f4:	4620      	mov	r0, r4
    16f6:	f007 fe76 	bl	93e6 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 2:\n");
    16fa:	2108      	movs	r1, #8
    16fc:	4620      	mov	r0, r4
    16fe:	4a19      	ldr	r2, [pc, #100]	; (1764 <cmd_device_levels+0xa8>)
    1700:	f007 fe71 	bl	93e6 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_2);
    1704:	2102      	movs	r1, #2
    1706:	4620      	mov	r0, r4
    1708:	f7ff ffae 	bl	1668 <device_get_config_level>
	if (ret == false) {
    170c:	b920      	cbnz	r0, 1718 <cmd_device_levels+0x5c>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    170e:	4a13      	ldr	r2, [pc, #76]	; (175c <cmd_device_levels+0xa0>)
    1710:	2108      	movs	r1, #8
    1712:	4620      	mov	r0, r4
    1714:	f007 fe67 	bl	93e6 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "POST_KERNEL:\n");
    1718:	2108      	movs	r1, #8
    171a:	4620      	mov	r0, r4
    171c:	4a12      	ldr	r2, [pc, #72]	; (1768 <cmd_device_levels+0xac>)
    171e:	f007 fe62 	bl	93e6 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_POST_KERNEL);
    1722:	2103      	movs	r1, #3
    1724:	4620      	mov	r0, r4
    1726:	f7ff ff9f 	bl	1668 <device_get_config_level>
	if (ret == false) {
    172a:	b920      	cbnz	r0, 1736 <cmd_device_levels+0x7a>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    172c:	4a0b      	ldr	r2, [pc, #44]	; (175c <cmd_device_levels+0xa0>)
    172e:	2108      	movs	r1, #8
    1730:	4620      	mov	r0, r4
    1732:	f007 fe58 	bl	93e6 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "APPLICATION:\n");
    1736:	2108      	movs	r1, #8
    1738:	4620      	mov	r0, r4
    173a:	4a0c      	ldr	r2, [pc, #48]	; (176c <cmd_device_levels+0xb0>)
    173c:	f007 fe53 	bl	93e6 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_APPLICATION);
    1740:	2104      	movs	r1, #4
    1742:	4620      	mov	r0, r4
    1744:	f7ff ff90 	bl	1668 <device_get_config_level>
	if (ret == false) {
    1748:	b920      	cbnz	r0, 1754 <cmd_device_levels+0x98>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    174a:	4a04      	ldr	r2, [pc, #16]	; (175c <cmd_device_levels+0xa0>)
    174c:	2108      	movs	r1, #8
    174e:	4620      	mov	r0, r4
    1750:	f007 fe49 	bl	93e6 <shell_fprintf>
}
    1754:	2000      	movs	r0, #0
    1756:	bd10      	pop	{r4, pc}
    1758:	0000c6ea 	.word	0x0000c6ea
    175c:	0000c6f2 	.word	0x0000c6f2
    1760:	0000c6fa 	.word	0x0000c6fa
    1764:	0000c709 	.word	0x0000c709
    1768:	0000c718 	.word	0x0000c718
    176c:	0000c726 	.word	0x0000c726

00001770 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    1770:	1e8b      	subs	r3, r1, #2
    1772:	2b02      	cmp	r3, #2
{
    1774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1778:	4607      	mov	r7, r0
    177a:	4688      	mov	r8, r1
    177c:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    177e:	d837      	bhi.n	17f0 <cmd_devmem+0x80>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    1780:	6860      	ldr	r0, [r4, #4]
    1782:	2210      	movs	r2, #16
    1784:	2100      	movs	r1, #0
    1786:	f006 f931 	bl	79ec <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    178a:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    178e:	4606      	mov	r6, r0
	if (argc < 3) {
    1790:	d107      	bne.n	17a2 <cmd_devmem+0x32>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    1792:	4a26      	ldr	r2, [pc, #152]	; (182c <cmd_devmem+0xbc>)
    1794:	2320      	movs	r3, #32
    1796:	2108      	movs	r1, #8
    1798:	4638      	mov	r0, r7
    179a:	f007 fe24 	bl	93e6 <shell_fprintf>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    179e:	6833      	ldr	r3, [r6, #0]
	if (err == 0) {
    17a0:	e016      	b.n	17d0 <cmd_devmem+0x60>
		width = strtoul(argv[2], NULL, 10);
    17a2:	220a      	movs	r2, #10
    17a4:	2100      	movs	r1, #0
    17a6:	68a0      	ldr	r0, [r4, #8]
    17a8:	f006 f920 	bl	79ec <strtoul>
    17ac:	b2c5      	uxtb	r5, r0
	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    17ae:	4a1f      	ldr	r2, [pc, #124]	; (182c <cmd_devmem+0xbc>)
    17b0:	462b      	mov	r3, r5
    17b2:	2108      	movs	r1, #8
    17b4:	4638      	mov	r0, r7
    17b6:	f007 fe16 	bl	93e6 <shell_fprintf>

	if (argc <= 3) {
    17ba:	f1b8 0f04 	cmp.w	r8, #4
    17be:	d01a      	beq.n	17f6 <cmd_devmem+0x86>
	switch (width) {
    17c0:	2d10      	cmp	r5, #16
    17c2:	d00d      	beq.n	17e0 <cmd_devmem+0x70>
    17c4:	2d20      	cmp	r5, #32
    17c6:	d0ea      	beq.n	179e <cmd_devmem+0x2e>
    17c8:	2d08      	cmp	r5, #8
    17ca:	d10c      	bne.n	17e6 <cmd_devmem+0x76>
	return *(volatile uint8_t *)addr;
    17cc:	7833      	ldrb	r3, [r6, #0]
    17ce:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    17d0:	4a17      	ldr	r2, [pc, #92]	; (1830 <cmd_devmem+0xc0>)
    17d2:	2108      	movs	r1, #8
    17d4:	4638      	mov	r0, r7
    17d6:	f007 fe06 	bl	93e6 <shell_fprintf>
		return -EINVAL;
    17da:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    17dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return *(volatile uint16_t *)addr;
    17e0:	8833      	ldrh	r3, [r6, #0]
    17e2:	b29b      	uxth	r3, r3
	if (err == 0) {
    17e4:	e7f4      	b.n	17d0 <cmd_devmem+0x60>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    17e6:	4a13      	ldr	r2, [pc, #76]	; (1834 <cmd_devmem+0xc4>)
    17e8:	2108      	movs	r1, #8
    17ea:	4638      	mov	r0, r7
    17ec:	f007 fdfb 	bl	93e6 <shell_fprintf>
		return -EINVAL;
    17f0:	f06f 0015 	mvn.w	r0, #21
    17f4:	e7f2      	b.n	17dc <cmd_devmem+0x6c>
	value = strtoul(argv[3], NULL, 16);
    17f6:	68e0      	ldr	r0, [r4, #12]
    17f8:	2210      	movs	r2, #16
    17fa:	2100      	movs	r1, #0
    17fc:	f006 f8f6 	bl	79ec <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    1800:	4a0d      	ldr	r2, [pc, #52]	; (1838 <cmd_devmem+0xc8>)
    1802:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    1804:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    1806:	2108      	movs	r1, #8
    1808:	4638      	mov	r0, r7
    180a:	f007 fdec 	bl	93e6 <shell_fprintf>
	switch (width) {
    180e:	2d10      	cmp	r5, #16
    1810:	d006      	beq.n	1820 <cmd_devmem+0xb0>
    1812:	2d20      	cmp	r5, #32
    1814:	d007      	beq.n	1826 <cmd_devmem+0xb6>
    1816:	2d08      	cmp	r5, #8
    1818:	d1e5      	bne.n	17e6 <cmd_devmem+0x76>
		sys_write8(value, addr);
    181a:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    181c:	7034      	strb	r4, [r6, #0]
}
    181e:	e7dc      	b.n	17da <cmd_devmem+0x6a>
		sys_write16(value, addr);
    1820:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    1822:	8034      	strh	r4, [r6, #0]
}
    1824:	e7d9      	b.n	17da <cmd_devmem+0x6a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1826:	6034      	str	r4, [r6, #0]
}
    1828:	e7d7      	b.n	17da <cmd_devmem+0x6a>
    182a:	bf00      	nop
    182c:	0000c78a 	.word	0x0000c78a
    1830:	0000c7b5 	.word	0x0000c7b5
    1834:	0000c79f 	.word	0x0000c79f
    1838:	0000c7c6 	.word	0x0000c7c6

0000183c <cmd_dump>:
{
    183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	optind = 1;
    1840:	4b57      	ldr	r3, [pc, #348]	; (19a0 <cmd_dump+0x164>)
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    1842:	f8df a160 	ldr.w	sl, [pc, #352]	; 19a4 <cmd_dump+0x168>
{
    1846:	4691      	mov	r9, r2
	mem_addr_t addr = -1;
    1848:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	optind = 1;
    184c:	2201      	movs	r2, #1
{
    184e:	b085      	sub	sp, #20
    1850:	4607      	mov	r7, r0
    1852:	4688      	mov	r8, r1
	optind = 1;
    1854:	601a      	str	r2, [r3, #0]
	size_t width = 32;
    1856:	2620      	movs	r6, #32
	size_t size = -1;
    1858:	462c      	mov	r4, r5
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    185a:	4649      	mov	r1, r9
    185c:	4652      	mov	r2, sl
    185e:	4640      	mov	r0, r8
    1860:	f7fe ff4c 	bl	6fc <getopt>
    1864:	1c41      	adds	r1, r0, #1
    1866:	d107      	bne.n	1878 <cmd_dump+0x3c>
	if (addr == -1) {
    1868:	1c6a      	adds	r2, r5, #1
    186a:	d14f      	bne.n	190c <cmd_dump+0xd0>
		shell_error(sh, "'-a <address>' is mandatory");
    186c:	4a4e      	ldr	r2, [pc, #312]	; (19a8 <cmd_dump+0x16c>)
		shell_error(sh, "'-s <size>' is mandatory");
    186e:	2101      	movs	r1, #1
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    1870:	4638      	mov	r0, r7
    1872:	f007 fdb8 	bl	93e6 <shell_fprintf>
    1876:	e01c      	b.n	18b2 <cmd_dump+0x76>
		switch (rv) {
    1878:	2873      	cmp	r0, #115	; 0x73
    187a:	d01f      	beq.n	18bc <cmd_dump+0x80>
    187c:	2877      	cmp	r0, #119	; 0x77
    187e:	d031      	beq.n	18e4 <cmd_dump+0xa8>
    1880:	2861      	cmp	r0, #97	; 0x61
    1882:	d116      	bne.n	18b2 <cmd_dump+0x76>
			addr = (mem_addr_t)strtoul(optarg, NULL, 16);
    1884:	f8df b124 	ldr.w	fp, [pc, #292]	; 19ac <cmd_dump+0x170>
    1888:	2210      	movs	r2, #16
    188a:	f8db 0000 	ldr.w	r0, [fp]
    188e:	2100      	movs	r1, #0
    1890:	f006 f8ac 	bl	79ec <strtoul>
			if (addr == 0 && errno == EINVAL) {
    1894:	4605      	mov	r5, r0
    1896:	2800      	cmp	r0, #0
    1898:	d1df      	bne.n	185a <cmd_dump+0x1e>
    189a:	f008 fa35 	bl	9d08 <__errno>
    189e:	6803      	ldr	r3, [r0, #0]
    18a0:	2b16      	cmp	r3, #22
    18a2:	d1da      	bne.n	185a <cmd_dump+0x1e>
				shell_error(sh, "invalid addr '%s'", optarg);
    18a4:	f8db 3000 	ldr.w	r3, [fp]
    18a8:	4a41      	ldr	r2, [pc, #260]	; (19b0 <cmd_dump+0x174>)
				shell_error(sh, "invalid size '%s'", optarg);
    18aa:	2101      	movs	r1, #1
    18ac:	4638      	mov	r0, r7
    18ae:	f007 fd9a 	bl	93e6 <shell_fprintf>
				return -EINVAL;
    18b2:	f06f 0015 	mvn.w	r0, #21
}
    18b6:	b005      	add	sp, #20
    18b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = (size_t)strtoul(optarg, NULL, 0);
    18bc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 19ac <cmd_dump+0x170>
    18c0:	2200      	movs	r2, #0
    18c2:	f8db 0000 	ldr.w	r0, [fp]
    18c6:	4611      	mov	r1, r2
    18c8:	f006 f890 	bl	79ec <strtoul>
			if (size == 0 && errno == EINVAL) {
    18cc:	4604      	mov	r4, r0
    18ce:	2800      	cmp	r0, #0
    18d0:	d1c3      	bne.n	185a <cmd_dump+0x1e>
    18d2:	f008 fa19 	bl	9d08 <__errno>
    18d6:	6803      	ldr	r3, [r0, #0]
    18d8:	2b16      	cmp	r3, #22
    18da:	d1be      	bne.n	185a <cmd_dump+0x1e>
				shell_error(sh, "invalid size '%s'", optarg);
    18dc:	f8db 3000 	ldr.w	r3, [fp]
    18e0:	4a34      	ldr	r2, [pc, #208]	; (19b4 <cmd_dump+0x178>)
    18e2:	e7e2      	b.n	18aa <cmd_dump+0x6e>
			width = (size_t)strtoul(optarg, NULL, 0);
    18e4:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 19ac <cmd_dump+0x170>
    18e8:	2200      	movs	r2, #0
    18ea:	f8db 0000 	ldr.w	r0, [fp]
    18ee:	4611      	mov	r1, r2
    18f0:	f006 f87c 	bl	79ec <strtoul>
			if (width == 0 && errno == EINVAL) {
    18f4:	4606      	mov	r6, r0
    18f6:	2800      	cmp	r0, #0
    18f8:	d1af      	bne.n	185a <cmd_dump+0x1e>
    18fa:	f008 fa05 	bl	9d08 <__errno>
    18fe:	6803      	ldr	r3, [r0, #0]
    1900:	2b16      	cmp	r3, #22
    1902:	d1aa      	bne.n	185a <cmd_dump+0x1e>
				shell_error(sh, "invalid width '%s'", optarg);
    1904:	f8db 3000 	ldr.w	r3, [fp]
    1908:	4a2b      	ldr	r2, [pc, #172]	; (19b8 <cmd_dump+0x17c>)
    190a:	e7ce      	b.n	18aa <cmd_dump+0x6e>
	if (size == -1) {
    190c:	1c63      	adds	r3, r4, #1
    190e:	d101      	bne.n	1914 <cmd_dump+0xd8>
		shell_error(sh, "'-s <size>' is mandatory");
    1910:	4a2a      	ldr	r2, [pc, #168]	; (19bc <cmd_dump+0x180>)
    1912:	e7ac      	b.n	186e <cmd_dump+0x32>
	return memory_dump(sh, addr, size, width);
    1914:	fa5f f886 	uxtb.w	r8, r6
	const size_t vsize = width / BITS_PER_BYTE;
    1918:	f3c6 06c4 	ubfx	r6, r6, #3, #5
	for (; size > 0;
    191c:	2c00      	cmp	r4, #0
    191e:	d03c      	beq.n	199a <cmd_dump+0x15e>
    1920:	466b      	mov	r3, sp
    1922:	4629      	mov	r1, r5
    1924:	461a      	mov	r2, r3
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    1926:	eba6 0c05 	sub.w	ip, r6, r5
    192a:	e00c      	b.n	1946 <cmd_dump+0x10a>
			switch (width) {
    192c:	f1b8 0f10 	cmp.w	r8, #16
    1930:	d01d      	beq.n	196e <cmd_dump+0x132>
    1932:	f1b8 0f20 	cmp.w	r8, #32
    1936:	d020      	beq.n	197a <cmd_dump+0x13e>
    1938:	f1b8 0f08 	cmp.w	r8, #8
    193c:	d12a      	bne.n	1994 <cmd_dump+0x158>
	return *(volatile uint8_t *)addr;
    193e:	7808      	ldrb	r0, [r1, #0]
				data[data_offset] = value;
    1940:	7018      	strb	r0, [r3, #0]
				break;
    1942:	4431      	add	r1, r6
    1944:	4433      	add	r3, r6
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    1946:	42a6      	cmp	r6, r4
    1948:	d803      	bhi.n	1952 <cmd_dump+0x116>
    194a:	eb0c 0001 	add.w	r0, ip, r1
    194e:	2810      	cmp	r0, #16
    1950:	d9ec      	bls.n	192c <cmd_dump+0xf0>
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
    1952:	2c10      	cmp	r4, #16
    1954:	46a1      	mov	r9, r4
    1956:	bf28      	it	cs
    1958:	f04f 0910 	movcs.w	r9, #16
    195c:	4629      	mov	r1, r5
    195e:	464b      	mov	r3, r9
    1960:	4638      	mov	r0, r7
    1962:	f001 f81b 	bl	299c <shell_hexdump_line>
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
    1966:	3510      	adds	r5, #16
    1968:	eba4 0409 	sub.w	r4, r4, r9
    196c:	e7d6      	b.n	191c <cmd_dump+0xe0>
	return *(volatile uint16_t *)addr;
    196e:	8808      	ldrh	r0, [r1, #0]
    1970:	b280      	uxth	r0, r0
				data[data_offset] = (uint8_t)value;
    1972:	7018      	strb	r0, [r3, #0]
				value >>= 8;
    1974:	0a00      	lsrs	r0, r0, #8
				data[data_offset + 1] = (uint8_t)value;
    1976:	7058      	strb	r0, [r3, #1]
				break;
    1978:	e7e3      	b.n	1942 <cmd_dump+0x106>
	return *(volatile uint32_t *)addr;
    197a:	6808      	ldr	r0, [r1, #0]
				data[data_offset] = (uint8_t)value;
    197c:	7018      	strb	r0, [r3, #0]
				value >>= 8;
    197e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
				data[data_offset + 1] = (uint8_t)value;
    1982:	f883 e001 	strb.w	lr, [r3, #1]
				value >>= 8;
    1986:	ea4f 4e10 	mov.w	lr, r0, lsr #16
				value >>= 8;
    198a:	0e00      	lsrs	r0, r0, #24
				data[data_offset + 2] = (uint8_t)value;
    198c:	f883 e002 	strb.w	lr, [r3, #2]
				data[data_offset + 3] = (uint8_t)value;
    1990:	70d8      	strb	r0, [r3, #3]
				break;
    1992:	e7d6      	b.n	1942 <cmd_dump+0x106>
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    1994:	4a0a      	ldr	r2, [pc, #40]	; (19c0 <cmd_dump+0x184>)
    1996:	2108      	movs	r1, #8
    1998:	e76a      	b.n	1870 <cmd_dump+0x34>
	return 0;
    199a:	4620      	mov	r0, r4
	return memory_dump(sh, addr, size, width);
    199c:	e78b      	b.n	18b6 <cmd_dump+0x7a>
    199e:	bf00      	nop
    19a0:	2000001c 	.word	0x2000001c
    19a4:	0000c814 	.word	0x0000c814
    19a8:	0000c81b 	.word	0x0000c81b
    19ac:	2000080c 	.word	0x2000080c
    19b0:	0000c7da 	.word	0x0000c7da
    19b4:	0000c7ed 	.word	0x0000c7ed
    19b8:	0000c800 	.word	0x0000c800
    19bc:	0000c838 	.word	0x0000c838
    19c0:	0000c79f 	.word	0x0000c79f

000019c4 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    19c4:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    19c6:	4e10      	ldr	r6, [pc, #64]	; (1a08 <set_bypass.isra.0+0x44>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    19c8:	4604      	mov	r4, r0
	if (bypass && in_use) {
    19ca:	7833      	ldrb	r3, [r6, #0]
    19cc:	460d      	mov	r5, r1
    19ce:	b181      	cbz	r1, 19f2 <set_bypass.isra.0+0x2e>
    19d0:	b12b      	cbz	r3, 19de <set_bypass.isra.0+0x1a>
}
    19d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    19d6:	4a0d      	ldr	r2, [pc, #52]	; (1a0c <set_bypass.isra.0+0x48>)
    19d8:	2101      	movs	r1, #1
    19da:	f007 bd04 	b.w	93e6 <shell_fprintf>
	in_use = !in_use;
    19de:	2301      	movs	r3, #1
    19e0:	7033      	strb	r3, [r6, #0]
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    19e2:	4a0b      	ldr	r2, [pc, #44]	; (1a10 <set_bypass.isra.0+0x4c>)
    19e4:	2108      	movs	r1, #8
    19e6:	4620      	mov	r0, r4
    19e8:	f007 fcfd 	bl	93e6 <shell_fprintf>
		in_use = true;
    19ec:	2301      	movs	r3, #1
    19ee:	7033      	strb	r3, [r6, #0]
    19f0:	e004      	b.n	19fc <set_bypass.isra.0+0x38>
	in_use = !in_use;
    19f2:	f083 0301 	eor.w	r3, r3, #1
    19f6:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    19f8:	2b00      	cmp	r3, #0
    19fa:	d1f2      	bne.n	19e2 <set_bypass.isra.0+0x1e>
	shell_set_bypass(sh, bypass);
    19fc:	4629      	mov	r1, r5
    19fe:	4620      	mov	r0, r4
}
    1a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    1a04:	f007 bcfc 	b.w	9400 <shell_set_bypass>
    1a08:	2000184d 	.word	0x2000184d
    1a0c:	0000c852 	.word	0x0000c852
    1a10:	0000c88d 	.word	0x0000c88d

00001a14 <bypass_cb>:
{
    1a14:	b570      	push	{r4, r5, r6, lr}
    1a16:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    1a18:	483c      	ldr	r0, [pc, #240]	; (1b0c <bypass_cb+0xf8>)
    1a1a:	7803      	ldrb	r3, [r0, #0]
    1a1c:	2b18      	cmp	r3, #24
    1a1e:	d102      	bne.n	1a26 <bypass_cb+0x12>
    1a20:	780b      	ldrb	r3, [r1, #0]
    1a22:	2b11      	cmp	r3, #17
    1a24:	d031      	beq.n	1a8a <bypass_cb+0x76>
    1a26:	3a01      	subs	r2, #1
    1a28:	460b      	mov	r3, r1
    1a2a:	188d      	adds	r5, r1, r2
		for (int i = 0; i < (len - 1); i++) {
    1a2c:	42ab      	cmp	r3, r5
    1a2e:	d125      	bne.n	1a7c <bypass_cb+0x68>
	tail = recv[len - 1];
    1a30:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    1a32:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    1a34:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    1a36:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    1a3a:	2b09      	cmp	r3, #9
    1a3c:	4c34      	ldr	r4, [pc, #208]	; (1b10 <bypass_cb+0xfc>)
    1a3e:	d904      	bls.n	1a4a <bypass_cb+0x36>
    1a40:	f022 0320 	bic.w	r3, r2, #32
    1a44:	3b41      	subs	r3, #65	; 0x41
    1a46:	2b05      	cmp	r3, #5
    1a48:	d804      	bhi.n	1a54 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    1a4a:	6823      	ldr	r3, [r4, #0]
    1a4c:	4931      	ldr	r1, [pc, #196]	; (1b14 <bypass_cb+0x100>)
    1a4e:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    1a50:	3301      	adds	r3, #1
    1a52:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    1a54:	6823      	ldr	r3, [r4, #0]
    1a56:	2b02      	cmp	r3, #2
    1a58:	d134      	bne.n	1ac4 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    1a5a:	2210      	movs	r2, #16
    1a5c:	482d      	ldr	r0, [pc, #180]	; (1b14 <bypass_cb+0x100>)
    1a5e:	2100      	movs	r1, #0
    1a60:	f005 ffc4 	bl	79ec <strtoul>
		*bytes = byte;
    1a64:	4a2c      	ldr	r2, [pc, #176]	; (1b18 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    1a66:	6813      	ldr	r3, [r2, #0]
    1a68:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    1a6c:	6013      	str	r3, [r2, #0]
		sum++;
    1a6e:	4a2b      	ldr	r2, [pc, #172]	; (1b1c <bypass_cb+0x108>)
    1a70:	6813      	ldr	r3, [r2, #0]
    1a72:	3301      	adds	r3, #1
    1a74:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    1a76:	2300      	movs	r3, #0
    1a78:	6023      	str	r3, [r4, #0]
    1a7a:	e023      	b.n	1ac4 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    1a7c:	f813 6b01 	ldrb.w	r6, [r3], #1
    1a80:	2e18      	cmp	r6, #24
    1a82:	d1d3      	bne.n	1a2c <bypass_cb+0x18>
    1a84:	781e      	ldrb	r6, [r3, #0]
    1a86:	2e11      	cmp	r6, #17
    1a88:	d1d0      	bne.n	1a2c <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    1a8a:	4d24      	ldr	r5, [pc, #144]	; (1b1c <bypass_cb+0x108>)
    1a8c:	4a24      	ldr	r2, [pc, #144]	; (1b20 <bypass_cb+0x10c>)
    1a8e:	682b      	ldr	r3, [r5, #0]
    1a90:	2108      	movs	r1, #8
    1a92:	4620      	mov	r0, r4
    1a94:	f007 fca7 	bl	93e6 <shell_fprintf>
		set_bypass(sh, NULL);
    1a98:	4620      	mov	r0, r4
    1a9a:	2100      	movs	r1, #0
    1a9c:	f7ff ff92 	bl	19c4 <set_bypass.isra.0>
		if (!littleendian) {
    1aa0:	4b20      	ldr	r3, [pc, #128]	; (1b24 <bypass_cb+0x110>)
    1aa2:	7818      	ldrb	r0, [r3, #0]
    1aa4:	b970      	cbnz	r0, 1ac4 <bypass_cb+0xb0>
    1aa6:	4a20      	ldr	r2, [pc, #128]	; (1b28 <bypass_cb+0x114>)
    1aa8:	682b      	ldr	r3, [r5, #0]
    1aaa:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    1aac:	2b04      	cmp	r3, #4
    1aae:	dc0a      	bgt.n	1ac6 <bypass_cb+0xb2>
    1ab0:	b108      	cbz	r0, 1ab6 <bypass_cb+0xa2>
    1ab2:	6011      	str	r1, [r2, #0]
    1ab4:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    1ab6:	f013 0103 	ands.w	r1, r3, #3
    1aba:	d10b      	bne.n	1ad4 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    1abc:	6812      	ldr	r2, [r2, #0]
    1abe:	6813      	ldr	r3, [r2, #0]
    1ac0:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    1ac2:	6013      	str	r3, [r2, #0]
}
    1ac4:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    1ac6:	6808      	ldr	r0, [r1, #0]
    1ac8:	ba00      	rev	r0, r0
    1aca:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    1ace:	3b04      	subs	r3, #4
				data++;
    1ad0:	2001      	movs	r0, #1
    1ad2:	e7eb      	b.n	1aac <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    1ad4:	425b      	negs	r3, r3
    1ad6:	f003 0303 	and.w	r3, r3, #3
    1ada:	bf58      	it	pl
    1adc:	4259      	negpl	r1, r3
    1ade:	2902      	cmp	r1, #2
    1ae0:	d104      	bne.n	1aec <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    1ae2:	6812      	ldr	r2, [r2, #0]
    1ae4:	8813      	ldrh	r3, [r2, #0]
    1ae6:	ba5b      	rev16	r3, r3
    1ae8:	b29b      	uxth	r3, r3
    1aea:	e7ea      	b.n	1ac2 <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    1aec:	2903      	cmp	r1, #3
    1aee:	d1e9      	bne.n	1ac4 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    1af0:	6810      	ldr	r0, [r2, #0]
    1af2:	6802      	ldr	r2, [r0, #0]
    1af4:	0411      	lsls	r1, r2, #16
    1af6:	f3c2 4307 	ubfx	r3, r2, #16, #8
    1afa:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    1afe:	430b      	orrs	r3, r1
    1b00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    1b04:	4313      	orrs	r3, r2
    1b06:	6003      	str	r3, [r0, #0]
    1b08:	e7dc      	b.n	1ac4 <bypass_cb+0xb0>
    1b0a:	bf00      	nop
    1b0c:	2000184e 	.word	0x2000184e
    1b10:	20000818 	.word	0x20000818
    1b14:	20001850 	.word	0x20001850
    1b18:	20000824 	.word	0x20000824
    1b1c:	2000081c 	.word	0x2000081c
    1b20:	0000c8b7 	.word	0x0000c8b7
    1b24:	2000184f 	.word	0x2000184f
    1b28:	20000820 	.word	0x20000820

00001b2c <cmd_load>:
{
    1b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b30:	460d      	mov	r5, r1
	chunk_element = 0;
    1b32:	492b      	ldr	r1, [pc, #172]	; (1be0 <cmd_load+0xb4>)
	littleendian = false;
    1b34:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 1be4 <cmd_load+0xb8>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1b38:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1be8 <cmd_load+0xbc>
			shell_print(sh, "Unknown option \"%s\"", arg);
    1b3c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1bec <cmd_load+0xc0>
	littleendian = false;
    1b40:	2300      	movs	r3, #0
	chunk_element = 0;
    1b42:	600b      	str	r3, [r1, #0]
	sum = 0;
    1b44:	492a      	ldr	r1, [pc, #168]	; (1bf0 <cmd_load+0xc4>)
	littleendian = false;
    1b46:	f888 3000 	strb.w	r3, [r8]
{
    1b4a:	4606      	mov	r6, r0
	sum = 0;
    1b4c:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    1b4e:	4614      	mov	r4, r2
    1b50:	2d01      	cmp	r5, #1
    1b52:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1b54:	f854 af04 	ldr.w	sl, [r4, #4]!
	while (argc >= 2) {
    1b58:	d91e      	bls.n	1b98 <cmd_load+0x6c>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1b5a:	2202      	movs	r2, #2
    1b5c:	4649      	mov	r1, r9
    1b5e:	4650      	mov	r0, sl
    1b60:	f009 f81a 	bl	ab98 <strncmp>
    1b64:	b980      	cbnz	r0, 1b88 <cmd_load+0x5c>
    1b66:	6822      	ldr	r2, [r4, #0]
    1b68:	7892      	ldrb	r2, [r2, #2]
    1b6a:	3a00      	subs	r2, #0
    1b6c:	bf18      	it	ne
    1b6e:	2201      	movne	r2, #1
    1b70:	4492      	add	sl, r2
		if (!strncmp(arg, "-e", 2)) {
    1b72:	4920      	ldr	r1, [pc, #128]	; (1bf4 <cmd_load+0xc8>)
    1b74:	2202      	movs	r2, #2
    1b76:	4650      	mov	r0, sl
    1b78:	f009 f80e 	bl	ab98 <strncmp>
    1b7c:	b930      	cbnz	r0, 1b8c <cmd_load+0x60>
			littleendian = true;
    1b7e:	2301      	movs	r3, #1
    1b80:	f888 3000 	strb.w	r3, [r8]
		argc--;
    1b84:	3d01      	subs	r5, #1
    1b86:	e7e3      	b.n	1b50 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1b88:	2200      	movs	r2, #0
    1b8a:	e7f1      	b.n	1b70 <cmd_load+0x44>
		} else if (!strcmp(arg, "--")) {
    1b8c:	4649      	mov	r1, r9
    1b8e:	4650      	mov	r0, sl
    1b90:	f7fe fc7c 	bl	48c <strcmp>
    1b94:	b9a8      	cbnz	r0, 1bc2 <cmd_load+0x96>
			argv++;
    1b96:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    1b98:	2200      	movs	r2, #0
    1b9a:	4611      	mov	r1, r2
    1b9c:	6878      	ldr	r0, [r7, #4]
    1b9e:	f005 fea9 	bl	78f4 <strtol>
    1ba2:	4b15      	ldr	r3, [pc, #84]	; (1bf8 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    1ba4:	2200      	movs	r2, #0
    1ba6:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    1ba8:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    1baa:	6878      	ldr	r0, [r7, #4]
    1bac:	f005 fea2 	bl	78f4 <strtol>
    1bb0:	4b12      	ldr	r3, [pc, #72]	; (1bfc <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
    1bb2:	4913      	ldr	r1, [pc, #76]	; (1c00 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    1bb4:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    1bb6:	4630      	mov	r0, r6
    1bb8:	f7ff ff04 	bl	19c4 <set_bypass.isra.0>
}
    1bbc:	2000      	movs	r0, #0
    1bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    1bc2:	f89a 2000 	ldrb.w	r2, [sl]
    1bc6:	2a2d      	cmp	r2, #45	; 0x2d
    1bc8:	d1e6      	bne.n	1b98 <cmd_load+0x6c>
    1bca:	f89a 2001 	ldrb.w	r2, [sl, #1]
    1bce:	2a00      	cmp	r2, #0
    1bd0:	d0e2      	beq.n	1b98 <cmd_load+0x6c>
			shell_print(sh, "Unknown option \"%s\"", arg);
    1bd2:	4653      	mov	r3, sl
    1bd4:	465a      	mov	r2, fp
    1bd6:	2108      	movs	r1, #8
    1bd8:	4630      	mov	r0, r6
    1bda:	f007 fc04 	bl	93e6 <shell_fprintf>
    1bde:	e7d1      	b.n	1b84 <cmd_load+0x58>
    1be0:	20000818 	.word	0x20000818
    1be4:	2000184f 	.word	0x2000184f
    1be8:	0000c8d1 	.word	0x0000c8d1
    1bec:	0000c8d7 	.word	0x0000c8d7
    1bf0:	2000081c 	.word	0x2000081c
    1bf4:	0000c8d4 	.word	0x0000c8d4
    1bf8:	20000824 	.word	0x20000824
    1bfc:	20000820 	.word	0x20000820
    1c00:	00001a15 	.word	0x00001a15

00001c04 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    1c04:	b513      	push	{r0, r1, r4, lr}
    1c06:	4809      	ldr	r0, [pc, #36]	; (1c2c <enable_shell_uart+0x28>)
    1c08:	f008 fbf2 	bl	a3f0 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    1c0c:	b158      	cbz	r0, 1c26 <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    1c0e:	4a08      	ldr	r2, [pc, #32]	; (1c30 <enable_shell_uart+0x2c>)
    1c10:	4906      	ldr	r1, [pc, #24]	; (1c2c <enable_shell_uart+0x28>)
    1c12:	6812      	ldr	r2, [r2, #0]
    1c14:	4807      	ldr	r0, [pc, #28]	; (1c34 <enable_shell_uart+0x30>)
    1c16:	2400      	movs	r4, #0
    1c18:	9400      	str	r4, [sp, #0]
    1c1a:	2301      	movs	r3, #1
    1c1c:	f000 fda4 	bl	2768 <shell_init>

	return 0;
    1c20:	4620      	mov	r0, r4
}
    1c22:	b002      	add	sp, #8
    1c24:	bd10      	pop	{r4, pc}
		return -ENODEV;
    1c26:	f06f 0012 	mvn.w	r0, #18
    1c2a:	e7fa      	b.n	1c22 <enable_shell_uart+0x1e>
    1c2c:	0000b18c 	.word	0x0000b18c
    1c30:	0000be38 	.word	0x0000be38
    1c34:	0000b3d8 	.word	0x0000b3d8

00001c38 <init>:
{
    1c38:	b510      	push	{r4, lr}
    1c3a:	4614      	mov	r4, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    1c3c:	6842      	ldr	r2, [r0, #4]
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    1c3e:	6810      	ldr	r0, [r2, #0]
    1c40:	6001      	str	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
    1c42:	6811      	ldr	r1, [r2, #0]
    1c44:	604c      	str	r4, [r1, #4]
	sh_uart->ctrl_blk->context = context;
    1c46:	6811      	ldr	r1, [r2, #0]
    1c48:	608b      	str	r3, [r1, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
    1c4a:	6813      	ldr	r3, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    1c4c:	6891      	ldr	r1, [r2, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
    1c4e:	681c      	ldr	r4, [r3, #0]
 *
 * Any value other than 0 makes sense only in validation testing context.
 */
static inline void ring_buf_internal_reset(struct ring_buf *buf, int32_t value)
{
	buf->put_head = buf->put_tail = buf->put_base = value;
    1c50:	2300      	movs	r3, #0
    1c52:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    1c56:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    1c5a:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    1c5c:	610b      	str	r3, [r1, #16]
	ring_buf_reset(sh_uart->rx_ringbuf);
    1c5e:	68d1      	ldr	r1, [r2, #12]
	buf->put_head = buf->put_tail = buf->put_base = value;
    1c60:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    1c64:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    1c68:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    1c6a:	610b      	str	r3, [r1, #16]
	sh_uart->ctrl_blk->tx_busy = 0;
    1c6c:	6811      	ldr	r1, [r2, #0]
    1c6e:	60cb      	str	r3, [r1, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1c70:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1c72:	b123      	cbz	r3, 1c7e <init+0x46>
    1c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1c76:	b113      	cbz	r3, 1c7e <init+0x46>
		api->irq_callback_set(dev, cb, user_data);
    1c78:	4904      	ldr	r1, [pc, #16]	; (1c8c <init+0x54>)
    1c7a:	4620      	mov	r0, r4
    1c7c:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    1c7e:	68a3      	ldr	r3, [r4, #8]
    1c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c82:	b10b      	cbz	r3, 1c88 <init+0x50>
		api->irq_rx_enable(dev);
    1c84:	4620      	mov	r0, r4
    1c86:	4798      	blx	r3
}
    1c88:	2000      	movs	r0, #0
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	000090e5 	.word	0x000090e5

00001c90 <enable_shell_dummy>:
	.write = write,
	.read = read
};

static int enable_shell_dummy(const struct device *arg)
{
    1c90:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(arg);
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;
	shell_init(&shell_dummy, NULL, cfg_flags, true, LOG_LEVEL_INF);
    1c92:	4a06      	ldr	r2, [pc, #24]	; (1cac <enable_shell_dummy+0x1c>)
    1c94:	4806      	ldr	r0, [pc, #24]	; (1cb0 <enable_shell_dummy+0x20>)
    1c96:	6812      	ldr	r2, [r2, #0]
    1c98:	2303      	movs	r3, #3
    1c9a:	9300      	str	r3, [sp, #0]
    1c9c:	2100      	movs	r1, #0
    1c9e:	2301      	movs	r3, #1
    1ca0:	f000 fd62 	bl	2768 <shell_init>
	return 0;
}
    1ca4:	2000      	movs	r0, #0
    1ca6:	b003      	add	sp, #12
    1ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    1cac:	0000be78 	.word	0x0000be78
    1cb0:	0000b3ac 	.word	0x0000b3ac

00001cb4 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    1cb4:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    1cb6:	6881      	ldr	r1, [r0, #8]
{
    1cb8:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    1cba:	3108      	adds	r1, #8
    1cbc:	f001 fb0e 	bl	32dc <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    1cc0:	68a1      	ldr	r1, [r4, #8]
    1cc2:	4a03      	ldr	r2, [pc, #12]	; (1cd0 <shell_internal_help_print+0x1c>)
    1cc4:	4620      	mov	r0, r4
    1cc6:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    1cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    1ccc:	f001 ba96 	b.w	31fc <z_shell_help_subcmd_print>
    1cd0:	0000ca58 	.word	0x0000ca58

00001cd4 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    1cd4:	4901      	ldr	r1, [pc, #4]	; (1cdc <z_cursor_next_line_move.isra.0+0x8>)
    1cd6:	f007 baf0 	b.w	92ba <z_shell_raw_fprintf>
    1cda:	bf00      	nop
    1cdc:	0000c50a 	.word	0x0000c50a

00001ce0 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    1ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1ce2:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    1ce4:	6880      	ldr	r0, [r0, #8]
    1ce6:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    1cea:	075a      	lsls	r2, r3, #29
{
    1cec:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    1cee:	d505      	bpl.n	1cfc <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    1cf0:	2100      	movs	r1, #0
    1cf2:	f007 fb20 	bl	9336 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    1cf6:	68e0      	ldr	r0, [r4, #12]
    1cf8:	f007 fed5 	bl	9aa6 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    1cfc:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    1cfe:	68db      	ldr	r3, [r3, #12]
    1d00:	b973      	cbnz	r3, 1d20 <history_handle+0x40>
		if (up) {
    1d02:	2d00      	cmp	r5, #0
    1d04:	d039      	beq.n	1d7a <history_handle+0x9a>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    1d06:	68a0      	ldr	r0, [r4, #8]
    1d08:	3042      	adds	r0, #66	; 0x42
    1d0a:	f007 fad0 	bl	92ae <z_shell_strlen>

			if (cmd_len) {
    1d0e:	68a3      	ldr	r3, [r4, #8]
    1d10:	2800      	cmp	r0, #0
    1d12:	d034      	beq.n	1d7e <history_handle+0x9e>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    1d14:	f103 0142 	add.w	r1, r3, #66	; 0x42
    1d18:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    1d1c:	f008 ff34 	bl	ab88 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    1d20:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    1d22:	68e0      	ldr	r0, [r4, #12]
    1d24:	f10d 0306 	add.w	r3, sp, #6
    1d28:	3242      	adds	r2, #66	; 0x42
    1d2a:	4629      	mov	r1, r5
    1d2c:	f007 febe 	bl	9aac <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    1d30:	b958      	cbnz	r0, 1d4a <history_handle+0x6a>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    1d32:	68a0      	ldr	r0, [r4, #8]
    1d34:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    1d38:	3042      	adds	r0, #66	; 0x42
    1d3a:	f008 ff25 	bl	ab88 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    1d3e:	68a0      	ldr	r0, [r4, #8]
    1d40:	3042      	adds	r0, #66	; 0x42
    1d42:	f007 fab4 	bl	92ae <z_shell_strlen>
    1d46:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    1d4a:	4620      	mov	r0, r4
    1d4c:	f007 fcf9 	bl	9742 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    1d50:	68a3      	ldr	r3, [r4, #8]
    1d52:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    1d56:	069b      	lsls	r3, r3, #26
    1d58:	d503      	bpl.n	1d62 <history_handle+0x82>
    1d5a:	490a      	ldr	r1, [pc, #40]	; (1d84 <history_handle+0xa4>)
    1d5c:	6960      	ldr	r0, [r4, #20]
    1d5e:	f007 faac 	bl	92ba <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    1d62:	4620      	mov	r0, r4
    1d64:	f001 f8a4 	bl	2eb0 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    1d68:	68a2      	ldr	r2, [r4, #8]
    1d6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1d6e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    1d70:	68a2      	ldr	r2, [r4, #8]
	z_shell_op_cond_next_line(shell);
    1d72:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_len = len;
    1d74:	8793      	strh	r3, [r2, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    1d76:	f007 fc8d 	bl	9694 <z_shell_op_cond_next_line>
}
    1d7a:	b003      	add	sp, #12
    1d7c:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    1d7e:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    1d82:	e7cd      	b.n	1d20 <history_handle+0x40>
    1d84:	0000bc25 	.word	0x0000bc25

00001d88 <state_set.constprop.0>:
static inline void state_set(const struct shell *shell, enum shell_state state)
    1d88:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    1d8a:	6883      	ldr	r3, [r0, #8]
    1d8c:	2202      	movs	r2, #2
    1d8e:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    1d90:	6882      	ldr	r2, [r0, #8]
    1d92:	6b93      	ldr	r3, [r2, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    1d94:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    1d96:	b9db      	cbnz	r3, 1dd0 <state_set.constprop.0+0x48>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    1d98:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_pos = 0;
    1d9c:	6882      	ldr	r2, [r0, #8]
    1d9e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
    1da0:	6882      	ldr	r2, [r0, #8]
    1da2:	8793      	strh	r3, [r2, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    1da4:	6883      	ldr	r3, [r0, #8]
    1da6:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    1daa:	04db      	lsls	r3, r3, #19
    1dac:	d50b      	bpl.n	1dc6 <state_set.constprop.0+0x3e>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    1dae:	2103      	movs	r1, #3
    1db0:	4b08      	ldr	r3, [pc, #32]	; (1dd4 <state_set.constprop.0+0x4c>)
    1db2:	4a09      	ldr	r2, [pc, #36]	; (1dd8 <state_set.constprop.0+0x50>)
    1db4:	f007 fd73 	bl	989e <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    1db8:	68a0      	ldr	r0, [r4, #8]
    1dba:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    1dbe:	f500 7019 	add.w	r0, r0, #612	; 0x264
    1dc2:	f007 fa4f 	bl	9264 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    1dc6:	4620      	mov	r0, r4
}
    1dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    1dcc:	f001 b986 	b.w	30dc <z_shell_print_prompt_and_cmd>
}
    1dd0:	bd10      	pop	{r4, pc}
    1dd2:	bf00      	nop
    1dd4:	0000ca66 	.word	0x0000ca66
    1dd8:	0000c6da 	.word	0x0000c6da

00001ddc <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    1ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de0:	b0a7      	sub	sp, #156	; 0x9c
    1de2:	4604      	mov	r4, r0
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1] = {0}; /* +1 reserved for NULL */
    1de4:	2254      	movs	r2, #84	; 0x54
    1de6:	2100      	movs	r1, #0
    1de8:	a811      	add	r0, sp, #68	; 0x44
    1dea:	f008 feaf 	bl	ab4c <memset>
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    1dee:	2300      	movs	r3, #0
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    1df0:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    1df4:	68a3      	ldr	r3, [r4, #8]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    1df6:	4620      	mov	r0, r4
	char *cmd_buf = shell->ctx->cmd_buff;
    1df8:	3342      	adds	r3, #66	; 0x42
    1dfa:	9302      	str	r3, [sp, #8]
	z_shell_op_cursor_end_move(shell);
    1dfc:	f007 fca7 	bl	974e <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    1e00:	4620      	mov	r0, r4
    1e02:	f007 fc2e 	bl	9662 <z_shell_cursor_in_empty_line>
    1e06:	b910      	cbnz	r0, 1e0e <execute+0x32>
		z_cursor_next_line_move(shell);
    1e08:	6960      	ldr	r0, [r4, #20]
    1e0a:	f7ff ff63 	bl	1cd4 <z_cursor_next_line_move.isra.0>
__ssp_bos_icheck3(memset, void *, int)
    1e0e:	68a0      	ldr	r0, [r4, #8]
    1e10:	2214      	movs	r2, #20
    1e12:	2100      	movs	r1, #0
    1e14:	3008      	adds	r0, #8
    1e16:	f008 fe99 	bl	ab4c <memset>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    1e1a:	4620      	mov	r0, r4
    1e1c:	f000 ff96 	bl	2d4c <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    1e20:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    1e22:	68e0      	ldr	r0, [r4, #12]
    1e24:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    1e26:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    1e28:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    1e2a:	f007 fe76 	bl	9b1a <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    1e2e:	4620      	mov	r0, r4
    1e30:	f007 fef5 	bl	9c1e <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    1e34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    1e38:	46b2      	mov	sl, r6
		z_shell_wildcard_prepare(shell);
    1e3a:	9603      	str	r6, [sp, #12]
    1e3c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
    1e40:	46b3      	mov	fp, r6
    1e42:	4635      	mov	r5, r6
    1e44:	46b1      	mov	r9, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
		&& args_left > 0) {
    1e46:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    1e4a:	2a01      	cmp	r2, #1
    1e4c:	d06d      	beq.n	1f2a <execute+0x14e>
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    1e4e:	2b13      	cmp	r3, #19
    1e50:	d86e      	bhi.n	1f30 <execute+0x154>
		&& args_left > 0) {
    1e52:	bb5f      	cbnz	r7, 1eac <execute+0xd0>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
				SHELL_MSG_TOO_MANY_ARGS);
		return -ENOEXEC;
	}

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    1e54:	f1bb 0f00 	cmp.w	fp, #0
    1e58:	d00a      	beq.n	1e70 <execute+0x94>
		z_shell_wildcard_finalize(shell);
    1e5a:	4620      	mov	r0, r4
    1e5c:	f007 ff00 	bl	9c60 <z_shell_wildcard_finalize>
		 * with all expanded commands. Hence shell_make_argv needs to
		 * be called again.
		 */
		(void)z_shell_make_argv(&cmd_lvl,
					&argv[selected_cmd_get(shell) ? 1 : 0],
					shell->ctx->cmd_buff,
    1e60:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    1e62:	2314      	movs	r3, #20
    1e64:	3242      	adds	r2, #66	; 0x42
    1e66:	a911      	add	r1, sp, #68	; 0x44
    1e68:	eb0d 0003 	add.w	r0, sp, r3
    1e6c:	f000 fe22 	bl	2ab4 <z_shell_make_argv>
			cmd_lvl++;
		}
	}

	/* If a command was found */
	if (parent != NULL) {
    1e70:	f1b9 0f00 	cmp.w	r9, #0
    1e74:	d00c      	beq.n	1e90 <execute+0xb4>
		/* If the found command uses a raw optional argument and
		 * we have a remaining unprocessed non-null string,
		 * then increment command level so handler receives raw string
		 */
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
    1e76:	f899 3011 	ldrb.w	r3, [r9, #17]
    1e7a:	2bfe      	cmp	r3, #254	; 0xfe
    1e7c:	d108      	bne.n	1e90 <execute+0xb4>
    1e7e:	9b05      	ldr	r3, [sp, #20]
    1e80:	aa26      	add	r2, sp, #152	; 0x98
    1e82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1e86:	f852 2c54 	ldr.w	r2, [r2, #-84]
    1e8a:	b10a      	cbz	r2, 1e90 <execute+0xb4>
			cmd_lvl++;
    1e8c:	3301      	adds	r3, #1
    1e8e:	9305      	str	r3, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    1e90:	68a0      	ldr	r0, [r4, #8]
		}
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    1e92:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    1e94:	6943      	ldr	r3, [r0, #20]
    1e96:	2b00      	cmp	r3, #0
    1e98:	f040 80b6 	bne.w	2008 <execute+0x22c>
			if (help_entry->help == NULL) {
    1e9c:	b1ce      	cbz	r6, 1ed2 <execute+0xf6>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    1e9e:	68c3      	ldr	r3, [r0, #12]
    1ea0:	429e      	cmp	r6, r3
    1ea2:	d02d      	beq.n	1f00 <execute+0x124>
				shell->ctx->active_cmd = *help_entry;
    1ea4:	960d      	str	r6, [sp, #52]	; 0x34
    1ea6:	f100 0508 	add.w	r5, r0, #8
    1eaa:	e024      	b.n	1ef6 <execute+0x11a>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    1eac:	9a02      	ldr	r2, [sp, #8]
    1eae:	2302      	movs	r3, #2
    1eb0:	4641      	mov	r1, r8
    1eb2:	a806      	add	r0, sp, #24
    1eb4:	f000 fdfe 	bl	2ab4 <z_shell_make_argv>
		if (argc == 0) {
    1eb8:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    1eba:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1ebe:	9202      	str	r2, [sp, #8]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    1ec0:	4603      	mov	r3, r0
		if (argc == 0) {
    1ec2:	b131      	cbz	r1, 1ed2 <execute+0xf6>
		} else if ((argc == 1) && (quote != 0)) {
    1ec4:	2901      	cmp	r1, #1
    1ec6:	d10a      	bne.n	1ede <execute+0x102>
    1ec8:	b148      	cbz	r0, 1ede <execute+0x102>
			z_shell_fprintf(shell, SHELL_ERROR,
    1eca:	4a6f      	ldr	r2, [pc, #444]	; (2088 <execute+0x2ac>)
    1ecc:	4620      	mov	r0, r4
    1ece:	f007 fce6 	bl	989e <z_shell_fprintf>
			return -ENOEXEC;
    1ed2:	f06f 0507 	mvn.w	r5, #7
			&argv[cmd_with_handler_lvl], &help_entry);
}
    1ed6:	4628      	mov	r0, r5
    1ed8:	b027      	add	sp, #156	; 0x9c
    1eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    1ede:	9b05      	ldr	r3, [sp, #20]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d034      	beq.n	1f4e <execute+0x172>
		    z_shell_help_request(argvp[0])) {
    1ee4:	f8d8 0000 	ldr.w	r0, [r8]
    1ee8:	f001 fa1c 	bl	3324 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    1eec:	b198      	cbz	r0, 1f16 <execute+0x13a>
			if (help_entry.help) {
    1eee:	b166      	cbz	r6, 1f0a <execute+0x12e>
				shell->ctx->active_cmd = help_entry;
    1ef0:	68a5      	ldr	r5, [r4, #8]
    1ef2:	960d      	str	r6, [sp, #52]	; 0x34
    1ef4:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    1ef6:	ae0c      	add	r6, sp, #48	; 0x30
    1ef8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1efc:	6833      	ldr	r3, [r6, #0]
    1efe:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    1f00:	4620      	mov	r0, r4
    1f02:	f7ff fed7 	bl	1cb4 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    1f06:	2501      	movs	r5, #1
    1f08:	e7e5      	b.n	1ed6 <execute+0xfa>
			z_shell_fprintf(shell, SHELL_ERROR,
    1f0a:	4a60      	ldr	r2, [pc, #384]	; (208c <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
    1f0c:	2101      	movs	r1, #1
    1f0e:	4620      	mov	r0, r4
    1f10:	f007 fcc5 	bl	989e <z_shell_fprintf>
		return false;
    1f14:	e7dd      	b.n	1ed2 <execute+0xf6>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    1f16:	9b05      	ldr	r3, [sp, #20]
    1f18:	b1cb      	cbz	r3, 1f4e <execute+0x172>
			status = z_shell_wildcard_process(shell, entry,
    1f1a:	f8d8 2000 	ldr.w	r2, [r8]
    1f1e:	4629      	mov	r1, r5
    1f20:	4620      	mov	r0, r4
    1f22:	f001 fb99 	bl	3658 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    1f26:	2802      	cmp	r0, #2
    1f28:	d109      	bne.n	1f3e <execute+0x162>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    1f2a:	9b05      	ldr	r3, [sp, #20]
    1f2c:	2b13      	cmp	r3, #19
    1f2e:	d991      	bls.n	1e54 <execute+0x78>
    1f30:	9b06      	ldr	r3, [sp, #24]
    1f32:	2b02      	cmp	r3, #2
    1f34:	d18e      	bne.n	1e54 <execute+0x78>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    1f36:	4b56      	ldr	r3, [pc, #344]	; (2090 <execute+0x2b4>)
    1f38:	4a56      	ldr	r2, [pc, #344]	; (2094 <execute+0x2b8>)
    1f3a:	2101      	movs	r1, #1
    1f3c:	e7c6      	b.n	1ecc <execute+0xf0>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    1f3e:	2803      	cmp	r0, #3
    1f40:	d005      	beq.n	1f4e <execute+0x172>
				++cmd_lvl;
    1f42:	9b05      	ldr	r3, [sp, #20]
    1f44:	3301      	adds	r3, #1
    1f46:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    1f48:	f04f 0b01 	mov.w	fp, #1
				continue;
    1f4c:	e77b      	b.n	1e46 <execute+0x6a>
		if (has_last_handler == false) {
    1f4e:	9b03      	ldr	r3, [sp, #12]
    1f50:	b933      	cbnz	r3, 1f60 <execute+0x184>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    1f52:	f8d8 1000 	ldr.w	r1, [r8]
    1f56:	aa07      	add	r2, sp, #28
    1f58:	4648      	mov	r0, r9
    1f5a:	f007 fadb 	bl	9514 <z_shell_find_cmd>
    1f5e:	4605      	mov	r5, r0
		argvp++;
    1f60:	f108 0804 	add.w	r8, r8, #4
		args_left--;
    1f64:	3f01      	subs	r7, #1
		if (entry) {
    1f66:	b39d      	cbz	r5, 1fd0 <execute+0x1f4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    1f68:	68eb      	ldr	r3, [r5, #12]
    1f6a:	f1bb 0f00 	cmp.w	fp, #0
    1f6e:	d008      	beq.n	1f82 <execute+0x1a6>
    1f70:	b1f3      	cbz	r3, 1fb0 <execute+0x1d4>
		z_shell_op_cursor_end_move(shell);
    1f72:	4620      	mov	r0, r4
    1f74:	f007 fbeb 	bl	974e <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    1f78:	4620      	mov	r0, r4
    1f7a:	f007 fb8b 	bl	9694 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    1f7e:	4a46      	ldr	r2, [pc, #280]	; (2098 <execute+0x2bc>)
    1f80:	e7c4      	b.n	1f0c <execute+0x130>
	if (entry->handler) {
    1f82:	b1ab      	cbz	r3, 1fb0 <execute+0x1d4>
			active_cmd_prepare(entry, &shell->ctx->active_cmd,
    1f84:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    1f86:	f8dd a014 	ldr.w	sl, [sp, #20]
		*active_cmd = *entry;
    1f8a:	46ae      	mov	lr, r5
    1f8c:	f103 0c08 	add.w	ip, r3, #8
    1f90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1f94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1f98:	f8de 3000 	ldr.w	r3, [lr]
    1f9c:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    1fa0:	68ab      	ldr	r3, [r5, #8]
    1fa2:	b92b      	cbnz	r3, 1fb0 <execute+0x1d4>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    1fa4:	7c6b      	ldrb	r3, [r5, #17]
    1fa6:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    1fa8:	bf04      	itt	eq
    1faa:	7c2f      	ldrbeq	r7, [r5, #16]
    1fac:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
	if (entry->help) {
    1fb0:	f8d5 c004 	ldr.w	ip, [r5, #4]
    1fb4:	f1bc 0f00 	cmp.w	ip, #0
    1fb8:	d008      	beq.n	1fcc <execute+0x1f0>
		*help_entry = *entry;
    1fba:	46ae      	mov	lr, r5
    1fbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1fc0:	ae0c      	add	r6, sp, #48	; 0x30
    1fc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1fc4:	f8de 3000 	ldr.w	r3, [lr]
    1fc8:	6033      	str	r3, [r6, #0]
    1fca:	4666      	mov	r6, ip
    1fcc:	46a9      	mov	r9, r5
    1fce:	e003      	b.n	1fd8 <execute+0x1fc>
			if (cmd_lvl == 0 &&
    1fd0:	9b05      	ldr	r3, [sp, #20]
    1fd2:	b153      	cbz	r3, 1fea <execute+0x20e>
			has_last_handler = true;
    1fd4:	2301      	movs	r3, #1
    1fd6:	9303      	str	r3, [sp, #12]
		if (args_left || (argc == 2)) {
    1fd8:	9b06      	ldr	r3, [sp, #24]
    1fda:	b917      	cbnz	r7, 1fe2 <execute+0x206>
    1fdc:	2b02      	cmp	r3, #2
    1fde:	f47f af32 	bne.w	1e46 <execute+0x6a>
			cmd_lvl++;
    1fe2:	9b05      	ldr	r3, [sp, #20]
    1fe4:	3301      	adds	r3, #1
    1fe6:	9305      	str	r3, [sp, #20]
    1fe8:	e72d      	b.n	1e46 <execute+0x6a>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    1fea:	68a3      	ldr	r3, [r4, #8]
    1fec:	69db      	ldr	r3, [r3, #28]
			if (cmd_lvl == 0 &&
    1fee:	b113      	cbz	r3, 1ff6 <execute+0x21a>
				(!z_shell_in_select_mode(shell) ||
    1ff0:	68db      	ldr	r3, [r3, #12]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d1ee      	bne.n	1fd4 <execute+0x1f8>
				z_shell_fprintf(shell, SHELL_ERROR,
    1ff6:	4b29      	ldr	r3, [pc, #164]	; (209c <execute+0x2c0>)
    1ff8:	9300      	str	r3, [sp, #0]
    1ffa:	4a29      	ldr	r2, [pc, #164]	; (20a0 <execute+0x2c4>)
    1ffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1ffe:	2101      	movs	r1, #1
    2000:	4620      	mov	r0, r4
    2002:	f007 fc4c 	bl	989e <z_shell_fprintf>
    2006:	e7e5      	b.n	1fd4 <execute+0x1f8>
	if (shell->ctx->active_cmd.args.mandatory) {
    2008:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    200a:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
    200e:	b1b3      	cbz	r3, 203e <execute+0x262>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    2010:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    2012:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2016:	29ff      	cmp	r1, #255	; 0xff
    2018:	bf18      	it	ne
    201a:	460a      	movne	r2, r1
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
    201c:	429d      	cmp	r5, r3
    201e:	d302      	bcc.n	2026 <execute+0x24a>
    2020:	4413      	add	r3, r2
    2022:	429d      	cmp	r5, r3
    2024:	d90b      	bls.n	203e <execute+0x262>
		z_shell_fprintf(shell, SHELL_ERROR,
    2026:	6883      	ldr	r3, [r0, #8]
    2028:	4a1e      	ldr	r2, [pc, #120]	; (20a4 <execute+0x2c8>)
    202a:	2101      	movs	r1, #1
    202c:	4620      	mov	r0, r4
    202e:	f007 fc36 	bl	989e <z_shell_fprintf>
			shell_internal_help_print(shell);
    2032:	4620      	mov	r0, r4
    2034:	f7ff fe3e 	bl	1cb4 <shell_internal_help_print>
		return -EINVAL;
    2038:	f06f 0515 	mvn.w	r5, #21
    203c:	e74b      	b.n	1ed6 <execute+0xfa>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    203e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2042:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2046:	f007 f8fe 	bl	9246 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    204a:	68a0      	ldr	r0, [r4, #8]
    204c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2050:	f007 f98a 	bl	9368 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    2054:	68a3      	ldr	r3, [r4, #8]
    2056:	aa11      	add	r2, sp, #68	; 0x44
    2058:	4629      	mov	r1, r5
    205a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
    205e:	695b      	ldr	r3, [r3, #20]
    2060:	4620      	mov	r0, r4
    2062:	4798      	blx	r3
    2064:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2066:	68a0      	ldr	r0, [r4, #8]
    2068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    206c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2070:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2074:	f007 f92e 	bl	92d4 <k_mutex_lock.constprop.0.isra.0>
    2078:	68a0      	ldr	r0, [r4, #8]
    207a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    207e:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2082:	f007 f8ef 	bl	9264 <atomic_and>
	return ret;
    2086:	e726      	b.n	1ed6 <execute+0xfa>
    2088:	0000caaa 	.word	0x0000caaa
    208c:	0000cabe 	.word	0x0000cabe
    2090:	0000cb1f 	.word	0x0000cb1f
    2094:	0000c6e6 	.word	0x0000c6e6
    2098:	0000cadc 	.word	0x0000cadc
    209c:	0000cb0b 	.word	0x0000cb0b
    20a0:	0000cdbe 	.word	0x0000cdbe
    20a4:	0000cb43 	.word	0x0000cb43

000020a8 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    20a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20ac:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    20ae:	6880      	ldr	r0, [r0, #8]
    20b0:	b0b1      	sub	sp, #196	; 0xc4
    20b2:	2101      	movs	r1, #1
    20b4:	f500 7019 	add.w	r0, r0, #612	; 0x264
    20b8:	f007 f8c5 	bl	9246 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    20bc:	68a3      	ldr	r3, [r4, #8]
    20be:	791b      	ldrb	r3, [r3, #4]
    20c0:	2b02      	cmp	r3, #2
    20c2:	d117      	bne.n	20f4 <shell_process+0x4c>
	size_t count = 0;
    20c4:	2300      	movs	r3, #0
    20c6:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    20c8:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    20ca:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    20cc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    20ce:	6803      	ldr	r3, [r0, #0]
    20d0:	691d      	ldr	r5, [r3, #16]
    20d2:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
    20d4:	b1c6      	cbz	r6, 2108 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    20d6:	2210      	movs	r2, #16
    20d8:	a91b      	add	r1, sp, #108	; 0x6c
    20da:	47a8      	blx	r5
			if (count) {
    20dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    20de:	b14a      	cbz	r2, 20f4 <shell_process+0x4c>
				bypass(shell, buf, count);
    20e0:	a91b      	add	r1, sp, #108	; 0x6c
    20e2:	4620      	mov	r0, r4
    20e4:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    20e6:	68a3      	ldr	r3, [r4, #8]
    20e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    20ea:	2b00      	cmp	r3, #0
    20ec:	d1ec      	bne.n	20c8 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    20ee:	4620      	mov	r0, r4
    20f0:	f7ff fe4a 	bl	1d88 <state_set.constprop.0>
    20f4:	68a0      	ldr	r0, [r4, #8]
    20f6:	f06f 0101 	mvn.w	r1, #1
    20fa:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    20fe:	b031      	add	sp, #196	; 0xc4
    2100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2104:	f007 b8ae 	b.w	9264 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    2108:	2201      	movs	r2, #1
    210a:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    210e:	47a8      	blx	r5
		if (count == 0) {
    2110:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2112:	2b00      	cmp	r3, #0
    2114:	d0ee      	beq.n	20f4 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2116:	f99d 1023 	ldrsb.w	r1, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
    211a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
		switch (shell->ctx->receive_state) {
    211e:	68a2      	ldr	r2, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2120:	2900      	cmp	r1, #0
    2122:	dbd1      	blt.n	20c8 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    2124:	7951      	ldrb	r1, [r2, #5]
    2126:	2903      	cmp	r1, #3
    2128:	f200 830f 	bhi.w	274a <shell_process+0x6a2>
    212c:	e8df f011 	tbh	[pc, r1, lsl #1]
    2130:	028f0004 	.word	0x028f0004
    2134:	030d02a7 	.word	0x030d02a7
	if ((data != '\r') && (data != '\n')) {
    2138:	2b0d      	cmp	r3, #13
    213a:	d054      	beq.n	21e6 <shell_process+0x13e>
    213c:	2b0a      	cmp	r3, #10
    213e:	d032      	beq.n	21a6 <shell_process+0xfe>
	sh->ctx->ctx.flags.last_nl = val;
    2140:	f8b2 1264 	ldrh.w	r1, [r2, #612]	; 0x264
    2144:	f36f 01ca 	bfc	r1, #3, #8
    2148:	f8a2 1264 	strh.w	r1, [r2, #612]	; 0x264
			switch (data) {
    214c:	2b09      	cmp	r3, #9
    214e:	68a0      	ldr	r0, [r4, #8]
    2150:	d05c      	beq.n	220c <shell_process+0x164>
    2152:	d813      	bhi.n	217c <shell_process+0xd4>
    2154:	2b00      	cmp	r3, #0
    2156:	d0b7      	beq.n	20c8 <shell_process+0x20>
    2158:	2b08      	cmp	r3, #8
    215a:	f000 81d8 	beq.w	250e <shell_process+0x466>
				if (isprint((int) data)) {
    215e:	1c5a      	adds	r2, r3, #1
    2160:	4986      	ldr	r1, [pc, #536]	; (237c <shell_process+0x2d4>)
    2162:	68a0      	ldr	r0, [r4, #8]
    2164:	b2d2      	uxtb	r2, r2
    2166:	5c8a      	ldrb	r2, [r1, r2]
    2168:	f012 0f97 	tst.w	r2, #151	; 0x97
    216c:	f000 81db 	beq.w	2526 <shell_process+0x47e>
					z_flag_history_exit_set(shell, true);
    2170:	2101      	movs	r1, #1
    2172:	f007 f8e0 	bl	9336 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    2176:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
    217a:	e0f5      	b.n	2368 <shell_process+0x2c0>
    217c:	2b1b      	cmp	r3, #27
    217e:	d042      	beq.n	2206 <shell_process+0x15e>
    2180:	2b7f      	cmp	r3, #127	; 0x7f
    2182:	d1ec      	bne.n	215e <shell_process+0xb6>
	return sh->ctx->cfg.flags.echo == 1;
    2184:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    2188:	079d      	lsls	r5, r3, #30
    218a:	d59d      	bpl.n	20c8 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    218c:	2101      	movs	r1, #1
    218e:	f007 f8d2 	bl	9336 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    2192:	68a3      	ldr	r3, [r4, #8]
    2194:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    2198:	0719      	lsls	r1, r3, #28
    219a:	f100 81c0 	bmi.w	251e <shell_process+0x476>
		z_shell_op_char_delete(shell);
    219e:	4620      	mov	r0, r4
    21a0:	f007 fbbf 	bl	9922 <z_shell_op_char_delete>
		break;
    21a4:	e790      	b.n	20c8 <shell_process+0x20>
	return sh->ctx->ctx.flags.last_nl;
    21a6:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
    21aa:	f3c1 01c7 	ubfx	r1, r1, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    21ae:	b129      	cbz	r1, 21bc <shell_process+0x114>
    21b0:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
    21b4:	f3c1 01c7 	ubfx	r1, r1, #3, #8
    21b8:	290a      	cmp	r1, #10
    21ba:	d1d0      	bne.n	215e <shell_process+0xb6>
	sh->ctx->ctx.flags.last_nl = val;
    21bc:	f8b2 1264 	ldrh.w	r1, [r2, #612]	; 0x264
    21c0:	f363 01ca 	bfi	r1, r3, #3, #8
    21c4:	f8a2 1264 	strh.w	r1, [r2, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    21c8:	68a0      	ldr	r0, [r4, #8]
    21ca:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    21cc:	b9b9      	cbnz	r1, 21fe <shell_process+0x156>
	z_flag_history_exit_set(shell, false);
    21ce:	f007 f8b2 	bl	9336 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    21d2:	68e0      	ldr	r0, [r4, #12]
    21d4:	f007 fc67 	bl	9aa6 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    21d8:	6960      	ldr	r0, [r4, #20]
    21da:	f7ff fd7b 	bl	1cd4 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    21de:	4620      	mov	r0, r4
    21e0:	f7ff fdd2 	bl	1d88 <state_set.constprop.0>
		break;
    21e4:	e770      	b.n	20c8 <shell_process+0x20>
	return sh->ctx->ctx.flags.last_nl;
    21e6:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
    21ea:	f3c1 01c7 	ubfx	r1, r1, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    21ee:	2900      	cmp	r1, #0
    21f0:	d0e4      	beq.n	21bc <shell_process+0x114>
    21f2:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
    21f6:	f3c1 01c7 	ubfx	r1, r1, #3, #8
    21fa:	290d      	cmp	r1, #13
    21fc:	e7dd      	b.n	21ba <shell_process+0x112>
					(void)execute(shell);
    21fe:	4620      	mov	r0, r4
    2200:	f7ff fdec 	bl	1ddc <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    2204:	e7eb      	b.n	21de <shell_process+0x136>
	shell->ctx->receive_state = state;
    2206:	2301      	movs	r3, #1
    2208:	7143      	strb	r3, [r0, #5]
}
    220a:	e75d      	b.n	20c8 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    220c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    2210:	079a      	lsls	r2, r3, #30
    2212:	f57f af59 	bpl.w	20c8 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2216:	2101      	movs	r1, #1
    2218:	f007 f88d 	bl	9336 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    221c:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    221e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    2220:	2bff      	cmp	r3, #255	; 0xff
    2222:	f43f af51 	beq.w	20c8 <shell_process+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2226:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2228:	f100 0142 	add.w	r1, r0, #66	; 0x42
    222c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    2230:	f008 fc64 	bl	aafc <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2234:	68a3      	ldr	r3, [r4, #8]
    2236:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    2238:	4413      	add	r3, r2
    223a:	2500      	movs	r5, #0
    223c:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2240:	68a2      	ldr	r2, [r4, #8]
    2242:	a91b      	add	r1, sp, #108	; 0x6c
    2244:	2314      	movs	r3, #20
    2246:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    224a:	a80b      	add	r0, sp, #44	; 0x2c
    224c:	f000 fc32 	bl	2ab4 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    2250:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2252:	2914      	cmp	r1, #20
    2254:	f63f af38 	bhi.w	20c8 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    2258:	ab30      	add	r3, sp, #192	; 0xc0
    225a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	int space = isspace((int)shell->ctx->cmd_buff[
    225e:	f8df a120 	ldr.w	sl, [pc, #288]	; 2380 <shell_process+0x2d8>
	(*argv)[*argc] = NULL;
    2262:	f843 5c54 	str.w	r5, [r3, #-84]
	int space = isspace((int)shell->ctx->cmd_buff[
    2266:	68a3      	ldr	r3, [r4, #8]
    2268:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    226a:	4413      	add	r3, r2
    226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    2270:	f81a 3003 	ldrb.w	r3, [sl, r3]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    2274:	b119      	cbz	r1, 227e <shell_process+0x1d6>
    2276:	071b      	lsls	r3, r3, #28
    2278:	d451      	bmi.n	231e <shell_process+0x276>
    227a:	2901      	cmp	r1, #1
    227c:	d14e      	bne.n	231c <shell_process+0x274>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    227e:	2500      	movs	r5, #0
    2280:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2284:	aa30      	add	r2, sp, #192	; 0xc0
    2286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    228a:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    228c:	f853 bc54 	ldr.w	fp, [r3, #-84]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2290:	4658      	mov	r0, fp
    2292:	f007 f80c 	bl	92ae <z_shell_strlen>
	size_t first = 0;
    2296:	4637      	mov	r7, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2298:	9002      	str	r0, [sp, #8]
	*longest = 0U;
    229a:	9603      	str	r6, [sp, #12]
	size_t idx = 0;
    229c:	46b0      	mov	r8, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    229e:	aa16      	add	r2, sp, #88	; 0x58
    22a0:	4641      	mov	r1, r8
    22a2:	4628      	mov	r0, r5
    22a4:	f000 fce2 	bl	2c6c <z_shell_cmd_get>
    22a8:	4681      	mov	r9, r0
    22aa:	2800      	cmp	r0, #0
    22ac:	d143      	bne.n	2336 <shell_process+0x28e>
	if (cnt == 1) {
    22ae:	2e01      	cmp	r6, #1
    22b0:	d168      	bne.n	2384 <shell_process+0x2dc>
		autocomplete(shell, cmd, argv[arg_idx], first);
    22b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22b4:	aa30      	add	r2, sp, #192	; 0xc0
    22b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    22ba:	f853 0c54 	ldr.w	r0, [r3, #-84]
    22be:	f006 fff6 	bl	92ae <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    22c2:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    22c4:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    22c6:	3208      	adds	r2, #8
    22c8:	4639      	mov	r1, r7
    22ca:	4628      	mov	r0, r5
    22cc:	f000 fcce 	bl	2c6c <z_shell_cmd_get>
    22d0:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    22d2:	6800      	ldr	r0, [r0, #0]
    22d4:	f006 ffeb 	bl	92ae <z_shell_strlen>
	if (cmd_len != arg_len) {
    22d8:	4286      	cmp	r6, r0
    22da:	d006      	beq.n	22ea <shell_process+0x242>
		z_shell_op_completion_insert(shell,
    22dc:	6829      	ldr	r1, [r5, #0]
    22de:	1b82      	subs	r2, r0, r6
    22e0:	b292      	uxth	r2, r2
    22e2:	4431      	add	r1, r6
    22e4:	4620      	mov	r0, r4
    22e6:	f007 fb1a 	bl	991e <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    22ea:	68a0      	ldr	r0, [r4, #8]
    22ec:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    22ee:	4403      	add	r3, r0
    22f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    22f4:	f81a 1003 	ldrb.w	r1, [sl, r3]
    22f8:	f011 0108 	ands.w	r1, r1, #8
    22fc:	d138      	bne.n	2370 <shell_process+0x2c8>
	return sh->ctx->cfg.flags.insert_mode == 1;
    22fe:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    2302:	07df      	lsls	r7, r3, #31
    2304:	d52f      	bpl.n	2366 <shell_process+0x2be>
			z_flag_insert_mode_set(shell, false);
    2306:	f007 f820 	bl	934a <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    230a:	2120      	movs	r1, #32
    230c:	4620      	mov	r0, r4
    230e:	f000 feaf 	bl	3070 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    2312:	68a0      	ldr	r0, [r4, #8]
    2314:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    2316:	f007 f818 	bl	934a <z_flag_insert_mode_set.isra.0>
				break;
    231a:	e6d5      	b.n	20c8 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    231c:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    231e:	2000      	movs	r0, #0
    2320:	ab0c      	add	r3, sp, #48	; 0x30
    2322:	9300      	str	r3, [sp, #0]
    2324:	9001      	str	r0, [sp, #4]
    2326:	ab0a      	add	r3, sp, #40	; 0x28
    2328:	aa1b      	add	r2, sp, #108	; 0x6c
    232a:	f007 f91e 	bl	956a <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    232e:	4605      	mov	r5, r0
    2330:	2800      	cmp	r0, #0
    2332:	d1a6      	bne.n	2282 <shell_process+0x1da>
    2334:	e6c8      	b.n	20c8 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2336:	9a02      	ldr	r2, [sp, #8]
    2338:	f8d9 0000 	ldr.w	r0, [r9]
    233c:	4659      	mov	r1, fp
    233e:	f008 fc2b 	bl	ab98 <strncmp>
		if (is_candidate) {
    2342:	b968      	cbnz	r0, 2360 <shell_process+0x2b8>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2344:	f8d9 0000 	ldr.w	r0, [r9]
    2348:	f7fe f8aa 	bl	4a0 <strlen>
    234c:	9b03      	ldr	r3, [sp, #12]
    234e:	4283      	cmp	r3, r0
    2350:	bf38      	it	cc
    2352:	4603      	movcc	r3, r0
    2354:	b29b      	uxth	r3, r3
				*first_idx = idx;
    2356:	2e00      	cmp	r6, #0
    2358:	bf08      	it	eq
    235a:	4647      	moveq	r7, r8
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    235c:	9303      	str	r3, [sp, #12]
			(*cnt)++;
    235e:	3601      	adds	r6, #1
		idx++;
    2360:	f108 0801 	add.w	r8, r8, #1
    2364:	e79b      	b.n	229e <shell_process+0x1f6>
			z_shell_op_char_insert(shell, ' ');
    2366:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    2368:	4620      	mov	r0, r4
    236a:	f000 fe81 	bl	3070 <z_shell_op_char_insert>
    236e:	e6ab      	b.n	20c8 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    2370:	2101      	movs	r1, #1
    2372:	4620      	mov	r0, r4
    2374:	f007 f9c1 	bl	96fa <z_shell_op_cursor_move>
    2378:	e6a6      	b.n	20c8 <shell_process+0x20>
    237a:	bf00      	nop
    237c:	0000d4be 	.word	0x0000d4be
    2380:	0000d4bf 	.word	0x0000d4bf
	} else if (cnt > 1) {
    2384:	f67f aea0 	bls.w	20c8 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    238a:	ab30      	add	r3, sp, #192	; 0xc0
    238c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2390:	46ba      	mov	sl, r7
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2392:	f852 3c54 	ldr.w	r3, [r2, #-84]
    2396:	9302      	str	r3, [sp, #8]
	size_t str_len = z_shell_strlen(str);
    2398:	4618      	mov	r0, r3
    239a:	f006 ff88 	bl	92ae <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    239e:	68a2      	ldr	r2, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    23a0:	9005      	str	r0, [sp, #20]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    23a2:	f8a2 9030 	strh.w	r9, [r2, #48]	; 0x30
    23a6:	9604      	str	r6, [sp, #16]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    23a8:	68a2      	ldr	r2, [r4, #8]
    23aa:	4651      	mov	r1, sl
    23ac:	3208      	adds	r2, #8
    23ae:	4628      	mov	r0, r5
    23b0:	f000 fc5c 	bl	2c6c <z_shell_cmd_get>
		if (str && match->syntax &&
    23b4:	9b02      	ldr	r3, [sp, #8]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    23b6:	4680      	mov	r8, r0
		idx++;
    23b8:	f10a 0a01 	add.w	sl, sl, #1
		if (str && match->syntax &&
    23bc:	2b00      	cmp	r3, #0
    23be:	d152      	bne.n	2466 <shell_process+0x3be>
		tab_item_print(shell, match->syntax, longest);
    23c0:	f8d8 3000 	ldr.w	r3, [r8]
	if (option == NULL) {
    23c4:	2b00      	cmp	r3, #0
    23c6:	d158      	bne.n	247a <shell_process+0x3d2>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    23c8:	68a2      	ldr	r2, [r4, #8]
    23ca:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
    23cc:	9b04      	ldr	r3, [sp, #16]
    23ce:	3b01      	subs	r3, #1
    23d0:	9304      	str	r3, [sp, #16]
    23d2:	d1e9      	bne.n	23a8 <shell_process+0x300>
	z_cursor_next_line_move(shell);
    23d4:	6960      	ldr	r0, [r4, #20]
    23d6:	f7ff fc7d 	bl	1cd4 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    23da:	4620      	mov	r0, r4
    23dc:	f000 fe7e 	bl	30dc <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    23e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23e2:	aa30      	add	r2, sp, #192	; 0xc0
    23e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    23e8:	f107 0901 	add.w	r9, r7, #1
	uint16_t arg_len = z_shell_strlen(arg);
    23ec:	f853 0c54 	ldr.w	r0, [r3, #-84]
    23f0:	f006 ff5d 	bl	92ae <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    23f4:	4639      	mov	r1, r7
    23f6:	aa11      	add	r2, sp, #68	; 0x44
	uint16_t arg_len = z_shell_strlen(arg);
    23f8:	4680      	mov	r8, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    23fa:	4628      	mov	r0, r5
    23fc:	f000 fc36 	bl	2c6c <z_shell_cmd_get>
    2400:	4607      	mov	r7, r0
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    2402:	68a0      	ldr	r0, [r4, #8]
    2404:	6839      	ldr	r1, [r7, #0]
    2406:	22ff      	movs	r2, #255	; 0xff
    2408:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    240c:	f008 fbd6 	bl	abbc <strncpy>
	*str = match->syntax;
    2410:	683b      	ldr	r3, [r7, #0]
    2412:	9302      	str	r3, [sp, #8]
	uint16_t common = UINT16_MAX;
    2414:	f64f 77ff 	movw	r7, #65535	; 0xffff
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    2418:	46ba      	mov	sl, r7
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    241a:	aa16      	add	r2, sp, #88	; 0x58
    241c:	4649      	mov	r1, r9
    241e:	4628      	mov	r0, r5
    2420:	f109 0b01 	add.w	fp, r9, #1
    2424:	f000 fc22 	bl	2c6c <z_shell_cmd_get>
		if (match2 == NULL) {
    2428:	2800      	cmp	r0, #0
    242a:	d064      	beq.n	24f6 <shell_process+0x44e>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    242c:	68a1      	ldr	r1, [r4, #8]
    242e:	6803      	ldr	r3, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    2430:	f201 1141 	addw	r1, r1, #321	; 0x141
	size_t common = 0;
    2434:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    2436:	f811 ef01 	ldrb.w	lr, [r1, #1]!
    243a:	5c98      	ldrb	r0, [r3, r2]
    243c:	4570      	cmp	r0, lr
    243e:	d103      	bne.n	2448 <shell_process+0x3a0>
    2440:	b110      	cbz	r0, 2448 <shell_process+0x3a0>
		common++;
    2442:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    2444:	4552      	cmp	r2, sl
    2446:	d1f6      	bne.n	2436 <shell_process+0x38e>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    2448:	f1b8 0f00 	cmp.w	r8, #0
    244c:	d001      	beq.n	2452 <shell_process+0x3aa>
    244e:	4542      	cmp	r2, r8
    2450:	db07      	blt.n	2462 <shell_process+0x3ba>
			common = (curr_common < common) ? curr_common : common;
    2452:	42ba      	cmp	r2, r7
			--cnt;
    2454:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    2458:	bfa8      	it	ge
    245a:	463a      	movge	r2, r7
	while (cnt > 1) {
    245c:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    245e:	b297      	uxth	r7, r2
	while (cnt > 1) {
    2460:	d049      	beq.n	24f6 <shell_process+0x44e>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    2462:	46d9      	mov	r9, fp
    2464:	e7d9      	b.n	241a <shell_process+0x372>
		if (str && match->syntax &&
    2466:	6800      	ldr	r0, [r0, #0]
    2468:	2800      	cmp	r0, #0
    246a:	d0a9      	beq.n	23c0 <shell_process+0x318>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    246c:	9a05      	ldr	r2, [sp, #20]
    246e:	9902      	ldr	r1, [sp, #8]
    2470:	f008 fb92 	bl	ab98 <strncmp>
		if (str && match->syntax &&
    2474:	2800      	cmp	r0, #0
    2476:	d0a3      	beq.n	23c0 <shell_process+0x318>
    2478:	e796      	b.n	23a8 <shell_process+0x300>
	longest_option += z_shell_strlen(tab);
    247a:	48b5      	ldr	r0, [pc, #724]	; (2750 <shell_process+0x6a8>)
    247c:	9306      	str	r3, [sp, #24]
    247e:	f006 ff16 	bl	92ae <z_shell_strlen>
    2482:	9b03      	ldr	r3, [sp, #12]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    2484:	68a2      	ldr	r2, [r4, #8]
	longest_option += z_shell_strlen(tab);
    2486:	eb00 0b03 	add.w	fp, r0, r3
			- z_shell_strlen(tab)) / longest_option;
    248a:	48b1      	ldr	r0, [pc, #708]	; (2750 <shell_process+0x6a8>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    248c:	f8b2 802a 	ldrh.w	r8, [r2, #42]	; 0x2a
			- z_shell_strlen(tab)) / longest_option;
    2490:	f006 ff0d 	bl	92ae <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
    2494:	9b06      	ldr	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
    2496:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    2498:	4618      	mov	r0, r3
    249a:	f006 ff08 	bl	92ae <z_shell_strlen>
	longest_option += z_shell_strlen(tab);
    249e:	fa1f fb8b 	uxth.w	fp, fp
	diff = longest_option - z_shell_strlen(option);
    24a2:	ebab 0900 	sub.w	r9, fp, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    24a6:	68a0      	ldr	r0, [r4, #8]
			- z_shell_strlen(tab)) / longest_option;
    24a8:	9a07      	ldr	r2, [sp, #28]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    24aa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    24ac:	9b06      	ldr	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
    24ae:	eba8 0802 	sub.w	r8, r8, r2
    24b2:	fb98 f8fb 	sdiv	r8, r8, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    24b6:	fa1f f888 	uxth.w	r8, r8
    24ba:	f101 0c01 	add.w	ip, r1, #1
    24be:	fbb1 f2f8 	udiv	r2, r1, r8
    24c2:	fb08 1112 	mls	r1, r8, r2, r1
    24c6:	b289      	uxth	r1, r1
	diff = longest_option - z_shell_strlen(option);
    24c8:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    24cc:	f8a0 c030 	strh.w	ip, [r0, #48]	; 0x30
    24d0:	b959      	cbnz	r1, 24ea <shell_process+0x442>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    24d2:	9300      	str	r3, [sp, #0]
    24d4:	4a9f      	ldr	r2, [pc, #636]	; (2754 <shell_process+0x6ac>)
    24d6:	4b9e      	ldr	r3, [pc, #632]	; (2750 <shell_process+0x6a8>)
    24d8:	2106      	movs	r1, #6
    24da:	4620      	mov	r0, r4
    24dc:	f007 f9df 	bl	989e <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    24e0:	4649      	mov	r1, r9
    24e2:	4620      	mov	r0, r4
    24e4:	f000 fc92 	bl	2e0c <z_shell_op_cursor_horiz_move>
    24e8:	e770      	b.n	23cc <shell_process+0x324>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    24ea:	4a9b      	ldr	r2, [pc, #620]	; (2758 <shell_process+0x6b0>)
    24ec:	2106      	movs	r1, #6
    24ee:	4620      	mov	r0, r4
    24f0:	f007 f9d5 	bl	989e <z_shell_fprintf>
    24f4:	e7f4      	b.n	24e0 <shell_process+0x438>
	if (common) {
    24f6:	2f00      	cmp	r7, #0
    24f8:	f43f ade6 	beq.w	20c8 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    24fc:	9902      	ldr	r1, [sp, #8]
    24fe:	eba7 0208 	sub.w	r2, r7, r8
    2502:	b292      	uxth	r2, r2
    2504:	4441      	add	r1, r8
    2506:	4620      	mov	r0, r4
    2508:	f007 fa09 	bl	991e <z_shell_op_completion_insert>
    250c:	e5dc      	b.n	20c8 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    250e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    2512:	079e      	lsls	r6, r3, #30
    2514:	f57f add8 	bpl.w	20c8 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2518:	2101      	movs	r1, #1
    251a:	f006 ff0c 	bl	9336 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    251e:	4620      	mov	r0, r4
    2520:	f007 fa1a 	bl	9958 <z_shell_op_char_backspace>
    2524:	e5d0      	b.n	20c8 <shell_process+0x20>
    2526:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    252a:	0792      	lsls	r2, r2, #30
    252c:	f57f adcc 	bpl.w	20c8 <shell_process+0x20>
	switch (data) {
    2530:	3b01      	subs	r3, #1
    2532:	2b16      	cmp	r3, #22
    2534:	f63f adc8 	bhi.w	20c8 <shell_process+0x20>
    2538:	a201      	add	r2, pc, #4	; (adr r2, 2540 <shell_process+0x498>)
    253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    253e:	bf00      	nop
    2540:	0000271d 	.word	0x0000271d
    2544:	0000259d 	.word	0x0000259d
    2548:	000025a5 	.word	0x000025a5
    254c:	0000219f 	.word	0x0000219f
    2550:	00002711 	.word	0x00002711
    2554:	000025c3 	.word	0x000025c3
    2558:	000020c9 	.word	0x000020c9
    255c:	000020c9 	.word	0x000020c9
    2560:	000020c9 	.word	0x000020c9
    2564:	000020c9 	.word	0x000020c9
    2568:	000025cb 	.word	0x000025cb
    256c:	000025d3 	.word	0x000025d3
    2570:	000020c9 	.word	0x000020c9
    2574:	000025fd 	.word	0x000025fd
    2578:	000020c9 	.word	0x000020c9
    257c:	00002607 	.word	0x00002607
    2580:	000020c9 	.word	0x000020c9
    2584:	000020c9 	.word	0x000020c9
    2588:	000020c9 	.word	0x000020c9
    258c:	000020c9 	.word	0x000020c9
    2590:	0000260b 	.word	0x0000260b
    2594:	000020c9 	.word	0x000020c9
    2598:	0000263f 	.word	0x0000263f
		z_shell_op_left_arrow(shell);
    259c:	4620      	mov	r0, r4
    259e:	f007 f8dd 	bl	975c <z_shell_op_left_arrow>
		break;
    25a2:	e591      	b.n	20c8 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    25a4:	4620      	mov	r0, r4
    25a6:	f007 f8d2 	bl	974e <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    25aa:	4620      	mov	r0, r4
    25ac:	f007 f859 	bl	9662 <z_shell_cursor_in_empty_line>
    25b0:	b910      	cbnz	r0, 25b8 <shell_process+0x510>
			z_cursor_next_line_move(shell);
    25b2:	6960      	ldr	r0, [r4, #20]
    25b4:	f7ff fb8e 	bl	1cd4 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    25b8:	68a0      	ldr	r0, [r4, #8]
    25ba:	2101      	movs	r1, #1
    25bc:	f006 febb 	bl	9336 <z_flag_history_exit_set.isra.0>
    25c0:	e60d      	b.n	21de <shell_process+0x136>
		z_shell_op_right_arrow(shell);
    25c2:	4620      	mov	r0, r4
    25c4:	f007 f8d2 	bl	976c <z_shell_op_right_arrow>
		break;
    25c8:	e57e      	b.n	20c8 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    25ca:	4620      	mov	r0, r4
    25cc:	f007 f8d7 	bl	977e <z_shell_op_delete_from_cursor>
		break;
    25d0:	e57a      	b.n	20c8 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    25d2:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    25d6:	069f      	lsls	r7, r3, #26
    25d8:	d503      	bpl.n	25e2 <shell_process+0x53a>
    25da:	4960      	ldr	r1, [pc, #384]	; (275c <shell_process+0x6b4>)
    25dc:	6960      	ldr	r0, [r4, #20]
    25de:	f006 fe6c 	bl	92ba <z_shell_raw_fprintf>
    25e2:	68a3      	ldr	r3, [r4, #8]
    25e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    25e8:	069e      	lsls	r6, r3, #26
    25ea:	d503      	bpl.n	25f4 <shell_process+0x54c>
    25ec:	495c      	ldr	r1, [pc, #368]	; (2760 <shell_process+0x6b8>)
    25ee:	6960      	ldr	r0, [r4, #20]
    25f0:	f006 fe63 	bl	92ba <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    25f4:	4620      	mov	r0, r4
    25f6:	f000 fd71 	bl	30dc <z_shell_print_prompt_and_cmd>
		break;
    25fa:	e565      	b.n	20c8 <shell_process+0x20>
		history_handle(shell, false);
    25fc:	2100      	movs	r1, #0
		history_handle(shell, true);
    25fe:	4620      	mov	r0, r4
    2600:	f7ff fb6e 	bl	1ce0 <history_handle>
		break;
    2604:	e560      	b.n	20c8 <shell_process+0x20>
		history_handle(shell, true);
    2606:	2101      	movs	r1, #1
    2608:	e7f9      	b.n	25fe <shell_process+0x556>
		z_shell_op_cursor_home_move(shell);
    260a:	4620      	mov	r0, r4
    260c:	f007 f899 	bl	9742 <z_shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2610:	68a2      	ldr	r2, [r4, #8]
    2612:	2300      	movs	r3, #0
    2614:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_pos = 0;
    2618:	68a2      	ldr	r2, [r4, #8]
    261a:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
    261c:	68a2      	ldr	r2, [r4, #8]
    261e:	8793      	strh	r3, [r2, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    2620:	68a0      	ldr	r0, [r4, #8]
    2622:	2101      	movs	r1, #1
    2624:	f006 fe87 	bl	9336 <z_flag_history_exit_set.isra.0>
    2628:	68a3      	ldr	r3, [r4, #8]
    262a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    262e:	069d      	lsls	r5, r3, #26
    2630:	f57f ad4a 	bpl.w	20c8 <shell_process+0x20>
    2634:	494b      	ldr	r1, [pc, #300]	; (2764 <shell_process+0x6bc>)
    2636:	6960      	ldr	r0, [r4, #20]
    2638:	f006 fe3f 	bl	92ba <z_shell_raw_fprintf>
    263c:	e544      	b.n	20c8 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    263e:	4620      	mov	r0, r4
    2640:	f000 fc7c 	bl	2f3c <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    2644:	68a0      	ldr	r0, [r4, #8]
    2646:	2101      	movs	r1, #1
    2648:	f006 fe75 	bl	9336 <z_flag_history_exit_set.isra.0>
		break;
    264c:	e53c      	b.n	20c8 <shell_process+0x20>
			if (data == '[') {
    264e:	2b5b      	cmp	r3, #91	; 0x5b
    2650:	d102      	bne.n	2658 <shell_process+0x5b0>
	shell->ctx->receive_state = state;
    2652:	2302      	movs	r3, #2
    2654:	7153      	strb	r3, [r2, #5]
}
    2656:	e537      	b.n	20c8 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    2658:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    265c:	0790      	lsls	r0, r2, #30
    265e:	d506      	bpl.n	266e <shell_process+0x5c6>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    2660:	2b62      	cmp	r3, #98	; 0x62
    2662:	d108      	bne.n	2676 <shell_process+0x5ce>
		z_shell_op_cursor_word_move(shell, -1);
    2664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    2668:	4620      	mov	r0, r4
    266a:	f000 fbe5 	bl	2e38 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    266e:	68a3      	ldr	r3, [r4, #8]
    2670:	2200      	movs	r2, #0
    2672:	715a      	strb	r2, [r3, #5]
}
    2674:	e528      	b.n	20c8 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    2676:	2b66      	cmp	r3, #102	; 0x66
    2678:	d1f9      	bne.n	266e <shell_process+0x5c6>
		z_shell_op_cursor_word_move(shell, 1);
    267a:	2101      	movs	r1, #1
    267c:	e7f4      	b.n	2668 <shell_process+0x5c0>
	shell->ctx->receive_state = state;
    267e:	2100      	movs	r1, #0
    2680:	7151      	strb	r1, [r2, #5]
    2682:	68a2      	ldr	r2, [r4, #8]
    2684:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    2688:	0789      	lsls	r1, r1, #30
    268a:	f57f ad1d 	bpl.w	20c8 <shell_process+0x20>
			switch (data) {
    268e:	3b31      	subs	r3, #49	; 0x31
    2690:	2b1b      	cmp	r3, #27
    2692:	f63f ad19 	bhi.w	20c8 <shell_process+0x20>
    2696:	a101      	add	r1, pc, #4	; (adr r1, 269c <shell_process+0x5f4>)
    2698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    269c:	00002719 	.word	0x00002719
    26a0:	00002725 	.word	0x00002725
    26a4:	00002739 	.word	0x00002739
    26a8:	0000270d 	.word	0x0000270d
    26ac:	000020c9 	.word	0x000020c9
    26b0:	000020c9 	.word	0x000020c9
    26b4:	000020c9 	.word	0x000020c9
    26b8:	000020c9 	.word	0x000020c9
    26bc:	000020c9 	.word	0x000020c9
    26c0:	000020c9 	.word	0x000020c9
    26c4:	000020c9 	.word	0x000020c9
    26c8:	000020c9 	.word	0x000020c9
    26cc:	000020c9 	.word	0x000020c9
    26d0:	000020c9 	.word	0x000020c9
    26d4:	000020c9 	.word	0x000020c9
    26d8:	000020c9 	.word	0x000020c9
    26dc:	00002607 	.word	0x00002607
    26e0:	000025fd 	.word	0x000025fd
    26e4:	000025c3 	.word	0x000025c3
    26e8:	0000259d 	.word	0x0000259d
    26ec:	000020c9 	.word	0x000020c9
    26f0:	00002711 	.word	0x00002711
    26f4:	000020c9 	.word	0x000020c9
    26f8:	0000271d 	.word	0x0000271d
    26fc:	000020c9 	.word	0x000020c9
    2700:	000020c9 	.word	0x000020c9
    2704:	000020c9 	.word	0x000020c9
    2708:	00002729 	.word	0x00002729
	shell->ctx->receive_state = state;
    270c:	2303      	movs	r3, #3
    270e:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
    2710:	4620      	mov	r0, r4
    2712:	f007 f81c 	bl	974e <z_shell_op_cursor_end_move>
		break;
    2716:	e4d7      	b.n	20c8 <shell_process+0x20>
	shell->ctx->receive_state = state;
    2718:	2303      	movs	r3, #3
    271a:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
    271c:	4620      	mov	r0, r4
    271e:	f007 f810 	bl	9742 <z_shell_op_cursor_home_move>
		break;
    2722:	e4d1      	b.n	20c8 <shell_process+0x20>
	shell->ctx->receive_state = state;
    2724:	2303      	movs	r3, #3
    2726:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    2728:	68a0      	ldr	r0, [r4, #8]
    272a:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    272e:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    2732:	f081 0101 	eor.w	r1, r1, #1
    2736:	e5ee      	b.n	2316 <shell_process+0x26e>
	shell->ctx->receive_state = state;
    2738:	2303      	movs	r3, #3
    273a:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.echo == 1;
    273c:	68a3      	ldr	r3, [r4, #8]
    273e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    2742:	079b      	lsls	r3, r3, #30
    2744:	f57f acc0 	bpl.w	20c8 <shell_process+0x20>
    2748:	e529      	b.n	219e <shell_process+0xf6>
	shell->ctx->receive_state = state;
    274a:	2300      	movs	r3, #0
    274c:	e782      	b.n	2654 <shell_process+0x5ac>
    274e:	bf00      	nop
    2750:	0000cd2a 	.word	0x0000cd2a
    2754:	0000cb5e 	.word	0x0000cb5e
    2758:	0000c6da 	.word	0x0000c6da
    275c:	0000bc2a 	.word	0x0000bc2a
    2760:	0000bc2f 	.word	0x0000bc2f
    2764:	0000bc25 	.word	0x0000bc25

00002768 <shell_init>:
{
    2768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    276c:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    276e:	6880      	ldr	r0, [r0, #8]
{
    2770:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    2772:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    2776:	b089      	sub	sp, #36	; 0x24
    2778:	4615      	mov	r5, r2
    277a:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    277c:	2900      	cmp	r1, #0
    277e:	d166      	bne.n	284e <shell_init+0xe6>
__ssp_bos_icheck3(memset, void *, int)
    2780:	f44f 7244 	mov.w	r2, #784	; 0x310
    2784:	f008 f9e2 	bl	ab4c <memset>
	sh->ctx->prompt = sh->default_prompt;
    2788:	68a3      	ldr	r3, [r4, #8]
    278a:	6822      	ldr	r2, [r4, #0]
    278c:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    278e:	68e0      	ldr	r0, [r4, #12]
    2790:	f007 fa2b 	bl	9bea <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    2794:	68a0      	ldr	r0, [r4, #8]
    2796:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
    279a:	f007 fee3 	bl	a564 <z_impl_k_mutex_init>
    279e:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    27a2:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    27a6:	68a0      	ldr	r0, [r4, #8]
    27a8:	4430      	add	r0, r6
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    27aa:	f008 f95b 	bl	aa64 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    27ae:	68a0      	ldr	r0, [r4, #8]
    27b0:	2200      	movs	r2, #0
    27b2:	1983      	adds	r3, r0, r6
    27b4:	2101      	movs	r1, #1
    27b6:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    27b8:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    27ba:	f008 f936 	bl	aa2a <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    27be:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    27c2:	f109 0914 	add.w	r9, r9, #20
    27c6:	d1ee      	bne.n	27a6 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    27c8:	69a3      	ldr	r3, [r4, #24]
    27ca:	2600      	movs	r6, #0
    27cc:	601e      	str	r6, [r3, #0]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    27ce:	68a0      	ldr	r0, [r4, #8]
    27d0:	2102      	movs	r1, #2
    27d2:	f500 7019 	add.w	r0, r0, #612	; 0x264
    27d6:	f006 fd36 	bl	9246 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    27da:	68a3      	ldr	r3, [r4, #8]
    27dc:	2250      	movs	r2, #80	; 0x50
    27de:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei =
    27e0:	68a3      	ldr	r3, [r4, #8]
    27e2:	2218      	movs	r2, #24
    27e4:	851a      	strh	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    27e6:	68a3      	ldr	r3, [r4, #8]
    27e8:	6818      	ldr	r0, [r3, #0]
    27ea:	f006 fd60 	bl	92ae <z_shell_strlen>
    27ee:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    27f0:	4a18      	ldr	r2, [pc, #96]	; (2854 <shell_init+0xec>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    27f2:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	sh->ctx->cfg.flags = cfg_flags;
    27f6:	68a3      	ldr	r3, [r4, #8]
    27f8:	f366 0582 	bfi	r5, r6, #2, #1
    27fc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    2800:	6860      	ldr	r0, [r4, #4]
    2802:	6803      	ldr	r3, [r0, #0]
    2804:	4641      	mov	r1, r8
    2806:	681d      	ldr	r5, [r3, #0]
    2808:	4623      	mov	r3, r4
    280a:	47a8      	blx	r5
	if (ret == 0) {
    280c:	4605      	mov	r5, r0
    280e:	b9d0      	cbnz	r0, 2846 <shell_init+0xde>
	shell->ctx->state = state;
    2810:	68a3      	ldr	r3, [r4, #8]
    2812:	2201      	movs	r2, #1
    2814:	711a      	strb	r2, [r3, #4]
				  shell->stack, CONFIG_SHELL_STACK_SIZE,
    2816:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    281a:	2200      	movs	r2, #0
    281c:	2300      	movs	r3, #0
    281e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2822:	230e      	movs	r3, #14
    2824:	9303      	str	r3, [sp, #12]
    2826:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2828:	9504      	str	r5, [sp, #16]
	k_tid_t tid = k_thread_create(shell->thread,
    282a:	e9cd 7301 	strd	r7, r3, [sp, #4]
    282e:	9400      	str	r4, [sp, #0]
    2830:	4b09      	ldr	r3, [pc, #36]	; (2858 <shell_init+0xf0>)
    2832:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2836:	f003 fe87 	bl	6548 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    283a:	68a3      	ldr	r3, [r4, #8]
    283c:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	k_thread_name_set(tid, shell->thread_name);
    2840:	6a21      	ldr	r1, [r4, #32]
	return z_impl_k_thread_name_set(thread, str);
    2842:	f003 fdbd 	bl	63c0 <z_impl_k_thread_name_set>
}
    2846:	4628      	mov	r0, r5
    2848:	b009      	add	sp, #36	; 0x24
    284a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    284e:	f06f 0577 	mvn.w	r5, #119	; 0x77
    2852:	e7f8      	b.n	2846 <shell_init+0xde>
    2854:	000092d9 	.word	0x000092d9
    2858:	000028b1 	.word	0x000028b1

0000285c <shell_start>:
{
    285c:	b510      	push	{r4, lr}
    285e:	4604      	mov	r4, r0
	return shell->ctx->state;
    2860:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    2862:	7903      	ldrb	r3, [r0, #4]
    2864:	2b01      	cmp	r3, #1
    2866:	d11d      	bne.n	28a4 <shell_start+0x48>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    286c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2870:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2874:	f006 fd2e 	bl	92d4 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    2878:	4620      	mov	r0, r4
    287a:	2108      	movs	r1, #8
    287c:	f000 fb20 	bl	2ec0 <z_shell_vt100_color_set>
	if (z_shell_strlen(shell->default_prompt) > 0) {
    2880:	6820      	ldr	r0, [r4, #0]
    2882:	f006 fd14 	bl	92ae <z_shell_strlen>
    2886:	b118      	cbz	r0, 2890 <shell_start+0x34>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    2888:	4908      	ldr	r1, [pc, #32]	; (28ac <shell_start+0x50>)
    288a:	6960      	ldr	r0, [r4, #20]
    288c:	f006 fd15 	bl	92ba <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    2890:	4620      	mov	r0, r4
    2892:	f7ff fa79 	bl	1d88 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    2896:	68a0      	ldr	r0, [r4, #8]
    2898:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    289c:	f006 fd64 	bl	9368 <k_mutex_unlock.isra.0>
	return 0;
    28a0:	2000      	movs	r0, #0
}
    28a2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    28a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    28a8:	e7fb      	b.n	28a2 <shell_start+0x46>
    28aa:	bf00      	nop
    28ac:	0000c509 	.word	0x0000c509

000028b0 <shell_thread>:
{
    28b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28b2:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    28b4:	6840      	ldr	r0, [r0, #4]
    28b6:	6803      	ldr	r3, [r0, #0]
    28b8:	2100      	movs	r1, #0
    28ba:	689b      	ldr	r3, [r3, #8]
    28bc:	4798      	blx	r3
	if (err != 0) {
    28be:	2800      	cmp	r0, #0
    28c0:	d13f      	bne.n	2942 <shell_thread+0x92>
	err = shell_start(shell);
    28c2:	4620      	mov	r0, r4
    28c4:	f7ff ffca 	bl	285c <shell_start>
	if (err != 0) {
    28c8:	2800      	cmp	r0, #0
    28ca:	d13a      	bne.n	2942 <shell_thread+0x92>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    28cc:	4e1d      	ldr	r6, [pc, #116]	; (2944 <shell_thread+0x94>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    28ce:	4f1e      	ldr	r7, [pc, #120]	; (2948 <shell_thread+0x98>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    28d0:	68a0      	ldr	r0, [r4, #8]
    28d2:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    28d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28de:	2103      	movs	r1, #3
    28e0:	f004 fc98 	bl	7214 <z_impl_k_poll>
		if (err != 0) {
    28e4:	4605      	mov	r5, r0
    28e6:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    28e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28f0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    28f4:	b175      	cbz	r5, 2914 <shell_thread+0x64>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    28f6:	f006 fced 	bl	92d4 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    28fa:	4620      	mov	r0, r4
    28fc:	462b      	mov	r3, r5
    28fe:	4a13      	ldr	r2, [pc, #76]	; (294c <shell_thread+0x9c>)
    2900:	2101      	movs	r1, #1
    2902:	f006 ffcc 	bl	989e <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    2906:	68a0      	ldr	r0, [r4, #8]
}
    2908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    290c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2910:	f006 bd2a 	b.w	9368 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2914:	f006 fcde 	bl	92d4 <k_mutex_lock.constprop.0.isra.0>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    2918:	4632      	mov	r2, r6
    291a:	2102      	movs	r1, #2
    291c:	4620      	mov	r0, r4
    291e:	f006 fcb0 	bl	9282 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    2922:	4620      	mov	r0, r4
    2924:	463a      	mov	r2, r7
    2926:	4629      	mov	r1, r5
    2928:	f006 fcab 	bl	9282 <shell_signal_handle>
		if (shell->iface->api->update) {
    292c:	6860      	ldr	r0, [r4, #4]
    292e:	6803      	ldr	r3, [r0, #0]
    2930:	695b      	ldr	r3, [r3, #20]
    2932:	b103      	cbz	r3, 2936 <shell_thread+0x86>
			shell->iface->api->update(shell->iface);
    2934:	4798      	blx	r3
		k_mutex_unlock(&shell->ctx->wr_mtx);
    2936:	68a0      	ldr	r0, [r4, #8]
    2938:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    293c:	f006 fd14 	bl	9368 <k_mutex_unlock.isra.0>
	while (true) {
    2940:	e7c6      	b.n	28d0 <shell_thread+0x20>
}
    2942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2944:	000092ed 	.word	0x000092ed
    2948:	000020a9 	.word	0x000020a9
    294c:	0000cb64 	.word	0x0000cb64

00002950 <cmd_help>:

	return state_get(sh) ==	SHELL_STATE_ACTIVE;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    2950:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    2952:	4a0d      	ldr	r2, [pc, #52]	; (2988 <cmd_help+0x38>)
{
    2954:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    2956:	2108      	movs	r1, #8
    2958:	f006 fd45 	bl	93e6 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    295c:	4620      	mov	r0, r4
    295e:	4a0b      	ldr	r2, [pc, #44]	; (298c <cmd_help+0x3c>)
    2960:	2108      	movs	r1, #8
    2962:	f006 fd40 	bl	93e6 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    2966:	4620      	mov	r0, r4
    2968:	4a09      	ldr	r2, [pc, #36]	; (2990 <cmd_help+0x40>)
    296a:	2108      	movs	r1, #8
    296c:	f006 fd3b 	bl	93e6 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    2970:	4620      	mov	r0, r4
    2972:	4a08      	ldr	r2, [pc, #32]	; (2994 <cmd_help+0x44>)
    2974:	2108      	movs	r1, #8
    2976:	f006 fd36 	bl	93e6 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    297a:	4620      	mov	r0, r4
    297c:	4a06      	ldr	r2, [pc, #24]	; (2998 <cmd_help+0x48>)
    297e:	2100      	movs	r1, #0
    2980:	f000 fc3c 	bl	31fc <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    2984:	2000      	movs	r0, #0
    2986:	bd10      	pop	{r4, pc}
    2988:	0000cb7b 	.word	0x0000cb7b
    298c:	0000cbb9 	.word	0x0000cbb9
    2990:	0000cc18 	.word	0x0000cc18
    2994:	0000cc6c 	.word	0x0000cc6c
    2998:	0000cd06 	.word	0x0000cd06

0000299c <shell_hexdump_line>:
{
    299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    299e:	461e      	mov	r6, r3
    29a0:	4617      	mov	r7, r2
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    29a2:	460b      	mov	r3, r1
    29a4:	4a2f      	ldr	r2, [pc, #188]	; (2a64 <shell_hexdump_line+0xc8>)
    29a6:	2108      	movs	r1, #8
{
    29a8:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    29aa:	f006 fd1c 	bl	93e6 <shell_fprintf>
		if (i < len) {
    29ae:	b36e      	cbz	r6, 2a0c <shell_hexdump_line+0x70>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    29b0:	783b      	ldrb	r3, [r7, #0]
    29b2:	4a2d      	ldr	r2, [pc, #180]	; (2a68 <shell_hexdump_line+0xcc>)
    29b4:	2108      	movs	r1, #8
    29b6:	4620      	mov	r0, r4
    29b8:	f006 fd15 	bl	93e6 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    29bc:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    29be:	076a      	lsls	r2, r5, #29
    29c0:	d104      	bne.n	29cc <shell_hexdump_line+0x30>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    29c2:	4a2a      	ldr	r2, [pc, #168]	; (2a6c <shell_hexdump_line+0xd0>)
    29c4:	2108      	movs	r1, #8
    29c6:	4620      	mov	r0, r4
    29c8:	f006 fd0d 	bl	93e6 <shell_fprintf>
		if (i < len) {
    29cc:	42ae      	cmp	r6, r5
    29ce:	d923      	bls.n	2a18 <shell_hexdump_line+0x7c>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    29d0:	5d7b      	ldrb	r3, [r7, r5]
    29d2:	4a25      	ldr	r2, [pc, #148]	; (2a68 <shell_hexdump_line+0xcc>)
    29d4:	2108      	movs	r1, #8
    29d6:	4620      	mov	r0, r4
    29d8:	f006 fd05 	bl	93e6 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    29dc:	3501      	adds	r5, #1
    29de:	2d10      	cmp	r5, #16
    29e0:	d1ed      	bne.n	29be <shell_hexdump_line+0x22>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    29e2:	4a23      	ldr	r2, [pc, #140]	; (2a70 <shell_hexdump_line+0xd4>)
    29e4:	2108      	movs	r1, #8
    29e6:	4620      	mov	r0, r4
    29e8:	f006 fcfd 	bl	93e6 <shell_fprintf>
		if (i < len) {
    29ec:	b9d6      	cbnz	r6, 2a24 <shell_hexdump_line+0x88>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    29ee:	4a1f      	ldr	r2, [pc, #124]	; (2a6c <shell_hexdump_line+0xd0>)
    29f0:	2108      	movs	r1, #8
    29f2:	4620      	mov	r0, r4
    29f4:	f006 fcf7 	bl	93e6 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    29f8:	2501      	movs	r5, #1
		if (i < len) {
    29fa:	42ae      	cmp	r6, r5
    29fc:	462b      	mov	r3, r5
    29fe:	d813      	bhi.n	2a28 <shell_hexdump_line+0x8c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    2a00:	4a1a      	ldr	r2, [pc, #104]	; (2a6c <shell_hexdump_line+0xd0>)
    2a02:	2108      	movs	r1, #8
    2a04:	4620      	mov	r0, r4
    2a06:	f006 fcee 	bl	93e6 <shell_fprintf>
    2a0a:	e019      	b.n	2a40 <shell_hexdump_line+0xa4>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    2a0c:	4a19      	ldr	r2, [pc, #100]	; (2a74 <shell_hexdump_line+0xd8>)
    2a0e:	2108      	movs	r1, #8
    2a10:	4620      	mov	r0, r4
    2a12:	f006 fce8 	bl	93e6 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    2a16:	2501      	movs	r5, #1
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    2a18:	4a16      	ldr	r2, [pc, #88]	; (2a74 <shell_hexdump_line+0xd8>)
    2a1a:	2108      	movs	r1, #8
    2a1c:	4620      	mov	r0, r4
    2a1e:	f006 fce2 	bl	93e6 <shell_fprintf>
    2a22:	e7db      	b.n	29dc <shell_hexdump_line+0x40>
		if (i < len) {
    2a24:	2500      	movs	r5, #0
    2a26:	462b      	mov	r3, r5
			char c = data[i];
    2a28:	5cfb      	ldrb	r3, [r7, r3]
				      isprint((int)c) ? c : '.');
    2a2a:	4a13      	ldr	r2, [pc, #76]	; (2a78 <shell_hexdump_line+0xdc>)
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    2a2c:	5cd2      	ldrb	r2, [r2, r3]
    2a2e:	f012 0f97 	tst.w	r2, #151	; 0x97
    2a32:	bf08      	it	eq
    2a34:	232e      	moveq	r3, #46	; 0x2e
    2a36:	4a11      	ldr	r2, [pc, #68]	; (2a7c <shell_hexdump_line+0xe0>)
    2a38:	2108      	movs	r1, #8
    2a3a:	4620      	mov	r0, r4
    2a3c:	f006 fcd3 	bl	93e6 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    2a40:	3501      	adds	r5, #1
    2a42:	2d10      	cmp	r5, #16
    2a44:	d007      	beq.n	2a56 <shell_hexdump_line+0xba>
		if (i > 0 && !(i % 8)) {
    2a46:	076b      	lsls	r3, r5, #29
    2a48:	d1d7      	bne.n	29fa <shell_hexdump_line+0x5e>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    2a4a:	4a08      	ldr	r2, [pc, #32]	; (2a6c <shell_hexdump_line+0xd0>)
    2a4c:	2108      	movs	r1, #8
    2a4e:	4620      	mov	r0, r4
    2a50:	f006 fcc9 	bl	93e6 <shell_fprintf>
    2a54:	e7d1      	b.n	29fa <shell_hexdump_line+0x5e>
	shell_print(shell, "|");
    2a56:	4620      	mov	r0, r4
    2a58:	4a09      	ldr	r2, [pc, #36]	; (2a80 <shell_hexdump_line+0xe4>)
}
    2a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	shell_print(shell, "|");
    2a5e:	2108      	movs	r1, #8
    2a60:	f006 bcc1 	b.w	93e6 <shell_fprintf>
    2a64:	0000cd1c 	.word	0x0000cd1c
    2a68:	0000cd23 	.word	0x0000cd23
    2a6c:	0000cd2b 	.word	0x0000cd2b
    2a70:	0000cd2d 	.word	0x0000cd2d
    2a74:	0000cd29 	.word	0x0000cd29
    2a78:	0000d4bf 	.word	0x0000d4bf
    2a7c:	0000cd4f 	.word	0x0000cd4f
    2a80:	0000cd2f 	.word	0x0000cd2f

00002a84 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    2a84:	b513      	push	{r0, r1, r4, lr}
    2a86:	4613      	mov	r3, r2
    2a88:	4604      	mov	r4, r0
    2a8a:	2200      	movs	r2, #0
    2a8c:	9200      	str	r2, [sp, #0]
    2a8e:	460a      	mov	r2, r1
    2a90:	4601      	mov	r1, r0
    2a92:	4807      	ldr	r0, [pc, #28]	; (2ab0 <z_shell_fprintf_fmt+0x2c>)
    2a94:	f7fe f856 	bl	b44 <z_cbvprintf_impl>
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);

	if (sh_fprintf->ctrl_blk->autoflush) {
    2a98:	6923      	ldr	r3, [r4, #16]
    2a9a:	791b      	ldrb	r3, [r3, #4]
    2a9c:	b12b      	cbz	r3, 2aaa <z_shell_fprintf_fmt+0x26>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    2a9e:	4620      	mov	r0, r4
	}
}
    2aa0:	b002      	add	sp, #8
    2aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    2aa6:	f006 bcae 	b.w	9406 <z_shell_fprintf_buffer_flush>
}
    2aaa:	b002      	add	sp, #8
    2aac:	bd10      	pop	{r4, pc}
    2aae:	bf00      	nop
    2ab0:	0000941f 	.word	0x0000941f

00002ab4 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
    2ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ab8:	b085      	sub	sp, #20
	char quote = 0;
	char c;

	*argc = 0;
    2aba:	2600      	movs	r6, #0
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
    2abc:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 2c68 <z_shell_make_argv+0x1b4>
{
    2ac0:	9101      	str	r1, [sp, #4]
    2ac2:	4607      	mov	r7, r0
    2ac4:	4614      	mov	r4, r2
    2ac6:	4699      	mov	r9, r3
	*argc = 0;
    2ac8:	6006      	str	r6, [r0, #0]
	char quote = 0;
    2aca:	46b3      	mov	fp, r6
		c = *cmd;
    2acc:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
    2ace:	2b00      	cmp	r3, #0
    2ad0:	f000 80c6 	beq.w	2c60 <z_shell_make_argv+0x1ac>
		if (isspace((int) c)) {
    2ad4:	f81a 3003 	ldrb.w	r3, [sl, r3]
    2ad8:	f013 0308 	ands.w	r3, r3, #8
    2adc:	d004      	beq.n	2ae8 <z_shell_make_argv+0x34>
			*cmd++ = '\0';
    2ade:	f804 bb01 	strb.w	fp, [r4], #1
			continue;
    2ae2:	e7f3      	b.n	2acc <z_shell_make_argv+0x18>
    2ae4:	2600      	movs	r6, #0
    2ae6:	e7f1      	b.n	2acc <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
    2ae8:	683a      	ldr	r2, [r7, #0]
    2aea:	1c51      	adds	r1, r2, #1
    2aec:	6039      	str	r1, [r7, #0]
    2aee:	9901      	ldr	r1, [sp, #4]
    2af0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
		if (*argc == max_argc) {
    2af4:	683a      	ldr	r2, [r7, #0]
    2af6:	454a      	cmp	r2, r9
    2af8:	f000 80b2 	beq.w	2c60 <z_shell_make_argv+0x1ac>
	char quote = 0;
    2afc:	461e      	mov	r6, r3
		c = *cmd;
    2afe:	7821      	ldrb	r1, [r4, #0]
		if (c == '\0') {
    2b00:	2900      	cmp	r1, #0
    2b02:	d0e3      	beq.n	2acc <z_shell_make_argv+0x18>
		if (!quote) {
    2b04:	b9a6      	cbnz	r6, 2b30 <z_shell_make_argv+0x7c>
		c = *cmd;
    2b06:	460e      	mov	r6, r1
		if (c == '\0') {
    2b08:	4623      	mov	r3, r4
    2b0a:	461c      	mov	r4, r3
			switch (c) {
    2b0c:	2e27      	cmp	r6, #39	; 0x27
    2b0e:	d004      	beq.n	2b1a <z_shell_make_argv+0x66>
    2b10:	2e5c      	cmp	r6, #92	; 0x5c
    2b12:	d020      	beq.n	2b56 <z_shell_make_argv+0xa2>
    2b14:	2e22      	cmp	r6, #34	; 0x22
    2b16:	f040 8097 	bne.w	2c48 <z_shell_make_argv+0x194>
				memmove(cmd, cmd + 1,
    2b1a:	4620      	mov	r0, r4
    2b1c:	f006 fc9d 	bl	945a <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
    2b20:	1c61      	adds	r1, r4, #1
    2b22:	4602      	mov	r2, r0
    2b24:	4620      	mov	r0, r4
    2b26:	f007 fff7 	bl	ab18 <memmove>
		c = *cmd;
    2b2a:	7821      	ldrb	r1, [r4, #0]
		if (c == '\0') {
    2b2c:	2900      	cmp	r1, #0
    2b2e:	d0cd      	beq.n	2acc <z_shell_make_argv+0x18>
		if (quote == c) {
    2b30:	42b1      	cmp	r1, r6
		if (c == '\0') {
    2b32:	46a0      	mov	r8, r4
				memmove(cmd, cmd + 1,
    2b34:	f104 0401 	add.w	r4, r4, #1
		if (quote == c) {
    2b38:	d11b      	bne.n	2b72 <z_shell_make_argv+0xbe>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    2b3a:	4640      	mov	r0, r8
    2b3c:	f006 fc8d 	bl	945a <z_shell_strlen>
    2b40:	4621      	mov	r1, r4
    2b42:	4602      	mov	r2, r0
    2b44:	4640      	mov	r0, r8
    2b46:	f007 ffe7 	bl	ab18 <memmove>
		c = *cmd;
    2b4a:	f898 6000 	ldrb.w	r6, [r8]
		if (c == '\0') {
    2b4e:	4644      	mov	r4, r8
    2b50:	2e00      	cmp	r6, #0
    2b52:	d1d9      	bne.n	2b08 <z_shell_make_argv+0x54>
    2b54:	e7ba      	b.n	2acc <z_shell_make_argv+0x18>
				memmove(cmd, cmd + 1,
    2b56:	4620      	mov	r0, r4
    2b58:	f006 fc7f 	bl	945a <z_shell_strlen>
    2b5c:	1c65      	adds	r5, r4, #1
    2b5e:	4602      	mov	r2, r0
    2b60:	4629      	mov	r1, r5
    2b62:	4620      	mov	r0, r4
    2b64:	f007 ffd8 	bl	ab18 <memmove>
		c = *cmd;
    2b68:	7866      	ldrb	r6, [r4, #1]
		if (c == '\0') {
    2b6a:	462c      	mov	r4, r5
    2b6c:	2e00      	cmp	r6, #0
    2b6e:	d1cd      	bne.n	2b0c <z_shell_make_argv+0x58>
    2b70:	e7ac      	b.n	2acc <z_shell_make_argv+0x18>
		if (quote && c == '\\') {
    2b72:	295c      	cmp	r1, #92	; 0x5c
    2b74:	f898 1001 	ldrb.w	r1, [r8, #1]
    2b78:	d1d8      	bne.n	2b2c <z_shell_make_argv+0x78>
			if (t == quote) {
    2b7a:	42b1      	cmp	r1, r6
			char t = *(cmd + 1);
    2b7c:	468c      	mov	ip, r1
			if (t == quote) {
    2b7e:	d108      	bne.n	2b92 <z_shell_make_argv+0xde>
				memmove(cmd, cmd + 1,
    2b80:	4640      	mov	r0, r8
    2b82:	f006 fc6a 	bl	945a <z_shell_strlen>
    2b86:	4621      	mov	r1, r4
    2b88:	4602      	mov	r2, r0
    2b8a:	4640      	mov	r0, r8
    2b8c:	f007 ffc4 	bl	ab18 <memmove>
				continue;
    2b90:	e7b5      	b.n	2afe <z_shell_make_argv+0x4a>
			if (t == '0') {
    2b92:	2930      	cmp	r1, #48	; 0x30
    2b94:	d125      	bne.n	2be2 <z_shell_make_argv+0x12e>
				uint8_t v = 0U;
    2b96:	2500      	movs	r5, #0
    2b98:	2202      	movs	r2, #2
					t = *(cmd + i);
    2b9a:	f818 c002 	ldrb.w	ip, [r8, r2]
					if (t >= '0' && t <= '7') {
    2b9e:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
    2ba2:	b2c0      	uxtb	r0, r0
    2ba4:	2807      	cmp	r0, #7
    2ba6:	d819      	bhi.n	2bdc <z_shell_make_argv+0x128>
						v = (v << 3) | (t - '0');
    2ba8:	00ed      	lsls	r5, r5, #3
				for (i = 2U; i < (2 + 3); i++) {
    2baa:	3201      	adds	r2, #1
    2bac:	b2ed      	uxtb	r5, r5
    2bae:	2a05      	cmp	r2, #5
						v = (v << 3) | (t - '0');
    2bb0:	ea45 0500 	orr.w	r5, r5, r0
				for (i = 2U; i < (2 + 3); i++) {
    2bb4:	d1f1      	bne.n	2b9a <z_shell_make_argv+0xe6>
					memmove(cmd, cmd + (i - 1),
    2bb6:	1e51      	subs	r1, r2, #1
    2bb8:	4441      	add	r1, r8
    2bba:	4640      	mov	r0, r8
    2bbc:	9203      	str	r2, [sp, #12]
    2bbe:	9102      	str	r1, [sp, #8]
    2bc0:	f006 fc4b 	bl	945a <z_shell_strlen>
    2bc4:	9a03      	ldr	r2, [sp, #12]
    2bc6:	9902      	ldr	r1, [sp, #8]
    2bc8:	3a02      	subs	r2, #2
    2bca:	1a82      	subs	r2, r0, r2
    2bcc:	4640      	mov	r0, r8
    2bce:	f007 ffa3 	bl	ab18 <memmove>
		c = *cmd;
    2bd2:	f898 1001 	ldrb.w	r1, [r8, #1]
					*cmd++ = v;
    2bd6:	f888 5000 	strb.w	r5, [r8]
		if (c == '\0') {
    2bda:	e7a7      	b.n	2b2c <z_shell_make_argv+0x78>
    2bdc:	b2d2      	uxtb	r2, r2
				if (i > 2) {
    2bde:	2a02      	cmp	r2, #2
    2be0:	d1e9      	bne.n	2bb6 <z_shell_make_argv+0x102>
			if (t == 'x') {
    2be2:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
    2be6:	d12a      	bne.n	2c3e <z_shell_make_argv+0x18a>
				uint8_t v = 0U;
    2be8:	2500      	movs	r5, #0
    2bea:	2002      	movs	r0, #2
					t = *(cmd + i);
    2bec:	f818 2000 	ldrb.w	r2, [r8, r0]
					if (t >= '0' && t <= '9') {
    2bf0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
    2bf4:	fa5f fc8c 	uxtb.w	ip, ip
    2bf8:	f1bc 0f09 	cmp.w	ip, #9
    2bfc:	d809      	bhi.n	2c12 <z_shell_make_argv+0x15e>
						v = (v << 4) | (t - '0');
    2bfe:	012d      	lsls	r5, r5, #4
    2c00:	b2ed      	uxtb	r5, r5
    2c02:	ea4c 0505 	orr.w	r5, ip, r5
				for (i = 2U; i < (2 + 2); i++) {
    2c06:	2802      	cmp	r0, #2
    2c08:	d001      	beq.n	2c0e <z_shell_make_argv+0x15a>
    2c0a:	2204      	movs	r2, #4
    2c0c:	e7d3      	b.n	2bb6 <z_shell_make_argv+0x102>
    2c0e:	2003      	movs	r0, #3
    2c10:	e7ec      	b.n	2bec <z_shell_make_argv+0x138>
					} else if ((t >= 'a') &&
    2c12:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    2c16:	f1bc 0f05 	cmp.w	ip, #5
    2c1a:	d805      	bhi.n	2c28 <z_shell_make_argv+0x174>
						v = (v << 4) | (t - 'a' + 10);
    2c1c:	012d      	lsls	r5, r5, #4
    2c1e:	b2ed      	uxtb	r5, r5
    2c20:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    2c22:	4315      	orrs	r5, r2
    2c24:	b2ed      	uxtb	r5, r5
    2c26:	e7ee      	b.n	2c06 <z_shell_make_argv+0x152>
					} else if ((t >= 'A') && (t <= 'F')) {
    2c28:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    2c2c:	f1bc 0f05 	cmp.w	ip, #5
    2c30:	d803      	bhi.n	2c3a <z_shell_make_argv+0x186>
						v = (v << 4) | (t - 'A' + 10);
    2c32:	012d      	lsls	r5, r5, #4
    2c34:	b2ed      	uxtb	r5, r5
    2c36:	3a37      	subs	r2, #55	; 0x37
    2c38:	e7f3      	b.n	2c22 <z_shell_make_argv+0x16e>
				if (i > 2) {
    2c3a:	2802      	cmp	r0, #2
    2c3c:	d102      	bne.n	2c44 <z_shell_make_argv+0x190>
		cmd += 1;
    2c3e:	f108 0401 	add.w	r4, r8, #1
		c = *cmd;
    2c42:	e773      	b.n	2b2c <z_shell_make_argv+0x78>
    2c44:	2203      	movs	r2, #3
    2c46:	e7b6      	b.n	2bb6 <z_shell_make_argv+0x102>
		if (!quote && isspace((int) c)) {
    2c48:	f81a 3006 	ldrb.w	r3, [sl, r6]
    2c4c:	071b      	lsls	r3, r3, #28
    2c4e:	f53f af49 	bmi.w	2ae4 <z_shell_make_argv+0x30>
		c = *cmd;
    2c52:	7866      	ldrb	r6, [r4, #1]
		cmd += 1;
    2c54:	1c63      	adds	r3, r4, #1
		if (c == '\0') {
    2c56:	2e00      	cmp	r6, #0
    2c58:	f47f af57 	bne.w	2b0a <z_shell_make_argv+0x56>
		cmd += 1;
    2c5c:	461c      	mov	r4, r3
    2c5e:	e735      	b.n	2acc <z_shell_make_argv+0x18>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
    2c60:	4630      	mov	r0, r6
    2c62:	b005      	add	sp, #20
    2c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c68:	0000d4bf 	.word	0x0000d4bf

00002c6c <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    2c6c:	b538      	push	{r3, r4, r5, lr}
    2c6e:	460b      	mov	r3, r1
    2c70:	4615      	mov	r5, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    2c72:	b948      	cbnz	r0, 2c88 <z_shell_cmd_get+0x1c>
	return ((uint8_t *)__shell_root_cmds_end -
    2c74:	4914      	ldr	r1, [pc, #80]	; (2cc8 <z_shell_cmd_get+0x5c>)
    2c76:	4a15      	ldr	r2, [pc, #84]	; (2ccc <z_shell_cmd_get+0x60>)
    2c78:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->entry : NULL;
    2c7a:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
    2c7e:	d205      	bcs.n	2c8c <z_shell_cmd_get+0x20>
    2c80:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			}
		}
	}

	return res;
}
    2c84:	4628      	mov	r0, r5
    2c86:	bd38      	pop	{r3, r4, r5, pc}
	if (parent->subcmd) {
    2c88:	6884      	ldr	r4, [r0, #8]
    2c8a:	b90c      	cbnz	r4, 2c90 <z_shell_cmd_get+0x24>
	const struct shell_static_entry *res = NULL;
    2c8c:	2500      	movs	r5, #0
    2c8e:	e7f9      	b.n	2c84 <z_shell_cmd_get+0x18>
	return (entry >= __shell_dynamic_subcmds_start) &&
    2c90:	4a0f      	ldr	r2, [pc, #60]	; (2cd0 <z_shell_cmd_get+0x64>)
    2c92:	4294      	cmp	r4, r2
    2c94:	d30a      	bcc.n	2cac <z_shell_cmd_get+0x40>
    2c96:	4a0f      	ldr	r2, [pc, #60]	; (2cd4 <z_shell_cmd_get+0x68>)
    2c98:	4294      	cmp	r4, r2
    2c9a:	d207      	bcs.n	2cac <z_shell_cmd_get+0x40>
			parent->subcmd->dynamic_get(idx, dloc);
    2c9c:	4618      	mov	r0, r3
    2c9e:	6822      	ldr	r2, [r4, #0]
    2ca0:	4629      	mov	r1, r5
    2ca2:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    2ca4:	682b      	ldr	r3, [r5, #0]
			if (entry_list[idx].syntax != NULL) {
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d1ec      	bne.n	2c84 <z_shell_cmd_get+0x18>
    2caa:	e7ef      	b.n	2c8c <z_shell_cmd_get+0x20>
	return (entry >= __shell_subcmds_start) &&
    2cac:	4a0a      	ldr	r2, [pc, #40]	; (2cd8 <z_shell_cmd_get+0x6c>)
    2cae:	4294      	cmp	r4, r2
    2cb0:	d302      	bcc.n	2cb8 <z_shell_cmd_get+0x4c>
    2cb2:	4a0a      	ldr	r2, [pc, #40]	; (2cdc <z_shell_cmd_get+0x70>)
    2cb4:	4294      	cmp	r4, r2
    2cb6:	d305      	bcc.n	2cc4 <z_shell_cmd_get+0x58>
				entry_list = parent->subcmd->entry;
    2cb8:	6824      	ldr	r4, [r4, #0]
			if (entry_list[idx].syntax != NULL) {
    2cba:	2214      	movs	r2, #20
    2cbc:	4353      	muls	r3, r2
    2cbe:	18e5      	adds	r5, r4, r3
    2cc0:	58e3      	ldr	r3, [r4, r3]
    2cc2:	e7f0      	b.n	2ca6 <z_shell_cmd_get+0x3a>
				idx++;
    2cc4:	3301      	adds	r3, #1
    2cc6:	e7f8      	b.n	2cba <z_shell_cmd_get+0x4e>
    2cc8:	0000b404 	.word	0x0000b404
    2ccc:	0000b428 	.word	0x0000b428
    2cd0:	0000b43c 	.word	0x0000b43c
    2cd4:	0000b43c 	.word	0x0000b43c
    2cd8:	0000b428 	.word	0x0000b428
    2cdc:	0000b43c 	.word	0x0000b43c

00002ce0 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    2ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ce4:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
    2ce6:	f006 fbb8 	bl	945a <z_shell_strlen>
    2cea:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
    2cec:	bb37      	cbnz	r7, 2d3c <z_shell_spaces_trim+0x5c>

				break;
			}
		}
	}
}
    2cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
    2cf2:	b154      	cbz	r4, 2d0a <z_shell_spaces_trim+0x2a>
					memmove(&str[i + 1],
    2cf4:	b28a      	uxth	r2, r1
    2cf6:	1ab2      	subs	r2, r6, r2
    2cf8:	3001      	adds	r0, #1
    2cfa:	3201      	adds	r2, #1
    2cfc:	4439      	add	r1, r7
    2cfe:	4438      	add	r0, r7
    2d00:	f007 ff0a 	bl	ab18 <memmove>
					len -= shift;
    2d04:	1b34      	subs	r4, r6, r4
    2d06:	b2a6      	uxth	r6, r4
					shift = 0U;
    2d08:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
    2d0a:	1e73      	subs	r3, r6, #1
    2d0c:	429d      	cmp	r5, r3
    2d0e:	daee      	bge.n	2cee <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    2d10:	4628      	mov	r0, r5
			for (uint16_t j = i + 1; j < len; j++) {
    2d12:	3501      	adds	r5, #1
		if (isspace((int)str[i])) {
    2d14:	5c3b      	ldrb	r3, [r7, r0]
    2d16:	f819 3003 	ldrb.w	r3, [r9, r3]
    2d1a:	071b      	lsls	r3, r3, #28
			for (uint16_t j = i + 1; j < len; j++) {
    2d1c:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
    2d1e:	d5f4      	bpl.n	2d0a <z_shell_spaces_trim+0x2a>
    2d20:	4629      	mov	r1, r5
			for (uint16_t j = i + 1; j < len; j++) {
    2d22:	b28b      	uxth	r3, r1
    2d24:	429e      	cmp	r6, r3
    2d26:	d9f0      	bls.n	2d0a <z_shell_spaces_trim+0x2a>
				if (isspace((int)str[j])) {
    2d28:	5c7b      	ldrb	r3, [r7, r1]
    2d2a:	f819 8003 	ldrb.w	r8, [r9, r3]
    2d2e:	f018 0808 	ands.w	r8, r8, #8
    2d32:	d0de      	beq.n	2cf2 <z_shell_spaces_trim+0x12>
					shift++;
    2d34:	3401      	adds	r4, #1
				if (isspace((int)str[j])) {
    2d36:	3101      	adds	r1, #1
					shift++;
    2d38:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
    2d3a:	e7f2      	b.n	2d22 <z_shell_spaces_trim+0x42>
	for (uint16_t i = 0; i < len - 1; i++) {
    2d3c:	2500      	movs	r5, #0
		if (isspace((int)str[i])) {
    2d3e:	f8df 9008 	ldr.w	r9, [pc, #8]	; 2d48 <z_shell_spaces_trim+0x68>
	uint16_t shift = 0U;
    2d42:	462c      	mov	r4, r5
    2d44:	e7e1      	b.n	2d0a <z_shell_spaces_trim+0x2a>
    2d46:	bf00      	nop
    2d48:	0000d4bf 	.word	0x0000d4bf

00002d4c <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    2d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    2d4e:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    2d50:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    2d54:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    2d56:	b953      	cbnz	r3, 2d6e <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    2d58:	68ab      	ldr	r3, [r5, #8]
    2d5a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    2d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    2d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    2d60:	3a01      	subs	r2, #1
    2d62:	b292      	uxth	r2, r2
    2d64:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    2d66:	b92a      	cbnz	r2, 2d74 <z_shell_cmd_trim+0x28>
			buff[0] = '\0';
    2d68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    2d6c:	e7f4      	b.n	2d58 <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
    2d6e:	4e12      	ldr	r6, [pc, #72]	; (2db8 <z_shell_cmd_trim+0x6c>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    2d70:	f104 0042 	add.w	r0, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    2d74:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    2d76:	1883      	adds	r3, r0, r2
    2d78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    2d7c:	5cf3      	ldrb	r3, [r6, r3]
    2d7e:	f013 0308 	ands.w	r3, r3, #8
    2d82:	d1ed      	bne.n	2d60 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    2d84:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
    2d86:	b29a      	uxth	r2, r3
    2d88:	fa10 f183 	uxtah	r1, r0, r3
    2d8c:	f810 c002 	ldrb.w	ip, [r0, r2]
    2d90:	f816 c00c 	ldrb.w	ip, [r6, ip]
    2d94:	f01c 0f08 	tst.w	ip, #8
    2d98:	461f      	mov	r7, r3
    2d9a:	f103 0301 	add.w	r3, r3, #1
    2d9e:	d1f2      	bne.n	2d86 <z_shell_cmd_trim+0x3a>
    2da0:	b2bf      	uxth	r7, r7
	if (--i > 0) {
    2da2:	2f00      	cmp	r7, #0
    2da4:	d0d8      	beq.n	2d58 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    2da6:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    2da8:	1c73      	adds	r3, r6, #1
    2daa:	1a9a      	subs	r2, r3, r2
		*buff_len = *buff_len - i;
    2dac:	1bf6      	subs	r6, r6, r7
    2dae:	f007 feb3 	bl	ab18 <memmove>
    2db2:	87a6      	strh	r6, [r4, #60]	; 0x3c
    2db4:	e7d0      	b.n	2d58 <z_shell_cmd_trim+0xc>
    2db6:	bf00      	nop
    2db8:	0000d4bf 	.word	0x0000d4bf

00002dbc <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    2dbc:	6883      	ldr	r3, [r0, #8]
    2dbe:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    2dc2:	069b      	lsls	r3, r3, #26
    2dc4:	d503      	bpl.n	2dce <z_clear_eos+0x12>
    2dc6:	4902      	ldr	r1, [pc, #8]	; (2dd0 <z_clear_eos+0x14>)
    2dc8:	6940      	ldr	r0, [r0, #20]
    2dca:	f006 bc29 	b.w	9620 <z_shell_raw_fprintf>
}
    2dce:	4770      	bx	lr
    2dd0:	0000bc35 	.word	0x0000bc35

00002dd4 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    2dd4:	4901      	ldr	r1, [pc, #4]	; (2ddc <z_cursor_next_line_move.isra.0+0x8>)
    2dd6:	f006 bc23 	b.w	9620 <z_shell_raw_fprintf>
    2dda:	bf00      	nop
    2ddc:	0000c50a 	.word	0x0000c50a

00002de0 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    2de0:	1e0a      	subs	r2, r1, #0
    2de2:	dc0d      	bgt.n	2e00 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    2de4:	d00e      	beq.n	2e04 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    2de6:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    2de8:	6881      	ldr	r1, [r0, #8]
    2dea:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    2dee:	0689      	lsls	r1, r1, #26
    2df0:	d508      	bpl.n	2e04 <z_shell_op_cursor_vert_move+0x24>
    2df2:	2a00      	cmp	r2, #0
    2df4:	4904      	ldr	r1, [pc, #16]	; (2e08 <z_shell_op_cursor_vert_move+0x28>)
    2df6:	6940      	ldr	r0, [r0, #20]
    2df8:	bfb8      	it	lt
    2dfa:	4252      	neglt	r2, r2
    2dfc:	f006 bc10 	b.w	9620 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    2e00:	2341      	movs	r3, #65	; 0x41
    2e02:	e7f1      	b.n	2de8 <z_shell_op_cursor_vert_move+0x8>
}
    2e04:	4770      	bx	lr
    2e06:	bf00      	nop
    2e08:	0000cd4b 	.word	0x0000cd4b

00002e0c <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    2e0c:	1e0a      	subs	r2, r1, #0
    2e0e:	dc0d      	bgt.n	2e2c <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    2e10:	d00e      	beq.n	2e30 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    2e12:	2344      	movs	r3, #68	; 0x44
    2e14:	6881      	ldr	r1, [r0, #8]
    2e16:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    2e1a:	0689      	lsls	r1, r1, #26
    2e1c:	d508      	bpl.n	2e30 <z_shell_op_cursor_horiz_move+0x24>
    2e1e:	2a00      	cmp	r2, #0
    2e20:	4904      	ldr	r1, [pc, #16]	; (2e34 <z_shell_op_cursor_horiz_move+0x28>)
    2e22:	6940      	ldr	r0, [r0, #20]
    2e24:	bfb8      	it	lt
    2e26:	4252      	neglt	r2, r2
    2e28:	f006 bbfa 	b.w	9620 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    2e2c:	2343      	movs	r3, #67	; 0x43
    2e2e:	e7f1      	b.n	2e14 <z_shell_op_cursor_horiz_move+0x8>
}
    2e30:	4770      	bx	lr
    2e32:	bf00      	nop
    2e34:	0000cd4b 	.word	0x0000cd4b

00002e38 <z_shell_op_cursor_word_move>:

	return ret;
}

void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
    2e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int16_t shift;
	int16_t sign;

	if (val < 0) {
    2e3c:	1e0c      	subs	r4, r1, #0
{
    2e3e:	4606      	mov	r6, r0
	if (val < 0) {
    2e40:	da31      	bge.n	2ea6 <z_shell_op_cursor_word_move+0x6e>
		val = -val;
    2e42:	4264      	negs	r4, r4
    2e44:	b224      	sxth	r4, r4
		sign = -1;
    2e46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (isalnum((int)str[idx]) != 0) {
    2e4a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2eac <z_shell_op_cursor_word_move+0x74>
    2e4e:	b2a4      	uxth	r4, r4
    2e50:	b2af      	uxth	r7, r5
    2e52:	e012      	b.n	2e7a <z_shell_op_cursor_word_move+0x42>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
    2e54:	68b3      	ldr	r3, [r6, #8]
    2e56:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    2e58:	f103 0c42 	add.w	ip, r3, #66	; 0x42
    2e5c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2e5e:	4611      	mov	r1, r2
	bool found = false;
    2e60:	2000      	movs	r0, #0
		if (((idx == 0U) && (sign < 0)) ||
    2e62:	b971      	cbnz	r1, 2e82 <z_shell_op_cursor_word_move+0x4a>
    2e64:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    2e68:	d000      	beq.n	2e6c <z_shell_op_cursor_word_move+0x34>
    2e6a:	b973      	cbnz	r3, 2e8a <z_shell_op_cursor_word_move+0x52>
		idx = pos + ret * sign;
    2e6c:	1a89      	subs	r1, r1, r2
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
    2e6e:	b209      	sxth	r1, r1
    2e70:	4630      	mov	r0, r6
    2e72:	f006 fc42 	bl	96fa <z_shell_op_cursor_move>
    2e76:	3c01      	subs	r4, #1
    2e78:	b2a4      	uxth	r4, r4
	while (val--) {
    2e7a:	2c00      	cmp	r4, #0
    2e7c:	d1ea      	bne.n	2e54 <z_shell_op_cursor_word_move+0x1c>
	}
}
    2e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (((idx == 0U) && (sign < 0)) ||
    2e82:	428b      	cmp	r3, r1
    2e84:	d101      	bne.n	2e8a <z_shell_op_cursor_word_move+0x52>
		    ((idx == len) && (sign > 0))) {
    2e86:	2d01      	cmp	r5, #1
    2e88:	d0f0      	beq.n	2e6c <z_shell_op_cursor_word_move+0x34>
		if (isalnum((int)str[idx]) != 0) {
    2e8a:	f81c e001 	ldrb.w	lr, [ip, r1]
    2e8e:	f818 e00e 	ldrb.w	lr, [r8, lr]
    2e92:	f01e 0f07 	tst.w	lr, #7
    2e96:	d104      	bne.n	2ea2 <z_shell_op_cursor_word_move+0x6a>
			if (found) {
    2e98:	2800      	cmp	r0, #0
    2e9a:	d1e7      	bne.n	2e6c <z_shell_op_cursor_word_move+0x34>
	while (1) {
    2e9c:	4439      	add	r1, r7
    2e9e:	b289      	uxth	r1, r1
		idx = pos + ret * sign;
    2ea0:	e7df      	b.n	2e62 <z_shell_op_cursor_word_move+0x2a>
			found = true;
    2ea2:	2001      	movs	r0, #1
    2ea4:	e7fa      	b.n	2e9c <z_shell_op_cursor_word_move+0x64>
		sign = 1;
    2ea6:	2501      	movs	r5, #1
    2ea8:	e7cf      	b.n	2e4a <z_shell_op_cursor_word_move+0x12>
    2eaa:	bf00      	nop
    2eac:	0000d4bf 	.word	0x0000d4bf

00002eb0 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    2eb0:	6882      	ldr	r2, [r0, #8]
    2eb2:	4902      	ldr	r1, [pc, #8]	; (2ebc <z_shell_print_cmd+0xc>)
    2eb4:	6940      	ldr	r0, [r0, #20]
    2eb6:	3242      	adds	r2, #66	; 0x42
    2eb8:	f006 bbb2 	b.w	9620 <z_shell_raw_fprintf>
    2ebc:	0000c6da 	.word	0x0000c6da

00002ec0 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    2ec0:	2908      	cmp	r1, #8
{
    2ec2:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    2ec4:	d817      	bhi.n	2ef6 <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    2ec6:	6883      	ldr	r3, [r0, #8]
    2ec8:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    2ecc:	4291      	cmp	r1, r2
    2ece:	d012      	beq.n	2ef6 <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    2ed0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    2ed4:	6883      	ldr	r3, [r0, #8]
    2ed6:	2a08      	cmp	r2, #8
    2ed8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    2edc:	d005      	beq.n	2eea <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    2ede:	0699      	lsls	r1, r3, #26
    2ee0:	d509      	bpl.n	2ef6 <z_shell_vt100_color_set+0x36>
    2ee2:	4905      	ldr	r1, [pc, #20]	; (2ef8 <z_shell_vt100_color_set+0x38>)
    2ee4:	6940      	ldr	r0, [r0, #20]
    2ee6:	f006 bb9b 	b.w	9620 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    2eea:	069b      	lsls	r3, r3, #26
    2eec:	d503      	bpl.n	2ef6 <z_shell_vt100_color_set+0x36>
    2eee:	4903      	ldr	r1, [pc, #12]	; (2efc <z_shell_vt100_color_set+0x3c>)
    2ef0:	6940      	ldr	r0, [r0, #20]
    2ef2:	f006 bb95 	b.w	9620 <z_shell_raw_fprintf>
	}
}
    2ef6:	4770      	bx	lr
    2ef8:	0000cd52 	.word	0x0000cd52
    2efc:	0000bc3a 	.word	0x0000bc3a

00002f00 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    2f00:	b538      	push	{r3, r4, r5, lr}
    2f02:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    2f04:	7809      	ldrb	r1, [r1, #0]
{
    2f06:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    2f08:	f7ff ffda 	bl	2ec0 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    2f0c:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    2f0e:	2a07      	cmp	r2, #7
    2f10:	d811      	bhi.n	2f36 <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    2f12:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    2f14:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    2f18:	4291      	cmp	r1, r2
    2f1a:	d00c      	beq.n	2f36 <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    2f1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    2f20:	68a3      	ldr	r3, [r4, #8]
    2f22:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    2f26:	069b      	lsls	r3, r3, #26
    2f28:	d505      	bpl.n	2f36 <z_shell_vt100_colors_restore+0x36>
    2f2a:	6960      	ldr	r0, [r4, #20]
    2f2c:	4902      	ldr	r1, [pc, #8]	; (2f38 <z_shell_vt100_colors_restore+0x38>)
}
    2f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    2f32:	f006 bb75 	b.w	9620 <z_shell_raw_fprintf>
}
    2f36:	bd38      	pop	{r3, r4, r5, pc}
    2f38:	0000cd5b 	.word	0x0000cd5b

00002f3c <z_shell_op_word_remove>:
{
    2f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    2f3e:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    2f40:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    2f42:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
{
    2f44:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    2f46:	2a00      	cmp	r2, #0
    2f48:	d050      	beq.n	2fec <z_shell_op_word_remove+0xb0>
    2f4a:	2900      	cmp	r1, #0
    2f4c:	d04e      	beq.n	2fec <z_shell_op_word_remove+0xb0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    2f4e:	3141      	adds	r1, #65	; 0x41
	char *str_start = &shell->ctx->cmd_buff[0];
    2f50:	f103 0542 	add.w	r5, r3, #66	; 0x42
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    2f54:	440b      	add	r3, r1
	char *str_start = &shell->ctx->cmd_buff[0];
    2f56:	4618      	mov	r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    2f58:	42a8      	cmp	r0, r5
    2f5a:	d306      	bcc.n	2f6a <z_shell_op_word_remove+0x2e>
    2f5c:	4601      	mov	r1, r0
    2f5e:	f811 6901 	ldrb.w	r6, [r1], #-1
    2f62:	2e20      	cmp	r6, #32
    2f64:	d039      	beq.n	2fda <z_shell_op_word_remove+0x9e>
	while ((str >= str_start) && (*str != ' ')) {
    2f66:	42a8      	cmp	r0, r5
    2f68:	d239      	bcs.n	2fde <z_shell_op_word_remove+0xa2>
    2f6a:	b286      	uxth	r6, r0
    2f6c:	b29d      	uxth	r5, r3
    2f6e:	1bab      	subs	r3, r5, r6
    2f70:	b29b      	uxth	r3, r3
	memmove(str + 1, str + 1 + chars_to_delete,
    2f72:	1c59      	adds	r1, r3, #1
    2f74:	1c47      	adds	r7, r0, #1
    2f76:	1ad2      	subs	r2, r2, r3
    2f78:	4401      	add	r1, r0
    2f7a:	4638      	mov	r0, r7
    2f7c:	f007 fdcc 	bl	ab18 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    2f80:	68a2      	ldr	r2, [r4, #8]
    2f82:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    2f84:	1b71      	subs	r1, r6, r5
    2f86:	fa13 f381 	uxtah	r3, r3, r1
    2f8a:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    2f8c:	68a3      	ldr	r3, [r4, #8]
    2f8e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    2f90:	4413      	add	r3, r2
    2f92:	2200      	movs	r2, #0
    2f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    2f98:	b209      	sxth	r1, r1
    2f9a:	4620      	mov	r0, r4
    2f9c:	f006 fbad 	bl	96fa <z_shell_op_cursor_move>
    2fa0:	68a3      	ldr	r3, [r4, #8]
    2fa2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    2fa6:	069a      	lsls	r2, r3, #26
    2fa8:	d503      	bpl.n	2fb2 <z_shell_op_word_remove+0x76>
    2faa:	4911      	ldr	r1, [pc, #68]	; (2ff0 <z_shell_op_word_remove+0xb4>)
    2fac:	6960      	ldr	r0, [r4, #20]
    2fae:	f006 fb37 	bl	9620 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    2fb2:	463b      	mov	r3, r7
    2fb4:	4a0f      	ldr	r2, [pc, #60]	; (2ff4 <z_shell_op_word_remove+0xb8>)
    2fb6:	2108      	movs	r1, #8
    2fb8:	4620      	mov	r0, r4
    2fba:	f006 fc70 	bl	989e <z_shell_fprintf>
	z_clear_eos(shell);
    2fbe:	4620      	mov	r0, r4
    2fc0:	f7ff fefc 	bl	2dbc <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    2fc4:	68a3      	ldr	r3, [r4, #8]
    2fc6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    2fca:	069b      	lsls	r3, r3, #26
    2fcc:	d50e      	bpl.n	2fec <z_shell_op_word_remove+0xb0>
    2fce:	6960      	ldr	r0, [r4, #20]
    2fd0:	4909      	ldr	r1, [pc, #36]	; (2ff8 <z_shell_op_word_remove+0xbc>)
}
    2fd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2fd6:	f006 bb23 	b.w	9620 <z_shell_raw_fprintf>
    2fda:	4608      	mov	r0, r1
    2fdc:	e7bc      	b.n	2f58 <z_shell_op_word_remove+0x1c>
    2fde:	4601      	mov	r1, r0
	while ((str >= str_start) && (*str != ' ')) {
    2fe0:	f811 6901 	ldrb.w	r6, [r1], #-1
    2fe4:	2e20      	cmp	r6, #32
    2fe6:	d0c0      	beq.n	2f6a <z_shell_op_word_remove+0x2e>
    2fe8:	4608      	mov	r0, r1
    2fea:	e7bc      	b.n	2f66 <z_shell_op_word_remove+0x2a>
}
    2fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fee:	bf00      	nop
    2ff0:	0000bc3f 	.word	0x0000bc3f
    2ff4:	0000c6da 	.word	0x0000c6da
    2ff8:	0000bc43 	.word	0x0000bc43

00002ffc <reprint_from_cursor>:
{
    2ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3000:	4604      	mov	r4, r0
    3002:	460d      	mov	r5, r1
	if (data_removed) {
    3004:	4617      	mov	r7, r2
    3006:	b10a      	cbz	r2, 300c <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    3008:	f7ff fed8 	bl	2dbc <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    300c:	68a3      	ldr	r3, [r4, #8]
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    300e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    3010:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
    3014:	3242      	adds	r2, #66	; 0x42
    3016:	4413      	add	r3, r2
	if (z_flag_obscure_get(shell)) {
    3018:	074a      	lsls	r2, r1, #29
    301a:	d51f      	bpl.n	305c <reprint_from_cursor+0x60>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    301c:	4618      	mov	r0, r3
    301e:	f7fd fa3f 	bl	4a0 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3022:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3068 <reprint_from_cursor+0x6c>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3026:	4606      	mov	r6, r0
		while (len--) {
    3028:	b996      	cbnz	r6, 3050 <reprint_from_cursor+0x54>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    302a:	68a3      	ldr	r3, [r4, #8]
    302c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    302e:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    3030:	4620      	mov	r0, r4
    3032:	f006 fb02 	bl	963a <full_line_cmd>
    3036:	b120      	cbz	r0, 3042 <reprint_from_cursor+0x46>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    3038:	b107      	cbz	r7, 303c <reprint_from_cursor+0x40>
    303a:	b115      	cbz	r5, 3042 <reprint_from_cursor+0x46>
			z_cursor_next_line_move(shell);
    303c:	6960      	ldr	r0, [r4, #20]
    303e:	f7ff fec9 	bl	2dd4 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    3042:	4269      	negs	r1, r5
    3044:	4620      	mov	r0, r4
    3046:	b209      	sxth	r1, r1
}
    3048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    304c:	f006 bb55 	b.w	96fa <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3050:	6960      	ldr	r0, [r4, #20]
    3052:	4641      	mov	r1, r8
    3054:	f006 fae4 	bl	9620 <z_shell_raw_fprintf>
    3058:	3e01      	subs	r6, #1
    305a:	e7e5      	b.n	3028 <reprint_from_cursor+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    305c:	4a03      	ldr	r2, [pc, #12]	; (306c <reprint_from_cursor+0x70>)
    305e:	2108      	movs	r1, #8
    3060:	4620      	mov	r0, r4
    3062:	f006 fc1c 	bl	989e <z_shell_fprintf>
    3066:	e7e0      	b.n	302a <reprint_from_cursor+0x2e>
    3068:	0000c454 	.word	0x0000c454
    306c:	0000c6da 	.word	0x0000c6da

00003070 <z_shell_op_char_insert>:
{
    3070:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    3072:	6883      	ldr	r3, [r0, #8]
    3074:	f88d 1007 	strb.w	r1, [sp, #7]
    3078:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    307c:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    307e:	07d0      	lsls	r0, r2, #31
    3080:	d522      	bpl.n	30c8 <z_shell_op_char_insert+0x58>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    3082:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    3084:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    3086:	428a      	cmp	r2, r1
    3088:	d01e      	beq.n	30c8 <z_shell_op_char_insert+0x58>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    308a:	1c48      	adds	r0, r1, #1
    308c:	87d8      	strh	r0, [r3, #62]	; 0x3e
    308e:	440b      	add	r3, r1
		char_replace(shell, data);
    3090:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    3094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    3098:	68a3      	ldr	r3, [r4, #8]
    309a:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    309e:	0789      	lsls	r1, r1, #30
    30a0:	d510      	bpl.n	30c4 <z_shell_op_char_insert+0x54>
	return sh->ctx->cfg.flags.obscure == 1;
    30a2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    30a6:	6960      	ldr	r0, [r4, #20]
    30a8:	490b      	ldr	r1, [pc, #44]	; (30d8 <z_shell_op_char_insert+0x68>)
		data = '*';
    30aa:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    30ae:	bf18      	it	ne
    30b0:	222a      	movne	r2, #42	; 0x2a
    30b2:	f006 fab5 	bl	9620 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    30b6:	4620      	mov	r0, r4
    30b8:	f006 fad3 	bl	9662 <z_shell_cursor_in_empty_line>
    30bc:	b110      	cbz	r0, 30c4 <z_shell_op_char_insert+0x54>
		z_cursor_next_line_move(shell);
    30be:	6960      	ldr	r0, [r4, #20]
    30c0:	f7ff fe88 	bl	2dd4 <z_cursor_next_line_move.isra.0>
}
    30c4:	b002      	add	sp, #8
    30c6:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    30c8:	2201      	movs	r2, #1
    30ca:	f10d 0107 	add.w	r1, sp, #7
    30ce:	4620      	mov	r0, r4
    30d0:	f006 fbf2 	bl	98b8 <data_insert>
}
    30d4:	e7f6      	b.n	30c4 <z_shell_op_char_insert+0x54>
    30d6:	bf00      	nop
    30d8:	0000cd4f 	.word	0x0000cd4f

000030dc <z_shell_print_prompt_and_cmd>:
{
    30dc:	b510      	push	{r4, lr}
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    30de:	6883      	ldr	r3, [r0, #8]
    30e0:	4a09      	ldr	r2, [pc, #36]	; (3108 <z_shell_print_prompt_and_cmd+0x2c>)
    30e2:	681b      	ldr	r3, [r3, #0]
{
    30e4:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    30e6:	2102      	movs	r1, #2
    30e8:	f006 fbd9 	bl	989e <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    30ec:	68a3      	ldr	r3, [r4, #8]
    30ee:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    30f2:	079b      	lsls	r3, r3, #30
    30f4:	d507      	bpl.n	3106 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    30f6:	4620      	mov	r0, r4
    30f8:	f7ff feda 	bl	2eb0 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    30fc:	4620      	mov	r0, r4
}
    30fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    3102:	f006 bad7 	b.w	96b4 <z_shell_op_cursor_position_synchronize>
}
    3106:	bd10      	pop	{r4, pc}
    3108:	0000c6da 	.word	0x0000c6da

0000310c <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    310c:	4901      	ldr	r1, [pc, #4]	; (3114 <z_cursor_next_line_move.isra.0+0x8>)
    310e:	f006 bc34 	b.w	997a <z_shell_raw_fprintf>
    3112:	bf00      	nop
    3114:	0000c50a 	.word	0x0000c50a

00003118 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    3118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    311c:	4605      	mov	r5, r0
    311e:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    3120:	460e      	mov	r6, r1
    3122:	2900      	cmp	r1, #0
    3124:	d065      	beq.n	31f2 <formatted_text_print.constprop.0+0xda>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    3126:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 31f8 <formatted_text_print.constprop.0+0xe0>
    312a:	2400      	movs	r4, #0
    312c:	5d33      	ldrb	r3, [r6, r4]
    312e:	f819 3003 	ldrb.w	r3, [r9, r3]
    3132:	071a      	lsls	r2, r3, #28
    3134:	d41e      	bmi.n	3174 <formatted_text_print.constprop.0+0x5c>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3136:	4630      	mov	r0, r6
    3138:	f7fd f9b2 	bl	4a0 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    313c:	68ab      	ldr	r3, [r5, #8]
    313e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    3140:	b280      	uxth	r0, r0
    3142:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    3144:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
    3148:	4298      	cmp	r0, r3
    314a:	eb06 0a04 	add.w	sl, r6, r4
    314e:	d913      	bls.n	3178 <formatted_text_print.constprop.0+0x60>
    3150:	4651      	mov	r1, sl
		size_t idx = 0;
    3152:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    3154:	f811 0b01 	ldrb.w	r0, [r1], #1
    3158:	f819 c000 	ldrb.w	ip, [r9, r0]
    315c:	f01c 0f08 	tst.w	ip, #8
    3160:	d002      	beq.n	3168 <formatted_text_print.constprop.0+0x50>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    3162:	280a      	cmp	r0, #10
    3164:	d02d      	beq.n	31c2 <formatted_text_print.constprop.0+0xaa>
    3166:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
    3168:	eb08 0007 	add.w	r0, r8, r7
    316c:	4282      	cmp	r2, r0
    316e:	d927      	bls.n	31c0 <formatted_text_print.constprop.0+0xa8>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    3170:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    3172:	e7ef      	b.n	3154 <formatted_text_print.constprop.0+0x3c>
		++offset;
    3174:	3401      	adds	r4, #1
    3176:	e7d9      	b.n	312c <formatted_text_print.constprop.0+0x14>
    3178:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    317a:	2700      	movs	r7, #0
    317c:	42b8      	cmp	r0, r7
    317e:	d014      	beq.n	31aa <formatted_text_print.constprop.0+0x92>
				if (*(str + offset + idx) == '\n') {
    3180:	f813 2b01 	ldrb.w	r2, [r3], #1
    3184:	2a0a      	cmp	r2, #10
    3186:	d119      	bne.n	31bc <formatted_text_print.constprop.0+0xa4>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3188:	6968      	ldr	r0, [r5, #20]
    318a:	f006 f93c 	bl	9406 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    318e:	4651      	mov	r1, sl
    3190:	463a      	mov	r2, r7
    3192:	4628      	mov	r0, r5
    3194:	f006 fb18 	bl	97c8 <z_shell_write>
					z_cursor_next_line_move(shell);
    3198:	6968      	ldr	r0, [r5, #20]
    319a:	f7ff ffb7 	bl	310c <z_cursor_next_line_move.isra.0>
    319e:	3401      	adds	r4, #1
					z_shell_op_cursor_horiz_move(shell,
    31a0:	4641      	mov	r1, r8
    31a2:	4628      	mov	r0, r5
					offset += idx + 1;
    31a4:	443c      	add	r4, r7
					z_shell_op_cursor_horiz_move(shell,
    31a6:	f7ff fe31 	bl	2e0c <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    31aa:	6968      	ldr	r0, [r5, #20]
    31ac:	1931      	adds	r1, r6, r4
    31ae:	f006 fbe4 	bl	997a <z_shell_raw_fprintf>

		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
    31b2:	6968      	ldr	r0, [r5, #20]
}
    31b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
    31b8:	f7ff bfa8 	b.w	310c <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    31bc:	3701      	adds	r7, #1
    31be:	e7dd      	b.n	317c <formatted_text_print.constprop.0+0x64>
    31c0:	461f      	mov	r7, r3
    31c2:	6968      	ldr	r0, [r5, #20]
    31c4:	f006 f91f 	bl	9406 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    31c8:	463a      	mov	r2, r7
    31ca:	4651      	mov	r1, sl
    31cc:	4628      	mov	r0, r5
    31ce:	f006 fafb 	bl	97c8 <z_shell_write>
		offset += length;
    31d2:	443c      	add	r4, r7
		while (isspace((int) (*(str + offset)))) {
    31d4:	5d33      	ldrb	r3, [r6, r4]
    31d6:	f819 3003 	ldrb.w	r3, [r9, r3]
    31da:	071b      	lsls	r3, r3, #28
    31dc:	d407      	bmi.n	31ee <formatted_text_print.constprop.0+0xd6>
		z_cursor_next_line_move(shell);
    31de:	6968      	ldr	r0, [r5, #20]
    31e0:	f7ff ff94 	bl	310c <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    31e4:	4641      	mov	r1, r8
    31e6:	4628      	mov	r0, r5
    31e8:	f7ff fe10 	bl	2e0c <z_shell_op_cursor_horiz_move>
	while (true) {
    31ec:	e7a3      	b.n	3136 <formatted_text_print.constprop.0+0x1e>
			++offset;
    31ee:	3401      	adds	r4, #1
    31f0:	e7f0      	b.n	31d4 <formatted_text_print.constprop.0+0xbc>
}
    31f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31f6:	bf00      	nop
    31f8:	0000d4bf 	.word	0x0000d4bf

000031fc <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    31fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3200:	b08b      	sub	sp, #44	; 0x2c
    3202:	4604      	mov	r4, r0
    3204:	9102      	str	r1, [sp, #8]
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    3206:	2100      	movs	r1, #0
{
    3208:	4616      	mov	r6, r2
	uint16_t longest = 0U;
    320a:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    320c:	9802      	ldr	r0, [sp, #8]
    320e:	aa05      	add	r2, sp, #20
    3210:	f101 0801 	add.w	r8, r1, #1
    3214:	f7ff fd2a 	bl	2c6c <z_shell_cmd_get>
    3218:	b998      	cbnz	r0, 3242 <z_shell_help_subcmd_print+0x46>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    321a:	b17d      	cbz	r5, 323c <z_shell_help_subcmd_print+0x40>
		return;
	}

	if (description != NULL) {
    321c:	b126      	cbz	r6, 3228 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    321e:	4632      	mov	r2, r6
    3220:	2108      	movs	r1, #8
    3222:	4620      	mov	r0, r4
    3224:	f006 fb3b 	bl	989e <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3228:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 32d0 <z_shell_help_subcmd_print+0xd4>
    322c:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    322e:	9802      	ldr	r0, [sp, #8]
    3230:	aa05      	add	r2, sp, #20
    3232:	f101 0b01 	add.w	fp, r1, #1
    3236:	f7ff fd19 	bl	2c6c <z_shell_cmd_get>
    323a:	b960      	cbnz	r0, 3256 <z_shell_help_subcmd_print+0x5a>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    323c:	b00b      	add	sp, #44	; 0x2c
    323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    3242:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3244:	b110      	cbz	r0, 324c <z_shell_help_subcmd_print+0x50>
    3246:	f7fd f92b 	bl	4a0 <strlen>
    324a:	b280      	uxth	r0, r0
    324c:	4285      	cmp	r5, r0
    324e:	bf38      	it	cc
    3250:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3252:	4641      	mov	r1, r8
    3254:	e7da      	b.n	320c <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    3256:	e9d0 7a00 	ldrd	r7, sl, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    325a:	4640      	mov	r0, r8
    325c:	f7fd f920 	bl	4a0 <strlen>
    3260:	4681      	mov	r9, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    3262:	b1b7      	cbz	r7, 3292 <z_shell_help_subcmd_print+0x96>
    3264:	783a      	ldrb	r2, [r7, #0]
    3266:	b1a2      	cbz	r2, 3292 <z_shell_help_subcmd_print+0x96>
		uint16_t tmp = item_name_width - strlen(item_name);
    3268:	4638      	mov	r0, r7
    326a:	f7fd f919 	bl	4a0 <strlen>
		char space = ' ';
    326e:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
    3270:	1a2e      	subs	r6, r5, r0
		char space = ' ';
    3272:	f88d 2013 	strb.w	r2, [sp, #19]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
    3276:	9700      	str	r7, [sp, #0]
    3278:	4a16      	ldr	r2, [pc, #88]	; (32d4 <z_shell_help_subcmd_print+0xd8>)
    327a:	4643      	mov	r3, r8
    327c:	2108      	movs	r1, #8
    327e:	4620      	mov	r0, r4
		uint16_t tmp = item_name_width - strlen(item_name);
    3280:	b2b6      	uxth	r6, r6
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
    3282:	f006 fb0c 	bl	989e <z_shell_fprintf>
		if (item_help) {
    3286:	f1ba 0f00 	cmp.w	sl, #0
    328a:	d11f      	bne.n	32cc <z_shell_help_subcmd_print+0xd0>
		z_cursor_next_line_move(shell);
    328c:	6960      	ldr	r0, [r4, #20]
    328e:	f7ff ff3d 	bl	310c <z_cursor_next_line_move.isra.0>
		return;
    3292:	4659      	mov	r1, fp
    3294:	e7cb      	b.n	322e <z_shell_help_subcmd_print+0x32>
				z_shell_write(shell, &space, 1);
    3296:	2201      	movs	r2, #1
    3298:	f10d 0113 	add.w	r1, sp, #19
    329c:	4620      	mov	r0, r4
    329e:	9303      	str	r3, [sp, #12]
    32a0:	f006 fa92 	bl	97c8 <z_shell_write>
			for (uint16_t i = 0; i < tmp; i++) {
    32a4:	9b03      	ldr	r3, [sp, #12]
    32a6:	3301      	adds	r3, #1
    32a8:	b29a      	uxth	r2, r3
    32aa:	4296      	cmp	r6, r2
    32ac:	d8f3      	bhi.n	3296 <z_shell_help_subcmd_print+0x9a>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
    32ae:	4620      	mov	r0, r4
    32b0:	4a09      	ldr	r2, [pc, #36]	; (32d8 <z_shell_help_subcmd_print+0xdc>)
    32b2:	4643      	mov	r3, r8
    32b4:	2108      	movs	r1, #8
    32b6:	f006 faf2 	bl	989e <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    32ba:	1c6a      	adds	r2, r5, #1
    32bc:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    32c0:	b292      	uxth	r2, r2
    32c2:	4651      	mov	r1, sl
    32c4:	4620      	mov	r0, r4
    32c6:	f7ff ff27 	bl	3118 <formatted_text_print.constprop.0>
    32ca:	e7e2      	b.n	3292 <z_shell_help_subcmd_print+0x96>
    32cc:	2300      	movs	r3, #0
    32ce:	e7eb      	b.n	32a8 <z_shell_help_subcmd_print+0xac>
    32d0:	0000cd76 	.word	0x0000cd76
    32d4:	0000cb5f 	.word	0x0000cb5f
    32d8:	0000cd64 	.word	0x0000cd64

000032dc <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    32dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32de:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    32e0:	6808      	ldr	r0, [r1, #0]
{
    32e2:	460d      	mov	r5, r1
    32e4:	b1b8      	cbz	r0, 3316 <z_shell_help_cmd_print+0x3a>
    32e6:	f7fd f8db 	bl	4a0 <strlen>
    32ea:	b284      	uxth	r4, r0
    32ec:	4f0b      	ldr	r7, [pc, #44]	; (331c <z_shell_help_cmd_print+0x40>)
    32ee:	4638      	mov	r0, r7
    32f0:	f7fd f8d6 	bl	4a0 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    32f4:	9700      	str	r7, [sp, #0]
    32f6:	682b      	ldr	r3, [r5, #0]
    32f8:	4a09      	ldr	r2, [pc, #36]	; (3320 <z_shell_help_cmd_print+0x44>)
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    32fa:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    32fc:	2108      	movs	r1, #8
    32fe:	4630      	mov	r0, r6
    3300:	f006 facd 	bl	989e <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3304:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    3306:	6869      	ldr	r1, [r5, #4]
    3308:	4622      	mov	r2, r4
    330a:	4630      	mov	r0, r6
}
    330c:	b003      	add	sp, #12
    330e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    3312:	f7ff bf01 	b.w	3118 <formatted_text_print.constprop.0>
    3316:	4604      	mov	r4, r0
    3318:	e7e8      	b.n	32ec <z_shell_help_cmd_print+0x10>
    331a:	bf00      	nop
    331c:	0000cd72 	.word	0x0000cd72
    3320:	0000cb5f 	.word	0x0000cb5f

00003324 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    3324:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3326:	4907      	ldr	r1, [pc, #28]	; (3344 <z_shell_help_request+0x20>)
{
    3328:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    332a:	f7fd f8af 	bl	48c <strcmp>
    332e:	b138      	cbz	r0, 3340 <z_shell_help_request+0x1c>
    3330:	4905      	ldr	r1, [pc, #20]	; (3348 <z_shell_help_request+0x24>)
    3332:	4620      	mov	r0, r4
    3334:	f7fd f8aa 	bl	48c <strcmp>
    3338:	fab0 f080 	clz	r0, r0
    333c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    333e:	bd10      	pop	{r4, pc}
		return true;
    3340:	2001      	movs	r0, #1
    3342:	e7fc      	b.n	333e <z_shell_help_request+0x1a>
    3344:	0000cd68 	.word	0x0000cd68
    3348:	0000cd6b 	.word	0x0000cd6b

0000334c <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    334c:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    334e:	6883      	ldr	r3, [r0, #8]
    3350:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3354:	069b      	lsls	r3, r3, #26
{
    3356:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3358:	d503      	bpl.n	3362 <cmd_resize_default+0x16>
    335a:	4906      	ldr	r1, [pc, #24]	; (3374 <cmd_resize_default+0x28>)
    335c:	6940      	ldr	r0, [r0, #20]
    335e:	f006 fb1d 	bl	999c <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
    3362:	68a3      	ldr	r3, [r4, #8]
    3364:	2250      	movs	r2, #80	; 0x50
    3366:	855a      	strh	r2, [r3, #42]	; 0x2a
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    3368:	68a3      	ldr	r3, [r4, #8]
    336a:	2218      	movs	r2, #24
    336c:	851a      	strh	r2, [r3, #40]	; 0x28

	return 0;
}
    336e:	2000      	movs	r0, #0
    3370:	bd10      	pop	{r4, pc}
    3372:	bf00      	nop
    3374:	0000bc47 	.word	0x0000bc47

00003378 <cmd_shell_stats_show>:
{
    3378:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    337a:	6983      	ldr	r3, [r0, #24]
    337c:	4a03      	ldr	r2, [pc, #12]	; (338c <cmd_shell_stats_show+0x14>)
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	2108      	movs	r1, #8
    3382:	f006 f830 	bl	93e6 <shell_fprintf>
}
    3386:	2000      	movs	r0, #0
    3388:	bd08      	pop	{r3, pc}
    338a:	bf00      	nop
    338c:	0000cd79 	.word	0x0000cd79

00003390 <cmd_backends>:
{
    3390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	shell_print(sh, "Active shell backends:");
    3394:	4a0e      	ldr	r2, [pc, #56]	; (33d0 <cmd_backends+0x40>)
	STRUCT_SECTION_FOREACH(shell, obj) {
    3396:	4c0f      	ldr	r4, [pc, #60]	; (33d4 <cmd_backends+0x44>)
    3398:	4e0f      	ldr	r6, [pc, #60]	; (33d8 <cmd_backends+0x48>)
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    339a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 33dc <cmd_backends+0x4c>
	shell_print(sh, "Active shell backends:");
    339e:	2108      	movs	r1, #8
{
    33a0:	4605      	mov	r5, r0
	shell_print(sh, "Active shell backends:");
    33a2:	f006 f820 	bl	93e6 <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    33a6:	2300      	movs	r3, #0
    33a8:	42b4      	cmp	r4, r6
    33aa:	f103 0701 	add.w	r7, r3, #1
    33ae:	d303      	bcc.n	33b8 <cmd_backends+0x28>
}
    33b0:	2000      	movs	r0, #0
    33b2:	b002      	add	sp, #8
    33b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    33b8:	68a2      	ldr	r2, [r4, #8]
    33ba:	6812      	ldr	r2, [r2, #0]
    33bc:	9200      	str	r2, [sp, #0]
    33be:	b29b      	uxth	r3, r3
    33c0:	4642      	mov	r2, r8
    33c2:	2108      	movs	r1, #8
    33c4:	4628      	mov	r0, r5
    33c6:	f006 f80e 	bl	93e6 <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    33ca:	342c      	adds	r4, #44	; 0x2c
    33cc:	463b      	mov	r3, r7
    33ce:	e7eb      	b.n	33a8 <cmd_backends+0x18>
    33d0:	0000cd89 	.word	0x0000cd89
    33d4:	0000b3ac 	.word	0x0000b3ac
    33d8:	0000b404 	.word	0x0000b404
    33dc:	0000cda1 	.word	0x0000cda1

000033e0 <cmd_history>:
{
    33e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    33e2:	4e0f      	ldr	r6, [pc, #60]	; (3420 <cmd_history+0x40>)
{
    33e4:	4604      	mov	r4, r0
    33e6:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    33e8:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    33ea:	68e0      	ldr	r0, [r4, #12]
    33ec:	f10d 030e 	add.w	r3, sp, #14
    33f0:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    33f4:	2101      	movs	r1, #1
    33f6:	f006 fb59 	bl	9aac <z_shell_history_get>
		if (len) {
    33fa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    33fe:	68a3      	ldr	r3, [r4, #8]
    3400:	b150      	cbz	r0, 3418 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    3402:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    3406:	9300      	str	r3, [sp, #0]
    3408:	4632      	mov	r2, r6
    340a:	462b      	mov	r3, r5
    340c:	2108      	movs	r1, #8
    340e:	4620      	mov	r0, r4
    3410:	f005 ffe9 	bl	93e6 <shell_fprintf>
	while (1) {
    3414:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    3416:	e7e7      	b.n	33e8 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    3418:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    341c:	b004      	add	sp, #16
    341e:	bd70      	pop	{r4, r5, r6, pc}
    3420:	0000cdad 	.word	0x0000cdad

00003424 <cmd_echo>:
	if (argc == 2) {
    3424:	2902      	cmp	r1, #2
{
    3426:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    3428:	d10d      	bne.n	3446 <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    342a:	6853      	ldr	r3, [r2, #4]
    342c:	9301      	str	r3, [sp, #4]
    342e:	4b0e      	ldr	r3, [pc, #56]	; (3468 <cmd_echo+0x44>)
    3430:	9300      	str	r3, [sp, #0]
    3432:	6813      	ldr	r3, [r2, #0]
    3434:	4a0d      	ldr	r2, [pc, #52]	; (346c <cmd_echo+0x48>)
    3436:	2101      	movs	r1, #1
    3438:	f005 ffd5 	bl	93e6 <shell_fprintf>
    343c:	f06f 0015 	mvn.w	r0, #21
}
    3440:	b003      	add	sp, #12
    3442:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    3446:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    3448:	4a09      	ldr	r2, [pc, #36]	; (3470 <cmd_echo+0x4c>)
    344a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    344e:	f013 0f02 	tst.w	r3, #2
    3452:	f04f 0108 	mov.w	r1, #8
    3456:	4b07      	ldr	r3, [pc, #28]	; (3474 <cmd_echo+0x50>)
    3458:	bf08      	it	eq
    345a:	4613      	moveq	r3, r2
    345c:	4a06      	ldr	r2, [pc, #24]	; (3478 <cmd_echo+0x54>)
    345e:	f005 ffc2 	bl	93e6 <shell_fprintf>
	return 0;
    3462:	2000      	movs	r0, #0
    3464:	e7ec      	b.n	3440 <cmd_echo+0x1c>
    3466:	bf00      	nop
    3468:	0000cdc4 	.word	0x0000cdc4
    346c:	0000cdbb 	.word	0x0000cdbb
    3470:	0000cdb7 	.word	0x0000cdb7
    3474:	0000c66a 	.word	0x0000c66a
    3478:	0000cdd9 	.word	0x0000cdd9

0000347c <cmd_clear>:
{
    347c:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    347e:	6883      	ldr	r3, [r0, #8]
    3480:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3484:	069a      	lsls	r2, r3, #26
{
    3486:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3488:	d503      	bpl.n	3492 <cmd_clear+0x16>
    348a:	4907      	ldr	r1, [pc, #28]	; (34a8 <cmd_clear+0x2c>)
    348c:	6940      	ldr	r0, [r0, #20]
    348e:	f006 fa85 	bl	999c <z_shell_raw_fprintf>
    3492:	68a3      	ldr	r3, [r4, #8]
    3494:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3498:	069b      	lsls	r3, r3, #26
    349a:	d503      	bpl.n	34a4 <cmd_clear+0x28>
    349c:	4903      	ldr	r1, [pc, #12]	; (34ac <cmd_clear+0x30>)
    349e:	6960      	ldr	r0, [r4, #20]
    34a0:	f006 fa7c 	bl	999c <z_shell_raw_fprintf>
}
    34a4:	2000      	movs	r0, #0
    34a6:	bd10      	pop	{r4, pc}
    34a8:	0000bc4e 	.word	0x0000bc4e
    34ac:	0000bc53 	.word	0x0000bc53

000034b0 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    34b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    34b2:	2901      	cmp	r1, #1
{
    34b4:	b085      	sub	sp, #20
    34b6:	4604      	mov	r4, r0
	if (argc != 1) {
    34b8:	d00c      	beq.n	34d4 <cmd_resize+0x24>
		shell_error(shell, "%s:%s%s", argv[0],
    34ba:	6853      	ldr	r3, [r2, #4]
    34bc:	9301      	str	r3, [sp, #4]
    34be:	4b60      	ldr	r3, [pc, #384]	; (3640 <cmd_resize+0x190>)
    34c0:	9300      	str	r3, [sp, #0]
    34c2:	6813      	ldr	r3, [r2, #0]
    34c4:	4a5f      	ldr	r2, [pc, #380]	; (3644 <cmd_resize+0x194>)
    34c6:	2101      	movs	r1, #1
    34c8:	f005 ff8d 	bl	93e6 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    34cc:	f06f 0015 	mvn.w	r0, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    34d0:	b005      	add	sp, #20
    34d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34d4:	6883      	ldr	r3, [r0, #8]
    34d6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    34da:	0699      	lsls	r1, r3, #26
    34dc:	d503      	bpl.n	34e6 <cmd_resize+0x36>
    34de:	495a      	ldr	r1, [pc, #360]	; (3648 <cmd_resize+0x198>)
    34e0:	6940      	ldr	r0, [r0, #20]
    34e2:	f006 fa5b 	bl	999c <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    34e6:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    34ea:	4620      	mov	r0, r4
    34ec:	f7ff fc78 	bl	2de0 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    34f0:	21fa      	movs	r1, #250	; 0xfa
    34f2:	4620      	mov	r0, r4
    34f4:	f7ff fc8a 	bl	2e0c <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
    34f8:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    34fa:	2500      	movs	r5, #0
    34fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    3500:	4629      	mov	r1, r5
    3502:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3506:	f88d 500b 	strb.w	r5, [sp, #11]
    350a:	f007 fb1f 	bl	ab4c <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    350e:	494f      	ldr	r1, [pc, #316]	; (364c <cmd_resize+0x19c>)
    3510:	6960      	ldr	r0, [r4, #20]
    3512:	f006 fa43 	bl	999c <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3516:	6960      	ldr	r0, [r4, #20]
    3518:	f005 ff75 	bl	9406 <z_shell_fprintf_buffer_flush>
    351c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    3520:	6860      	ldr	r0, [r4, #4]
    3522:	6803      	ldr	r3, [r0, #0]
    3524:	2201      	movs	r2, #1
    3526:	691f      	ldr	r7, [r3, #16]
    3528:	f10d 010b 	add.w	r1, sp, #11
    352c:	ab03      	add	r3, sp, #12
    352e:	47b8      	blx	r7
			if (cnt == 0) {
    3530:	9b03      	ldr	r3, [sp, #12]
    3532:	b9f3      	cbnz	r3, 3572 <cmd_resize+0xc2>
	for (uint16_t i = 0; i < 1000; i++) {
    3534:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    3536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    353a:	b2b6      	uxth	r6, r6
    353c:	f007 f940 	bl	a7c0 <z_impl_k_busy_wait>
    3540:	2e00      	cmp	r6, #0
    3542:	d1ed      	bne.n	3520 <cmd_resize+0x70>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3544:	68a3      	ldr	r3, [r4, #8]
    3546:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    354a:	069b      	lsls	r3, r3, #26
    354c:	d503      	bpl.n	3556 <cmd_resize+0xa6>
    354e:	4940      	ldr	r1, [pc, #256]	; (3650 <cmd_resize+0x1a0>)
    3550:	6960      	ldr	r0, [r4, #20]
    3552:	f006 fa23 	bl	999c <z_shell_raw_fprintf>
		shell->ctx->vt100_ctx.cons.terminal_wid =
    3556:	68a3      	ldr	r3, [r4, #8]
    3558:	2250      	movs	r2, #80	; 0x50
    355a:	855a      	strh	r2, [r3, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei =
    355c:	68a3      	ldr	r3, [r4, #8]
    355e:	2218      	movs	r2, #24
    3560:	851a      	strh	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3562:	4620      	mov	r0, r4
    3564:	4a3b      	ldr	r2, [pc, #236]	; (3654 <cmd_resize+0x1a4>)
    3566:	2103      	movs	r1, #3
    3568:	f005 ff3d 	bl	93e6 <shell_fprintf>
    356c:	f06f 0007 	mvn.w	r0, #7
    3570:	e7ae      	b.n	34d0 <cmd_resize+0x20>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3572:	f89d 200b 	ldrb.w	r2, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    3576:	68a3      	ldr	r3, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3578:	2a1b      	cmp	r2, #27
    357a:	d053      	beq.n	3624 <cmd_resize+0x174>
    357c:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
    3580:	291b      	cmp	r1, #27
    3582:	d1cd      	bne.n	3520 <cmd_resize+0x70>
			if (c == 'R') { /* End of response from the terminal. */
    3584:	2a52      	cmp	r2, #82	; 0x52
    3586:	d14d      	bne.n	3624 <cmd_resize+0x174>
				shell->ctx->temp_buff[buff_idx] = '\0';
    3588:	195a      	adds	r2, r3, r5
    358a:	2300      	movs	r3, #0
    358c:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    3590:	68a6      	ldr	r6, [r4, #8]
    3592:	f896 2143 	ldrb.w	r2, [r6, #323]	; 0x143
    3596:	2a5b      	cmp	r2, #91	; 0x5b
    3598:	d12b      	bne.n	35f2 <cmd_resize+0x142>
    359a:	f206 1043 	addw	r0, r6, #323	; 0x143
				buff_idx = 2U;
    359e:	2502      	movs	r5, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    35a0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    35a4:	462a      	mov	r2, r5
    35a6:	293b      	cmp	r1, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    35a8:	f105 0501 	add.w	r5, r5, #1
    35ac:	b2ad      	uxth	r5, r5
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    35ae:	d123      	bne.n	35f8 <cmd_resize+0x148>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    35b0:	2aff      	cmp	r2, #255	; 0xff
    35b2:	d0c7      	beq.n	3544 <cmd_resize+0x94>
    35b4:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    35b8:	fa16 f182 	uxtah	r1, r6, r2
	*x = 0U;
    35bc:	2200      	movs	r2, #0
				while (shell->ctx->temp_buff[buff_idx]
    35be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
							     != '\0') {
    35c2:	bb18      	cbnz	r0, 360c <cmd_resize+0x15c>
				shell->ctx->temp_buff[0] = 0;
    35c4:	f886 0142 	strb.w	r0, [r6, #322]	; 0x142
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    35c8:	2afa      	cmp	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    35ca:	68a1      	ldr	r1, [r4, #8]
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    35cc:	bf28      	it	cs
    35ce:	22fa      	movcs	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    35d0:	854a      	strh	r2, [r1, #42]	; 0x2a
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    35d2:	2bfa      	cmp	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    35d4:	68a2      	ldr	r2, [r4, #8]
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    35d6:	bf28      	it	cs
    35d8:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    35da:	8513      	strh	r3, [r2, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    35dc:	68a3      	ldr	r3, [r4, #8]
    35de:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    35e2:	069a      	lsls	r2, r3, #26
    35e4:	d503      	bpl.n	35ee <cmd_resize+0x13e>
    35e6:	491a      	ldr	r1, [pc, #104]	; (3650 <cmd_resize+0x1a0>)
    35e8:	6960      	ldr	r0, [r4, #20]
    35ea:	f006 f9d7 	bl	999c <z_shell_raw_fprintf>
	return 0;
    35ee:	2000      	movs	r0, #0
    35f0:	e76e      	b.n	34d0 <cmd_resize+0x20>
					shell->ctx->temp_buff[0] = 0;
    35f2:	f886 3142 	strb.w	r3, [r6, #322]	; 0x142
					return -EIO;
    35f6:	e7a5      	b.n	3544 <cmd_resize+0x94>
					*y = *y * 10U +
    35f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    35fc:	3930      	subs	r1, #48	; 0x30
    35fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
					if (buff_idx >=
    3602:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*y = *y * 10U +
    3606:	b28b      	uxth	r3, r1
					if (buff_idx >=
    3608:	d1ca      	bne.n	35a0 <cmd_resize+0xf0>
    360a:	e79b      	b.n	3544 <cmd_resize+0x94>
					(shell->ctx->temp_buff[buff_idx++] -
    360c:	3501      	adds	r5, #1
					*x = *x * 10U +
    360e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    3612:	b2ad      	uxth	r5, r5
					*x = *x * 10U +
    3614:	3830      	subs	r0, #48	; 0x30
    3616:	eb00 0042 	add.w	r0, r0, r2, lsl #1
					if (buff_idx >=
    361a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*x = *x * 10U +
    361e:	b282      	uxth	r2, r0
					if (buff_idx >=
    3620:	d1cd      	bne.n	35be <cmd_resize+0x10e>
    3622:	e78f      	b.n	3544 <cmd_resize+0x94>
			shell->ctx->temp_buff[buff_idx] = c;
    3624:	442b      	add	r3, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3626:	3501      	adds	r5, #1
    3628:	b2ad      	uxth	r5, r5
    362a:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    362c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3630:	f67f af76 	bls.w	3520 <cmd_resize+0x70>
				shell->ctx->temp_buff[0] = 0;
    3634:	68a3      	ldr	r3, [r4, #8]
    3636:	2200      	movs	r2, #0
    3638:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				return -ENOMEM;
    363c:	e782      	b.n	3544 <cmd_resize+0x94>
    363e:	bf00      	nop
    3640:	0000cdc4 	.word	0x0000cdc4
    3644:	0000cdbb 	.word	0x0000cdbb
    3648:	0000bc59 	.word	0x0000bc59
    364c:	0000ce24 	.word	0x0000ce24
    3650:	0000bc5d 	.word	0x0000bc5d
    3654:	0000cdea 	.word	0x0000cdea

00003658 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    3658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    365c:	4607      	mov	r7, r0
    365e:	b089      	sub	sp, #36	; 0x24
    3660:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    3662:	4689      	mov	r9, r1
    3664:	b921      	cbnz	r1, 3670 <z_shell_wildcard_process+0x18>
		return ret_val;
    3666:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    3668:	4620      	mov	r0, r4
    366a:	b009      	add	sp, #36	; 0x24
    366c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    3670:	4610      	mov	r0, r2
    3672:	f006 fac0 	bl	9bf6 <z_shell_has_wildcard>
    3676:	2800      	cmp	r0, #0
    3678:	d0f5      	beq.n	3666 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    367a:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    367e:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3680:	2402      	movs	r4, #2
    3682:	e024      	b.n	36ce <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3684:	465c      	mov	r4, fp
    3686:	e03c      	b.n	3702 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    3688:	4629      	mov	r1, r5
    368a:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    368e:	f007 fab4 	bl	abfa <strstr>
	if (!completion_addr) {
    3692:	4606      	mov	r6, r0
    3694:	2800      	cmp	r0, #0
    3696:	d04c      	beq.n	3732 <z_shell_wildcard_process+0xda>
    3698:	f7fc ff02 	bl	4a0 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    369c:	b282      	uxth	r2, r0
    369e:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
    36a0:	3201      	adds	r2, #1
    36a2:	4631      	mov	r1, r6
    36a4:	4430      	add	r0, r6
    36a6:	f007 fa37 	bl	ab18 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    36aa:	4622      	mov	r2, r4
    36ac:	4659      	mov	r1, fp
    36ae:	4630      	mov	r0, r6
    36b0:	f007 fa24 	bl	aafc <memcpy>
	completion_addr[cmd_len] = ' ';
    36b4:	f04f 0320 	mov.w	r3, #32
    36b8:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    36ba:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    36be:	3301      	adds	r3, #1
    36c0:	441c      	add	r4, r3
    36c2:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    36c6:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    36ca:	2400      	movs	r4, #0
    36cc:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    36ce:	1c4b      	adds	r3, r1, #1
    36d0:	aa03      	add	r2, sp, #12
    36d2:	4648      	mov	r0, r9
    36d4:	9301      	str	r3, [sp, #4]
    36d6:	f7ff fac9 	bl	2c6c <z_shell_cmd_get>
    36da:	4606      	mov	r6, r0
    36dc:	b1e8      	cbz	r0, 371a <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    36de:	6831      	ldr	r1, [r6, #0]
    36e0:	2200      	movs	r2, #0
    36e2:	4628      	mov	r0, r5
    36e4:	f005 fc94 	bl	9010 <fnmatch>
    36e8:	2800      	cmp	r0, #0
    36ea:	d1ef      	bne.n	36cc <z_shell_wildcard_process+0x74>
					      entry->syntax, pattern);
    36ec:	f8d6 b000 	ldr.w	fp, [r6]
			ret_val = command_add(shell->ctx->temp_buff,
    36f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
    36f4:	f1bb 0f00 	cmp.w	fp, #0
    36f8:	d0c4      	beq.n	3684 <z_shell_wildcard_process+0x2c>
    36fa:	4658      	mov	r0, fp
    36fc:	f7fc fed0 	bl	4a0 <strlen>
    3700:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    3702:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    3706:	4423      	add	r3, r4
    3708:	2bff      	cmp	r3, #255	; 0xff
    370a:	ddbd      	ble.n	3688 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    370c:	4a0a      	ldr	r2, [pc, #40]	; (3738 <z_shell_wildcard_process+0xe0>)
    370e:	462b      	mov	r3, r5
    3710:	2103      	movs	r1, #3
    3712:	4638      	mov	r0, r7
    3714:	f006 f8c3 	bl	989e <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    3718:	2401      	movs	r4, #1
	if (cnt > 0) {
    371a:	f1b8 0f00 	cmp.w	r8, #0
    371e:	d0a3      	beq.n	3668 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    3720:	68b8      	ldr	r0, [r7, #8]
    3722:	462a      	mov	r2, r5
    3724:	f100 0140 	add.w	r1, r0, #64	; 0x40
    3728:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    372c:	f005 fecb 	bl	94c6 <z_shell_pattern_remove>
	return ret_val;
    3730:	e79a      	b.n	3668 <z_shell_wildcard_process+0x10>
    3732:	2402      	movs	r4, #2
    3734:	e7f1      	b.n	371a <z_shell_wildcard_process+0xc2>
    3736:	bf00      	nop
    3738:	0000d213 	.word	0x0000d213

0000373c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3740:	4605      	mov	r5, r0
    3742:	f04f 0320 	mov.w	r3, #32
    3746:	f3ef 8611 	mrs	r6, BASEPRI
    374a:	f383 8812 	msr	BASEPRI_MAX, r3
    374e:	f3bf 8f6f 	isb	sy
	return list->head;
    3752:	4b0e      	ldr	r3, [pc, #56]	; (378c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3754:	4f0e      	ldr	r7, [pc, #56]	; (3790 <pm_state_notify+0x54>)
    3756:	681c      	ldr	r4, [r3, #0]
    3758:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3794 <pm_state_notify+0x58>
    375c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3760:	b92c      	cbnz	r4, 376e <pm_state_notify+0x32>
	__asm__ volatile(
    3762:	f386 8811 	msr	BASEPRI, r6
    3766:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    376e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3772:	2d00      	cmp	r5, #0
    3774:	bf18      	it	ne
    3776:	4613      	movne	r3, r2
		if (callback) {
    3778:	b12b      	cbz	r3, 3786 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    377a:	f898 2014 	ldrb.w	r2, [r8, #20]
    377e:	fb09 f202 	mul.w	r2, r9, r2
    3782:	5cb8      	ldrb	r0, [r7, r2]
    3784:	4798      	blx	r3
	return node->next;
    3786:	6824      	ldr	r4, [r4, #0]
    3788:	e7ea      	b.n	3760 <pm_state_notify+0x24>
    378a:	bf00      	nop
    378c:	20000fb0 	.word	0x20000fb0
    3790:	20000fa4 	.word	0x20000fa4
    3794:	20001624 	.word	0x20001624

00003798 <pm_system_resume>:

void pm_system_resume(void)
{
    3798:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    379a:	4b19      	ldr	r3, [pc, #100]	; (3800 <pm_system_resume+0x68>)
    379c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    379e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    37a2:	f004 031f 	and.w	r3, r4, #31
    37a6:	2201      	movs	r2, #1
    37a8:	409a      	lsls	r2, r3
    37aa:	4b16      	ldr	r3, [pc, #88]	; (3804 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    37ac:	0961      	lsrs	r1, r4, #5
    37ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    37b2:	43d0      	mvns	r0, r2
    37b4:	e853 1f00 	ldrex	r1, [r3]
    37b8:	ea01 0500 	and.w	r5, r1, r0
    37bc:	e843 5600 	strex	r6, r5, [r3]
    37c0:	2e00      	cmp	r6, #0
    37c2:	d1f7      	bne.n	37b4 <pm_system_resume+0x1c>
    37c4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    37c8:	420a      	tst	r2, r1
    37ca:	d013      	beq.n	37f4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    37cc:	4b0e      	ldr	r3, [pc, #56]	; (3808 <pm_system_resume+0x70>)
    37ce:	4d0f      	ldr	r5, [pc, #60]	; (380c <pm_system_resume+0x74>)
    37d0:	b18b      	cbz	r3, 37f6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    37d2:	230c      	movs	r3, #12
    37d4:	4363      	muls	r3, r4
    37d6:	18ea      	adds	r2, r5, r3
    37d8:	5ce8      	ldrb	r0, [r5, r3]
    37da:	7851      	ldrb	r1, [r2, #1]
    37dc:	f006 faa2 	bl	9d24 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    37e0:	2000      	movs	r0, #0
    37e2:	f7ff ffab 	bl	373c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    37e6:	230c      	movs	r3, #12
    37e8:	435c      	muls	r4, r3
    37ea:	192a      	adds	r2, r5, r4
    37ec:	2300      	movs	r3, #0
    37ee:	512b      	str	r3, [r5, r4]
    37f0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	f383 8811 	msr	BASEPRI, r3
    37fa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    37fe:	e7ef      	b.n	37e0 <pm_system_resume+0x48>
    3800:	20001624 	.word	0x20001624
    3804:	20000fb8 	.word	0x20000fb8
    3808:	00009d25 	.word	0x00009d25
    380c:	20000fa4 	.word	0x20000fa4

00003810 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    3810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    3814:	4b35      	ldr	r3, [pc, #212]	; (38ec <pm_system_suspend+0xdc>)
{
    3816:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    3818:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    381a:	f04f 0320 	mov.w	r3, #32
    381e:	f3ef 8811 	mrs	r8, BASEPRI
    3822:	f383 8812 	msr	BASEPRI_MAX, r3
    3826:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    382a:	240c      	movs	r4, #12
    382c:	4b30      	ldr	r3, [pc, #192]	; (38f0 <pm_system_suspend+0xe0>)
    382e:	4e31      	ldr	r6, [pc, #196]	; (38f4 <pm_system_suspend+0xe4>)
    3830:	436c      	muls	r4, r5
    3832:	191a      	adds	r2, r3, r4
    3834:	5d19      	ldrb	r1, [r3, r4]
    3836:	2900      	cmp	r1, #0
    3838:	d04c      	beq.n	38d4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    383a:	ca07      	ldmia	r2, {r0, r1, r2}
    383c:	eb06 0c04 	add.w	ip, r6, r4
    3840:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    3844:	2200      	movs	r2, #0
    3846:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    3848:	f388 8811 	msr	BASEPRI, r8
    384c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3850:	230c      	movs	r3, #12
    3852:	436b      	muls	r3, r5
    3854:	18f2      	adds	r2, r6, r3
    3856:	5cf0      	ldrb	r0, [r6, r3]
    3858:	2800      	cmp	r0, #0
    385a:	d039      	beq.n	38d0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    385c:	1c7b      	adds	r3, r7, #1
    385e:	d010      	beq.n	3882 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3860:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3864:	4c24      	ldr	r4, [pc, #144]	; (38f8 <pm_system_suspend+0xe8>)
    3866:	4a25      	ldr	r2, [pc, #148]	; (38fc <pm_system_suspend+0xec>)
    3868:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    386c:	2100      	movs	r1, #0
    386e:	fbec 4100 	umlal	r4, r1, ip, r0
    3872:	2300      	movs	r3, #0
    3874:	4620      	mov	r0, r4
    3876:	f7fc fc9f 	bl	1b8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    387a:	2101      	movs	r1, #1
    387c:	1a38      	subs	r0, r7, r0
    387e:	f006 ff7d 	bl	a77c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3882:	f003 fa19 	bl	6cb8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    3886:	2001      	movs	r0, #1
    3888:	f7ff ff58 	bl	373c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    388c:	f3bf 8f5b 	dmb	ish
    3890:	4b1b      	ldr	r3, [pc, #108]	; (3900 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3892:	096a      	lsrs	r2, r5, #5
    3894:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    3898:	f005 011f 	and.w	r1, r5, #31
    389c:	2201      	movs	r2, #1
    389e:	408a      	lsls	r2, r1
    38a0:	e853 0f00 	ldrex	r0, [r3]
    38a4:	4310      	orrs	r0, r2
    38a6:	e843 0100 	strex	r1, r0, [r3]
    38aa:	2900      	cmp	r1, #0
    38ac:	d1f8      	bne.n	38a0 <pm_system_suspend+0x90>
    38ae:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    38b2:	4b14      	ldr	r3, [pc, #80]	; (3904 <pm_system_suspend+0xf4>)
    38b4:	b13b      	cbz	r3, 38c6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    38b6:	230c      	movs	r3, #12
    38b8:	fb03 f005 	mul.w	r0, r3, r5
    38bc:	1833      	adds	r3, r6, r0
    38be:	5c30      	ldrb	r0, [r6, r0]
    38c0:	7859      	ldrb	r1, [r3, #1]
    38c2:	f006 fa23 	bl	9d0c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    38c6:	f7ff ff67 	bl	3798 <pm_system_resume>
	k_sched_unlock();
    38ca:	f003 fa09 	bl	6ce0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    38ce:	2001      	movs	r0, #1
}
    38d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    38d4:	4601      	mov	r1, r0
    38d6:	4628      	mov	r0, r5
    38d8:	f000 f816 	bl	3908 <pm_policy_next_state>
		if (info != NULL) {
    38dc:	2800      	cmp	r0, #0
    38de:	d0b3      	beq.n	3848 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    38e0:	c807      	ldmia	r0, {r0, r1, r2}
    38e2:	4434      	add	r4, r6
    38e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    38e8:	e7ae      	b.n	3848 <pm_system_suspend+0x38>
    38ea:	bf00      	nop
    38ec:	20001624 	.word	0x20001624
    38f0:	20000f98 	.word	0x20000f98
    38f4:	20000fa4 	.word	0x20000fa4
    38f8:	000f423f 	.word	0x000f423f
    38fc:	000f4240 	.word	0x000f4240
    3900:	20000fb8 	.word	0x20000fb8
    3904:	00009d0d 	.word	0x00009d0d

00003908 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    390c:	b085      	sub	sp, #20
    390e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3910:	a903      	add	r1, sp, #12
    3912:	f000 f843 	bl	399c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3916:	4b1e      	ldr	r3, [pc, #120]	; (3990 <pm_policy_next_state+0x88>)
    3918:	9d03      	ldr	r5, [sp, #12]
    391a:	f8d3 a000 	ldr.w	sl, [r3]
    391e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3994 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3922:	1e43      	subs	r3, r0, #1
    3924:	b21b      	sxth	r3, r3
    3926:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    392a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    392c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3930:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3934:	f04f 0b00 	mov.w	fp, #0
    3938:	b924      	cbnz	r4, 3944 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    393a:	46a1      	mov	r9, r4
}
    393c:	4648      	mov	r0, r9
    393e:	b005      	add	sp, #20
    3940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3944:	6868      	ldr	r0, [r5, #4]
    3946:	4a14      	ldr	r2, [pc, #80]	; (3998 <pm_policy_next_state+0x90>)
    3948:	46c4      	mov	ip, r8
    394a:	4659      	mov	r1, fp
    394c:	fbe0 c107 	umlal	ip, r1, r0, r7
    3950:	2300      	movs	r3, #0
    3952:	4660      	mov	r0, ip
    3954:	f7fc fc30 	bl	1b8 <__aeabi_uldivmod>
    3958:	9001      	str	r0, [sp, #4]
    395a:	68a8      	ldr	r0, [r5, #8]
    395c:	4a0e      	ldr	r2, [pc, #56]	; (3998 <pm_policy_next_state+0x90>)
    395e:	46c4      	mov	ip, r8
    3960:	4659      	mov	r1, fp
    3962:	fbe0 c107 	umlal	ip, r1, r0, r7
    3966:	2300      	movs	r3, #0
    3968:	4660      	mov	r0, ip
    396a:	f7fc fc25 	bl	1b8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    396e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    3972:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3974:	d001      	beq.n	397a <pm_policy_next_state+0x72>
    3976:	4582      	cmp	sl, r0
    3978:	d905      	bls.n	3986 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    397a:	1c73      	adds	r3, r6, #1
    397c:	d0de      	beq.n	393c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    397e:	9b01      	ldr	r3, [sp, #4]
    3980:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    3982:	42b0      	cmp	r0, r6
    3984:	d9da      	bls.n	393c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3986:	3c01      	subs	r4, #1
    3988:	b2a4      	uxth	r4, r4
    398a:	3d0c      	subs	r5, #12
    398c:	e7d4      	b.n	3938 <pm_policy_next_state+0x30>
    398e:	bf00      	nop
    3990:	200000e8 	.word	0x200000e8
    3994:	000f423f 	.word	0x000f423f
    3998:	000f4240 	.word	0x000f4240

0000399c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    399c:	b908      	cbnz	r0, 39a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    399e:	4b02      	ldr	r3, [pc, #8]	; (39a8 <pm_state_cpu_get_all+0xc>)
    39a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    39a2:	2000      	movs	r0, #0
    39a4:	4770      	bx	lr
    39a6:	bf00      	nop
    39a8:	0000c0b4 	.word	0x0000c0b4

000039ac <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    39ac:	4801      	ldr	r0, [pc, #4]	; (39b4 <nrf_cc3xx_platform_abort_init+0x8>)
    39ae:	f004 be33 	b.w	8618 <nrf_cc3xx_platform_set_abort>
    39b2:	bf00      	nop
    39b4:	0000c0b4 	.word	0x0000c0b4

000039b8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    39b8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    39ba:	4604      	mov	r4, r0
    39bc:	b918      	cbnz	r0, 39c6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    39be:	4b0f      	ldr	r3, [pc, #60]	; (39fc <mutex_free_platform+0x44>)
    39c0:	480f      	ldr	r0, [pc, #60]	; (3a00 <mutex_free_platform+0x48>)
    39c2:	685b      	ldr	r3, [r3, #4]
    39c4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    39c6:	6861      	ldr	r1, [r4, #4]
    39c8:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    39cc:	d00f      	beq.n	39ee <mutex_free_platform+0x36>
    39ce:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    39d2:	d00c      	beq.n	39ee <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    39d4:	4d0b      	ldr	r5, [pc, #44]	; (3a04 <mutex_free_platform+0x4c>)
    39d6:	42a9      	cmp	r1, r5
    39d8:	d009      	beq.n	39ee <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    39da:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    39de:	d007      	beq.n	39f0 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    39e0:	4809      	ldr	r0, [pc, #36]	; (3a08 <mutex_free_platform+0x50>)
    39e2:	4621      	mov	r1, r4
    39e4:	f006 fd6a 	bl	a4bc <k_mem_slab_free>
        mutex->mutex = NULL;
    39e8:	2300      	movs	r3, #0
    39ea:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    39ec:	6065      	str	r5, [r4, #4]
}
    39ee:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
    39f0:	6820      	ldr	r0, [r4, #0]
    39f2:	2214      	movs	r2, #20
    39f4:	f007 f8aa 	bl	ab4c <memset>
    39f8:	e7f8      	b.n	39ec <mutex_free_platform+0x34>
    39fa:	bf00      	nop
    39fc:	20000278 	.word	0x20000278
    3a00:	0000d268 	.word	0x0000d268
    3a04:	a95c5f2c 	.word	0xa95c5f2c
    3a08:	200014bc 	.word	0x200014bc

00003a0c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a0c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a0e:	b320      	cbz	r0, 3a5a <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3a10:	6843      	ldr	r3, [r0, #4]
    3a12:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3a16:	d110      	bne.n	3a3a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a18:	2201      	movs	r2, #1
    3a1a:	6803      	ldr	r3, [r0, #0]
    3a1c:	f3bf 8f5b 	dmb	ish
    3a20:	e853 1f00 	ldrex	r1, [r3]
    3a24:	2900      	cmp	r1, #0
    3a26:	d103      	bne.n	3a30 <mutex_lock_platform+0x24>
    3a28:	e843 2000 	strex	r0, r2, [r3]
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d1f7      	bne.n	3a20 <mutex_lock_platform+0x14>
    3a30:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a34:	d10d      	bne.n	3a52 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3a36:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3a38:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a3a:	4a09      	ldr	r2, [pc, #36]	; (3a60 <mutex_lock_platform+0x54>)
    3a3c:	4293      	cmp	r3, r2
    3a3e:	d00a      	beq.n	3a56 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3a40:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a4a:	f002 fe25 	bl	6698 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3a4e:	2800      	cmp	r0, #0
    3a50:	d0f1      	beq.n	3a36 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a52:	4804      	ldr	r0, [pc, #16]	; (3a64 <mutex_lock_platform+0x58>)
    3a54:	e7f0      	b.n	3a38 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3a56:	4804      	ldr	r0, [pc, #16]	; (3a68 <mutex_lock_platform+0x5c>)
    3a58:	e7ee      	b.n	3a38 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3a5a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3a5e:	e7eb      	b.n	3a38 <mutex_lock_platform+0x2c>
    3a60:	a95c5f2c 	.word	0xa95c5f2c
    3a64:	ffff8fe9 	.word	0xffff8fe9
    3a68:	ffff8fea 	.word	0xffff8fea

00003a6c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a6c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a6e:	b1d8      	cbz	r0, 3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3a70:	6843      	ldr	r3, [r0, #4]
    3a72:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3a76:	d110      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a78:	2200      	movs	r2, #0
    3a7a:	6803      	ldr	r3, [r0, #0]
    3a7c:	f3bf 8f5b 	dmb	ish
    3a80:	e853 1f00 	ldrex	r1, [r3]
    3a84:	2901      	cmp	r1, #1
    3a86:	d103      	bne.n	3a90 <mutex_unlock_platform+0x24>
    3a88:	e843 2000 	strex	r0, r2, [r3]
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d1f7      	bne.n	3a80 <mutex_unlock_platform+0x14>
    3a90:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a94:	d10b      	bne.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3a96:	2000      	movs	r0, #0
    }
}
    3a98:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a9a:	4a07      	ldr	r2, [pc, #28]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a9c:	4293      	cmp	r3, r2
    3a9e:	d008      	beq.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3aa0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3aa2:	f002 fe73 	bl	678c <z_impl_k_mutex_unlock>
    3aa6:	e7f6      	b.n	3a96 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3aa8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3aac:	e7f4      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3aae:	4803      	ldr	r0, [pc, #12]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3ab0:	e7f2      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ab2:	4803      	ldr	r0, [pc, #12]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3ab4:	e7f0      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3ab6:	bf00      	nop
    3ab8:	a95c5f2c 	.word	0xa95c5f2c
    3abc:	ffff8fe9 	.word	0xffff8fe9
    3ac0:	ffff8fea 	.word	0xffff8fea

00003ac4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ac4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3ac6:	4604      	mov	r4, r0
    3ac8:	b918      	cbnz	r0, 3ad2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3aca:	4b1d      	ldr	r3, [pc, #116]	; (3b40 <mutex_init_platform+0x7c>)
    3acc:	481d      	ldr	r0, [pc, #116]	; (3b44 <mutex_init_platform+0x80>)
    3ace:	685b      	ldr	r3, [r3, #4]
    3ad0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3ad2:	6863      	ldr	r3, [r4, #4]
    3ad4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3ad8:	d02f      	beq.n	3b3a <mutex_init_platform+0x76>
    3ada:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3ade:	d02c      	beq.n	3b3a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    3ae0:	4a19      	ldr	r2, [pc, #100]	; (3b48 <mutex_init_platform+0x84>)
    3ae2:	4293      	cmp	r3, r2
    3ae4:	d119      	bne.n	3b1a <mutex_init_platform+0x56>
    3ae6:	6823      	ldr	r3, [r4, #0]
    3ae8:	bb03      	cbnz	r3, 3b2c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3aea:	4818      	ldr	r0, [pc, #96]	; (3b4c <mutex_init_platform+0x88>)
    3aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3af4:	4621      	mov	r1, r4
    3af6:	f002 fbfd 	bl	62f4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3afa:	b908      	cbnz	r0, 3b00 <mutex_init_platform+0x3c>
    3afc:	6823      	ldr	r3, [r4, #0]
    3afe:	b91b      	cbnz	r3, 3b08 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3b00:	4b0f      	ldr	r3, [pc, #60]	; (3b40 <mutex_init_platform+0x7c>)
    3b02:	4813      	ldr	r0, [pc, #76]	; (3b50 <mutex_init_platform+0x8c>)
    3b04:	685b      	ldr	r3, [r3, #4]
    3b06:	4798      	blx	r3
    3b08:	6820      	ldr	r0, [r4, #0]
    3b0a:	2214      	movs	r2, #20
    3b0c:	2100      	movs	r1, #0
    3b0e:	f007 f81d 	bl	ab4c <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3b12:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    3b16:	6063      	str	r3, [r4, #4]
    3b18:	e008      	b.n	3b2c <mutex_init_platform+0x68>
    switch(flags){
    3b1a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3b1e:	d80d      	bhi.n	3b3c <mutex_init_platform+0x78>
    3b20:	2b3a      	cmp	r3, #58	; 0x3a
    3b22:	d003      	beq.n	3b2c <mutex_init_platform+0x68>
    3b24:	f640 62ba 	movw	r2, #3770	; 0xeba
    3b28:	4293      	cmp	r3, r2
    3b2a:	d1de      	bne.n	3aea <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3b2c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3b2e:	f006 fd19 	bl	a564 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3b32:	6863      	ldr	r3, [r4, #4]
    3b34:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    3b38:	6063      	str	r3, [r4, #4]
}
    3b3a:	bd10      	pop	{r4, pc}
    switch(flags){
    3b3c:	4a05      	ldr	r2, [pc, #20]	; (3b54 <mutex_init_platform+0x90>)
    3b3e:	e7f3      	b.n	3b28 <mutex_init_platform+0x64>
    3b40:	20000278 	.word	0x20000278
    3b44:	0000d268 	.word	0x0000d268
    3b48:	a95c5f2c 	.word	0xa95c5f2c
    3b4c:	200014bc 	.word	0x200014bc
    3b50:	0000d28e 	.word	0x0000d28e
    3b54:	3a00003a 	.word	0x3a00003a

00003b58 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3b58:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3b5a:	4906      	ldr	r1, [pc, #24]	; (3b74 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3b5c:	4806      	ldr	r0, [pc, #24]	; (3b78 <nrf_cc3xx_platform_mutex_init+0x20>)
    3b5e:	2340      	movs	r3, #64	; 0x40
    3b60:	2214      	movs	r2, #20
    3b62:	f006 fc9d 	bl	a4a0 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3b6a:	4904      	ldr	r1, [pc, #16]	; (3b7c <nrf_cc3xx_platform_mutex_init+0x24>)
    3b6c:	4804      	ldr	r0, [pc, #16]	; (3b80 <nrf_cc3xx_platform_mutex_init+0x28>)
    3b6e:	f004 bdc5 	b.w	86fc <nrf_cc3xx_platform_set_mutexes>
    3b72:	bf00      	nop
    3b74:	20000fbc 	.word	0x20000fbc
    3b78:	200014bc 	.word	0x200014bc
    3b7c:	0000c0bc 	.word	0x0000c0bc
    3b80:	0000c0d0 	.word	0x0000c0d0

00003b84 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3b84:	4901      	ldr	r1, [pc, #4]	; (3b8c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3b86:	2210      	movs	r2, #16
	str	r2, [r1]
    3b88:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3b8a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3b8c:	e000ed10 	.word	0xe000ed10

00003b90 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3b90:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3b92:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3b94:	f380 8811 	msr	BASEPRI, r0
	isb
    3b98:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3b9c:	f3bf 8f4f 	dsb	sy
    3ba0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ba2:	b662      	cpsie	i
	isb
    3ba4:	f3bf 8f6f 	isb	sy

	bx	lr
    3ba8:	4770      	bx	lr
    3baa:	bf00      	nop

00003bac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3bac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3bae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3bb0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3bb4:	f3bf 8f4f 	dsb	sy
    3bb8:	bf20      	wfe

	msr	BASEPRI, r0
    3bba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3bbe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop

00003bc4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3bc4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3bc6:	2800      	cmp	r0, #0
    3bc8:	db07      	blt.n	3bda <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bca:	4a04      	ldr	r2, [pc, #16]	; (3bdc <arch_irq_enable+0x18>)
    3bcc:	0941      	lsrs	r1, r0, #5
    3bce:	2301      	movs	r3, #1
    3bd0:	f000 001f 	and.w	r0, r0, #31
    3bd4:	4083      	lsls	r3, r0
    3bd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3bda:	4770      	bx	lr
    3bdc:	e000e100 	.word	0xe000e100

00003be0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3be0:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <arch_irq_is_enabled+0x18>)
    3be2:	0942      	lsrs	r2, r0, #5
    3be4:	f000 001f 	and.w	r0, r0, #31
    3be8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3bec:	2301      	movs	r3, #1
    3bee:	fa03 f000 	lsl.w	r0, r3, r0
}
    3bf2:	4010      	ands	r0, r2
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop
    3bf8:	e000e100 	.word	0xe000e100

00003bfc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3bfc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3bfe:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c00:	bfa8      	it	ge
    3c02:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3c06:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c0a:	bfb8      	it	lt
    3c0c:	4b06      	ldrlt	r3, [pc, #24]	; (3c28 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c0e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3c12:	bfac      	ite	ge
    3c14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c1c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c1e:	bfb4      	ite	lt
    3c20:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c22:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3c26:	4770      	bx	lr
    3c28:	e000ed14 	.word	0xe000ed14

00003c2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3c2c:	bf30      	wfi
    b z_SysNmiOnReset
    3c2e:	f7ff bffd 	b.w	3c2c <z_SysNmiOnReset>
    3c32:	bf00      	nop

00003c34 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c34:	4a0b      	ldr	r2, [pc, #44]	; (3c64 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3c36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c38:	4b0b      	ldr	r3, [pc, #44]	; (3c68 <z_arm_prep_c+0x34>)
    3c3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3c3e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3c40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3c4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3c54:	f002 fa84 	bl	6160 <z_bss_zero>
	z_data_copy();
    3c58:	f003 f982 	bl	6f60 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3c5c:	f000 f9e2 	bl	4024 <z_arm_interrupt_init>
	z_cstart();
    3c60:	f002 fac6 	bl	61f0 <z_cstart>
    3c64:	00000000 	.word	0x00000000
    3c68:	e000ed00 	.word	0xe000ed00

00003c6c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3c6c:	4a0a      	ldr	r2, [pc, #40]	; (3c98 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3c6e:	490b      	ldr	r1, [pc, #44]	; (3c9c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3c70:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3c72:	6809      	ldr	r1, [r1, #0]
    3c74:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c78:	4909      	ldr	r1, [pc, #36]	; (3ca0 <arch_swap+0x34>)
	_current->arch.basepri = key;
    3c7a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c7e:	684b      	ldr	r3, [r1, #4]
    3c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c84:	604b      	str	r3, [r1, #4]
    3c86:	2300      	movs	r3, #0
    3c88:	f383 8811 	msr	BASEPRI, r3
    3c8c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3c90:	6893      	ldr	r3, [r2, #8]
}
    3c92:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    3c96:	4770      	bx	lr
    3c98:	20001624 	.word	0x20001624
    3c9c:	0000c274 	.word	0x0000c274
    3ca0:	e000ed00 	.word	0xe000ed00

00003ca4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3ca4:	4913      	ldr	r1, [pc, #76]	; (3cf4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3ca6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3ca8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3cac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3cae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3cb2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3cb6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3cb8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3cbc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3cc0:	4f0d      	ldr	r7, [pc, #52]	; (3cf8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3cc2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3cc6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3cc8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3cca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3ccc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    3cd0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3cd2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3cd6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3cda:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3cdc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3cde:	f000 fa45 	bl	416c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3ce2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3ce6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3cea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3cee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3cf2:	4770      	bx	lr
    ldr r1, =_kernel
    3cf4:	20001624 	.word	0x20001624
    ldr v4, =_SCS_ICSR
    3cf8:	e000ed04 	.word	0xe000ed04

00003cfc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3cfc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3d00:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3d02:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3d06:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3d0a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3d0c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3d10:	2902      	cmp	r1, #2
    beq _oops
    3d12:	d0ff      	beq.n	3d14 <_oops>

00003d14 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3d14:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3d16:	f005 ffb8 	bl	9c8a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3d1a:	bd01      	pop	{r0, pc}

00003d1c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3d1c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3d20:	9b00      	ldr	r3, [sp, #0]
    3d22:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3d26:	490a      	ldr	r1, [pc, #40]	; (3d50 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3d28:	9b01      	ldr	r3, [sp, #4]
    3d2a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3d2e:	9b02      	ldr	r3, [sp, #8]
    3d30:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3d34:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3d3c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3d40:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3d44:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3d46:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3d48:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3d4a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3d4e:	4770      	bx	lr
    3d50:	0000899b 	.word	0x0000899b

00003d54 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3d54:	4a0a      	ldr	r2, [pc, #40]	; (3d80 <z_check_thread_stack_fail+0x2c>)
{
    3d56:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3d58:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3d5a:	b178      	cbz	r0, 3d7c <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3d5c:	f113 0f16 	cmn.w	r3, #22
    3d60:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    3d64:	d005      	beq.n	3d72 <z_check_thread_stack_fail+0x1e>
    3d66:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3d6a:	429a      	cmp	r2, r3
    3d6c:	d805      	bhi.n	3d7a <z_check_thread_stack_fail+0x26>
    3d6e:	4283      	cmp	r3, r0
    3d70:	d203      	bcs.n	3d7a <z_check_thread_stack_fail+0x26>
		return 0;
    3d72:	4281      	cmp	r1, r0
    3d74:	bf28      	it	cs
    3d76:	2000      	movcs	r0, #0
    3d78:	4770      	bx	lr
    3d7a:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3d7c:	4770      	bx	lr
    3d7e:	bf00      	nop
    3d80:	20001624 	.word	0x20001624

00003d84 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3d84:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3d86:	4b09      	ldr	r3, [pc, #36]	; (3dac <arch_switch_to_main_thread+0x28>)
    3d88:	6098      	str	r0, [r3, #8]
{
    3d8a:	460d      	mov	r5, r1
    3d8c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3d8e:	f000 f9ed 	bl	416c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3d92:	4620      	mov	r0, r4
    3d94:	f385 8809 	msr	PSP, r5
    3d98:	2100      	movs	r1, #0
    3d9a:	b663      	cpsie	if
    3d9c:	f381 8811 	msr	BASEPRI, r1
    3da0:	f3bf 8f6f 	isb	sy
    3da4:	2200      	movs	r2, #0
    3da6:	2300      	movs	r3, #0
    3da8:	f004 fdf7 	bl	899a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3dac:	20001624 	.word	0x20001624

00003db0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3db0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3db2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3db4:	4a0b      	ldr	r2, [pc, #44]	; (3de4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3db6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3db8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3dba:	bf1e      	ittt	ne
	movne	r1, #0
    3dbc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3dbe:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3dc0:	f006 fbc1 	blne	a546 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3dc4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3dc6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3dca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3dce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3dd2:	4905      	ldr	r1, [pc, #20]	; (3de8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3dd4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3dd6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3dd8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3dda:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3dde:	4903      	ldr	r1, [pc, #12]	; (3dec <_isr_wrapper+0x3c>)
	bx r1
    3de0:	4708      	bx	r1
    3de2:	0000      	.short	0x0000
	ldr r2, =_kernel
    3de4:	20001624 	.word	0x20001624
	ldr r1, =_sw_isr_table
    3de8:	0000b1a4 	.word	0x0000b1a4
	ldr r1, =z_arm_int_exit
    3dec:	00003df1 	.word	0x00003df1

00003df0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3df0:	4b04      	ldr	r3, [pc, #16]	; (3e04 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3df2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3df4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3df6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3df8:	d003      	beq.n	3e02 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3dfa:	4903      	ldr	r1, [pc, #12]	; (3e08 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3e00:	600a      	str	r2, [r1, #0]

00003e02 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3e02:	4770      	bx	lr
	ldr r3, =_kernel
    3e04:	20001624 	.word	0x20001624
	ldr r1, =_SCS_ICSR
    3e08:	e000ed04 	.word	0xe000ed04

00003e0c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3e0c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3e0e:	4b1d      	ldr	r3, [pc, #116]	; (3e84 <mem_manage_fault+0x78>)
{
    3e10:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e18:	0792      	lsls	r2, r2, #30
{
    3e1a:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3e1c:	d522      	bpl.n	3e64 <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3e1e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e22:	0614      	lsls	r4, r2, #24
    3e24:	d51e      	bpl.n	3e64 <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3e26:	b119      	cbz	r1, 3e30 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3e2e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e36:	4c13      	ldr	r4, [pc, #76]	; (3e84 <mem_manage_fault+0x78>)
    3e38:	f012 0f10 	tst.w	r2, #16
    3e3c:	d115      	bne.n	3e6a <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3e40:	0799      	lsls	r1, r3, #30
    3e42:	d412      	bmi.n	3e6a <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3e44:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3e46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3e48:	4a0e      	ldr	r2, [pc, #56]	; (3e84 <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3e4a:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3e4c:	bf42      	ittt	mi
    3e4e:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    3e50:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    3e54:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3e56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e58:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3e5c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3e5e:	2300      	movs	r3, #0
    3e60:	702b      	strb	r3, [r5, #0]

	return reason;
}
    3e62:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    3e64:	f06f 0015 	mvn.w	r0, #21
    3e68:	e7e2      	b.n	3e30 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3e6a:	6863      	ldr	r3, [r4, #4]
    3e6c:	051a      	lsls	r2, r3, #20
    3e6e:	d5e9      	bpl.n	3e44 <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3e70:	4631      	mov	r1, r6
    3e72:	f7ff ff6f 	bl	3d54 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3e76:	2800      	cmp	r0, #0
    3e78:	d0e4      	beq.n	3e44 <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3e7a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3e7e:	2002      	movs	r0, #2
    3e80:	e7e1      	b.n	3e46 <mem_manage_fault+0x3a>
    3e82:	bf00      	nop
    3e84:	e000ed00 	.word	0xe000ed00

00003e88 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3e88:	4b0d      	ldr	r3, [pc, #52]	; (3ec0 <bus_fault.constprop.0+0x38>)
    3e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e90:	0592      	lsls	r2, r2, #22
    3e92:	d508      	bpl.n	3ea6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e98:	0412      	lsls	r2, r2, #16
    3e9a:	d504      	bpl.n	3ea6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3e9c:	b118      	cbz	r0, 3ea6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3ea4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3eaa:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3eac:	4a04      	ldr	r2, [pc, #16]	; (3ec0 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3eae:	bf58      	it	pl
    3eb0:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3eb2:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3eb4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3eb6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3eba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3ebc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3ebe:	4770      	bx	lr
    3ec0:	e000ed00 	.word	0xe000ed00

00003ec4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3ec6:	4b4d      	ldr	r3, [pc, #308]	; (3ffc <z_arm_fault+0x138>)
    3ec8:	685b      	ldr	r3, [r3, #4]
{
    3eca:	b08b      	sub	sp, #44	; 0x2c
    3ecc:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3ed2:	2500      	movs	r5, #0
    3ed4:	f385 8811 	msr	BASEPRI, r5
    3ed8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3edc:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3ee0:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3ee4:	d111      	bne.n	3f0a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3ee6:	f002 000c 	and.w	r0, r2, #12
    3eea:	2808      	cmp	r0, #8
    3eec:	d00d      	beq.n	3f0a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3eee:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3ef0:	bf4c      	ite	mi
    3ef2:	460c      	movmi	r4, r1
			*nested_exc = true;
    3ef4:	2501      	movpl	r5, #1
	*recoverable = false;
    3ef6:	2200      	movs	r2, #0
	switch (fault) {
    3ef8:	3b03      	subs	r3, #3
	*recoverable = false;
    3efa:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3efe:	2b03      	cmp	r3, #3
    3f00:	d84d      	bhi.n	3f9e <z_arm_fault+0xda>
    3f02:	e8df f003 	tbb	[pc, r3]
    3f06:	6b04      	.short	0x6b04
    3f08:	736f      	.short	0x736f
		return NULL;
    3f0a:	462c      	mov	r4, r5
    3f0c:	e7f3      	b.n	3ef6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3f0e:	4b3b      	ldr	r3, [pc, #236]	; (3ffc <z_arm_fault+0x138>)
    3f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f12:	0791      	lsls	r1, r2, #30
    3f14:	d443      	bmi.n	3f9e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f18:	2a00      	cmp	r2, #0
    3f1a:	db40      	blt.n	3f9e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f1e:	0052      	lsls	r2, r2, #1
    3f20:	d53d      	bpl.n	3f9e <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3f22:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3f24:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3f2a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3f2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f30:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3f34:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3f36:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3f3e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f44:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3f48:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3f4c:	4291      	cmp	r1, r2
    3f4e:	d009      	beq.n	3f64 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f52:	b2d2      	uxtb	r2, r2
    3f54:	b142      	cbz	r2, 3f68 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    3f56:	f10d 0207 	add.w	r2, sp, #7
    3f5a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3f5c:	4620      	mov	r0, r4
    3f5e:	f7ff ff55 	bl	3e0c <mem_manage_fault>
    3f62:	e00a      	b.n	3f7a <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    3f64:	6823      	ldr	r3, [r4, #0]
    3f66:	e01b      	b.n	3fa0 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f6a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    3f6e:	d006      	beq.n	3f7e <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    3f70:	f10d 0107 	add.w	r1, sp, #7
    3f74:	2001      	movs	r0, #1
    3f76:	f7ff ff87 	bl	3e88 <bus_fault.constprop.0>
    3f7a:	4603      	mov	r3, r0
    3f7c:	e010      	b.n	3fa0 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f80:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    3f84:	d30b      	bcc.n	3f9e <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f94:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3f98:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3f9c:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    3f9e:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3fa0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3fa4:	b9c2      	cbnz	r2, 3fd8 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3fa6:	ae02      	add	r6, sp, #8
    3fa8:	f104 0720 	add.w	r7, r4, #32
    3fac:	6820      	ldr	r0, [r4, #0]
    3fae:	6861      	ldr	r1, [r4, #4]
    3fb0:	4632      	mov	r2, r6
    3fb2:	c203      	stmia	r2!, {r0, r1}
    3fb4:	3408      	adds	r4, #8
    3fb6:	42bc      	cmp	r4, r7
    3fb8:	4616      	mov	r6, r2
    3fba:	d1f7      	bne.n	3fac <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3fbe:	b1bd      	cbz	r5, 3ff0 <z_arm_fault+0x12c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3fc0:	f3c2 0108 	ubfx	r1, r2, #0, #9
    3fc4:	b921      	cbnz	r1, 3fd0 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3fc6:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    3fca:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3fce:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3fd0:	a902      	add	r1, sp, #8
    3fd2:	4618      	mov	r0, r3
    3fd4:	f005 fe57 	bl	9c86 <z_arm_fatal_error>
}
    3fd8:	b00b      	add	sp, #44	; 0x2c
    3fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    3fdc:	f10d 0207 	add.w	r2, sp, #7
    3fe0:	2100      	movs	r1, #0
    3fe2:	e7bb      	b.n	3f5c <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    3fe4:	f10d 0107 	add.w	r1, sp, #7
    3fe8:	2000      	movs	r0, #0
    3fea:	e7c4      	b.n	3f76 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3fec:	4b03      	ldr	r3, [pc, #12]	; (3ffc <z_arm_fault+0x138>)
    3fee:	e7ca      	b.n	3f86 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ff0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    3ff4:	f022 0201 	bic.w	r2, r2, #1
    3ff8:	e7e9      	b.n	3fce <z_arm_fault+0x10a>
    3ffa:	bf00      	nop
    3ffc:	e000ed00 	.word	0xe000ed00

00004000 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4000:	4a02      	ldr	r2, [pc, #8]	; (400c <z_arm_fault_init+0xc>)
    4002:	6953      	ldr	r3, [r2, #20]
    4004:	f043 0310 	orr.w	r3, r3, #16
    4008:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    400a:	4770      	bx	lr
    400c:	e000ed00 	.word	0xe000ed00

00004010 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4010:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4014:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4018:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    401a:	4672      	mov	r2, lr
	bl z_arm_fault
    401c:	f7ff ff52 	bl	3ec4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4020:	bd01      	pop	{r0, pc}
    4022:	bf00      	nop

00004024 <z_arm_interrupt_init>:
    4024:	4804      	ldr	r0, [pc, #16]	; (4038 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4026:	2300      	movs	r3, #0
    4028:	2120      	movs	r1, #32
    402a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    402c:	3301      	adds	r3, #1
    402e:	2b30      	cmp	r3, #48	; 0x30
    4030:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4034:	d1f9      	bne.n	402a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4036:	4770      	bx	lr
    4038:	e000e100 	.word	0xe000e100

0000403c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    403c:	2000      	movs	r0, #0
    msr CONTROL, r0
    403e:	f380 8814 	msr	CONTROL, r0
    isb
    4042:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4046:	f7fd f941 	bl	12cc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    404a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    404c:	4911      	ldr	r1, [pc, #68]	; (4094 <__start+0x58>)
    str r0, [r1]
    404e:	6008      	str	r0, [r1, #0]
    dsb
    4050:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4054:	4810      	ldr	r0, [pc, #64]	; (4098 <__start+0x5c>)
    msr msp, r0
    4056:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    405a:	f000 f833 	bl	40c4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    405e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4060:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    4064:	480d      	ldr	r0, [pc, #52]	; (409c <__start+0x60>)
    ldr r1, =0xaa
    4066:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    406a:	f44f 6204 	mov.w	r2, #2112	; 0x840
    bl z_early_memset
    406e:	f006 f9fd 	bl	a46c <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4072:	480a      	ldr	r0, [pc, #40]	; (409c <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4074:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    4078:	1840      	adds	r0, r0, r1
    msr PSP, r0
    407a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    407e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4082:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4084:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4086:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    408a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    408e:	f7ff fdd1 	bl	3c34 <z_arm_prep_c>
    4092:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    4094:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4098:	20003b40 	.word	0x20003b40
    ldr r0, =z_interrupt_stacks
    409c:	20002d80 	.word	0x20002d80

000040a0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    40a0:	4907      	ldr	r1, [pc, #28]	; (40c0 <z_arm_clear_arm_mpu_config+0x20>)
    40a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    40a6:	2300      	movs	r3, #0
	int num_regions =
    40a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    40ac:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    40ae:	4293      	cmp	r3, r2
    40b0:	db00      	blt.n	40b4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    40b2:	4770      	bx	lr
  MPU->RNR = rnr;
    40b4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    40b8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    40bc:	3301      	adds	r3, #1
    40be:	e7f6      	b.n	40ae <z_arm_clear_arm_mpu_config+0xe>
    40c0:	e000ed00 	.word	0xe000ed00

000040c4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    40c4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    40c6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    40c8:	2300      	movs	r3, #0
    40ca:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    40ce:	f7ff ffe7 	bl	40a0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    40d2:	4b14      	ldr	r3, [pc, #80]	; (4124 <z_arm_init_arch_hw_at_boot+0x60>)
    40d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    40d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    40dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    40e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    40e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    40e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    40ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    40f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    40f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    40f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    40fc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4100:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4104:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4108:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    410c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4110:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4114:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4118:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    411a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    411e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4122:	bd08      	pop	{r3, pc}
    4124:	e000e100 	.word	0xe000e100

00004128 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4128:	4b08      	ldr	r3, [pc, #32]	; (414c <z_impl_k_thread_abort+0x24>)
    412a:	689b      	ldr	r3, [r3, #8]
    412c:	4283      	cmp	r3, r0
    412e:	d10b      	bne.n	4148 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4130:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4134:	b143      	cbz	r3, 4148 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4136:	4b06      	ldr	r3, [pc, #24]	; (4150 <z_impl_k_thread_abort+0x28>)
    4138:	685a      	ldr	r2, [r3, #4]
    413a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    413e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4146:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4148:	f002 be94 	b.w	6e74 <z_thread_abort>
    414c:	20001624 	.word	0x20001624
    4150:	e000ed00 	.word	0xe000ed00

00004154 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4154:	4b02      	ldr	r3, [pc, #8]	; (4160 <z_arm_configure_static_mpu_regions+0xc>)
    4156:	4a03      	ldr	r2, [pc, #12]	; (4164 <z_arm_configure_static_mpu_regions+0x10>)
    4158:	4803      	ldr	r0, [pc, #12]	; (4168 <z_arm_configure_static_mpu_regions+0x14>)
    415a:	2101      	movs	r1, #1
    415c:	f000 b872 	b.w	4244 <arm_core_mpu_configure_static_mpu_regions>
    4160:	20040000 	.word	0x20040000
    4164:	20000000 	.word	0x20000000
    4168:	0000c0e0 	.word	0x0000c0e0

0000416c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    416c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4170:	4b05      	ldr	r3, [pc, #20]	; (4188 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    4172:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    4174:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4176:	4a05      	ldr	r2, [pc, #20]	; (418c <z_arm_configure_dynamic_mpu_regions+0x20>)
    4178:	2140      	movs	r1, #64	; 0x40
    417a:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    417e:	4618      	mov	r0, r3
    4180:	2101      	movs	r1, #1
    4182:	f000 b869 	b.w	4258 <arm_core_mpu_configure_dynamic_mpu_regions>
    4186:	bf00      	nop
    4188:	200014d8 	.word	0x200014d8
    418c:	150b0000 	.word	0x150b0000

00004190 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4190:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4192:	4e20      	ldr	r6, [pc, #128]	; (4214 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4194:	2500      	movs	r5, #0
    4196:	428d      	cmp	r5, r1
    4198:	da39      	bge.n	420e <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    419a:	6844      	ldr	r4, [r0, #4]
    419c:	b374      	cbz	r4, 41fc <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    419e:	b153      	cbz	r3, 41b6 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    41a0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    41a4:	ea14 0f0c 	tst.w	r4, ip
    41a8:	d12f      	bne.n	420a <mpu_configure_regions+0x7a>
		&&
    41aa:	2c1f      	cmp	r4, #31
    41ac:	d92d      	bls.n	420a <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    41ae:	6807      	ldr	r7, [r0, #0]
		&&
    41b0:	ea1c 0f07 	tst.w	ip, r7
    41b4:	d129      	bne.n	420a <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    41b6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    41b8:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    41ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    41be:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    41c2:	d91e      	bls.n	4202 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    41c4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    41c8:	d81d      	bhi.n	4206 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    41ca:	3c01      	subs	r4, #1
    41cc:	fab4 f484 	clz	r4, r4
    41d0:	f1c4 041f 	rsb	r4, r4, #31
    41d4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    41d6:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    41da:	ea4c 0c04 	orr.w	ip, ip, r4
    41de:	d814      	bhi.n	420a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    41e0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    41e4:	4314      	orrs	r4, r2
    41e6:	f044 0410 	orr.w	r4, r4, #16
    41ea:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    41ee:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    41f2:	f04c 0401 	orr.w	r4, ip, #1
    41f6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    41fa:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    41fc:	3501      	adds	r5, #1
    41fe:	300c      	adds	r0, #12
    4200:	e7c9      	b.n	4196 <mpu_configure_regions+0x6>
		return REGION_32B;
    4202:	2408      	movs	r4, #8
    4204:	e7e7      	b.n	41d6 <mpu_configure_regions+0x46>
		return REGION_4G;
    4206:	243e      	movs	r4, #62	; 0x3e
    4208:	e7e5      	b.n	41d6 <mpu_configure_regions+0x46>
			return -EINVAL;
    420a:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    420e:	4610      	mov	r0, r2
    4210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4212:	bf00      	nop
    4214:	e000ed00 	.word	0xe000ed00

00004218 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4218:	4b04      	ldr	r3, [pc, #16]	; (422c <arm_core_mpu_enable+0x14>)
    421a:	2205      	movs	r2, #5
    421c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4224:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4228:	4770      	bx	lr
    422a:	bf00      	nop
    422c:	e000ed00 	.word	0xe000ed00

00004230 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4230:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4234:	4b02      	ldr	r3, [pc, #8]	; (4240 <arm_core_mpu_disable+0x10>)
    4236:	2200      	movs	r2, #0
    4238:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    423c:	4770      	bx	lr
    423e:	bf00      	nop
    4240:	e000ed00 	.word	0xe000ed00

00004244 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4244:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4246:	4c03      	ldr	r4, [pc, #12]	; (4254 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4248:	2301      	movs	r3, #1
    424a:	7822      	ldrb	r2, [r4, #0]
    424c:	f7ff ffa0 	bl	4190 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4250:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4252:	bd10      	pop	{r4, pc}
    4254:	2000188e 	.word	0x2000188e

00004258 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    4258:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    425a:	4a09      	ldr	r2, [pc, #36]	; (4280 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    425c:	2300      	movs	r3, #0
    425e:	7812      	ldrb	r2, [r2, #0]
    4260:	f7ff ff96 	bl	4190 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4264:	f110 0f16 	cmn.w	r0, #22
    4268:	d002      	beq.n	4270 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    426a:	4a06      	ldr	r2, [pc, #24]	; (4284 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    426c:	2807      	cmp	r0, #7
    426e:	dd00      	ble.n	4272 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4270:	bd08      	pop	{r3, pc}
    4272:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4276:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    427a:	3001      	adds	r0, #1
    427c:	e7f6      	b.n	426c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    427e:	bf00      	nop
    4280:	2000188e 	.word	0x2000188e
    4284:	e000ed00 	.word	0xe000ed00

00004288 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4288:	4914      	ldr	r1, [pc, #80]	; (42dc <z_arm_mpu_init+0x54>)
    428a:	6808      	ldr	r0, [r1, #0]
    428c:	2808      	cmp	r0, #8
{
    428e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4290:	d821      	bhi.n	42d6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4292:	f7ff ffcd 	bl	4230 <arm_core_mpu_disable>
    4296:	4c12      	ldr	r4, [pc, #72]	; (42e0 <z_arm_mpu_init+0x58>)
    4298:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    429a:	2200      	movs	r2, #0
    429c:	4290      	cmp	r0, r2
    429e:	f101 010c 	add.w	r1, r1, #12
    42a2:	d105      	bne.n	42b0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    42a4:	4b0f      	ldr	r3, [pc, #60]	; (42e4 <z_arm_mpu_init+0x5c>)
    42a6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    42a8:	f7ff ffb6 	bl	4218 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    42ac:	2000      	movs	r0, #0
}
    42ae:	bd10      	pop	{r4, pc}
    42b0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42b4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    42b8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    42bc:	4313      	orrs	r3, r2
    42be:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42c2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    42c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    42ca:	f043 0301 	orr.w	r3, r3, #1
    42ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    42d2:	3201      	adds	r2, #1
    42d4:	e7e2      	b.n	429c <z_arm_mpu_init+0x14>
		return -1;
    42d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42da:	e7e8      	b.n	42ae <z_arm_mpu_init+0x26>
    42dc:	0000c0ec 	.word	0x0000c0ec
    42e0:	e000ed00 	.word	0xe000ed00
    42e4:	2000188e 	.word	0x2000188e

000042e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    42e8:	4b01      	ldr	r3, [pc, #4]	; (42f0 <__stdout_hook_install+0x8>)
    42ea:	6018      	str	r0, [r3, #0]
}
    42ec:	4770      	bx	lr
    42ee:	bf00      	nop
    42f0:	20000110 	.word	0x20000110

000042f4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    42f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    42f6:	4f08      	ldr	r7, [pc, #32]	; (4318 <z_impl_zephyr_read_stdin+0x24>)
{
    42f8:	4606      	mov	r6, r0
    42fa:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    42fc:	2400      	movs	r4, #0
    42fe:	42ac      	cmp	r4, r5
    4300:	da08      	bge.n	4314 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    4302:	683b      	ldr	r3, [r7, #0]
    4304:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4306:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    4308:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    430a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    430e:	d001      	beq.n	4314 <z_impl_zephyr_read_stdin+0x20>
    4310:	280d      	cmp	r0, #13
    4312:	d1f4      	bne.n	42fe <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    4314:	4620      	mov	r0, r4
    4316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4318:	2000010c 	.word	0x2000010c

0000431c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431e:	4f0a      	ldr	r7, [pc, #40]	; (4348 <z_impl_zephyr_write_stdout+0x2c>)
    4320:	460d      	mov	r5, r1
    4322:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4324:	f1c0 0401 	rsb	r4, r0, #1
    4328:	19a3      	adds	r3, r4, r6
    432a:	429d      	cmp	r5, r3
    432c:	dc01      	bgt.n	4332 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    432e:	4628      	mov	r0, r5
    4330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4332:	7873      	ldrb	r3, [r6, #1]
    4334:	2b0a      	cmp	r3, #10
    4336:	d102      	bne.n	433e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4338:	683b      	ldr	r3, [r7, #0]
    433a:	200d      	movs	r0, #13
    433c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    433e:	683b      	ldr	r3, [r7, #0]
    4340:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4344:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4346:	e7ef      	b.n	4328 <z_impl_zephyr_write_stdout+0xc>
    4348:	20000110 	.word	0x20000110

0000434c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    434c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    434e:	4c07      	ldr	r4, [pc, #28]	; (436c <_sbrk+0x20>)
    4350:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4352:	18c2      	adds	r2, r0, r3
    4354:	4806      	ldr	r0, [pc, #24]	; (4370 <_sbrk+0x24>)
    4356:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    435a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    435e:	428a      	cmp	r2, r1
		heap_sz += count;
    4360:	bf3a      	itte	cc
    4362:	6022      	strcc	r2, [r4, #0]
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4364:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    4366:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    436a:	bd10      	pop	{r4, pc}
    436c:	200014e4 	.word	0x200014e4
    4370:	200047f0 	.word	0x200047f0

00004374 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4374:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4376:	211d      	movs	r1, #29
    4378:	4804      	ldr	r0, [pc, #16]	; (438c <__chk_fail+0x18>)
    437a:	f7ff ffcf 	bl	431c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    437e:	4040      	eors	r0, r0
    4380:	f380 8811 	msr	BASEPRI, r0
    4384:	f04f 0003 	mov.w	r0, #3
    4388:	df02      	svc	2
	CODE_UNREACHABLE;
    438a:	bf00      	nop
    438c:	0000d2bf 	.word	0x0000d2bf

00004390 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4390:	b510      	push	{r4, lr}
	__asm__ volatile(
    4392:	f04f 0320 	mov.w	r3, #32
    4396:	f3ef 8011 	mrs	r0, BASEPRI
    439a:	f383 8812 	msr	BASEPRI_MAX, r3
    439e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    43a2:	4a11      	ldr	r2, [pc, #68]	; (43e8 <nordicsemi_nrf52_init+0x58>)
    43a4:	2301      	movs	r3, #1
    43a6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    43aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    43ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    43b2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    43b6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    43ba:	2c08      	cmp	r4, #8
    43bc:	d108      	bne.n	43d0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    43be:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    43c2:	2905      	cmp	r1, #5
    43c4:	d804      	bhi.n	43d0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    43c6:	4c09      	ldr	r4, [pc, #36]	; (43ec <nordicsemi_nrf52_init+0x5c>)
    43c8:	5c61      	ldrb	r1, [r4, r1]
    43ca:	b109      	cbz	r1, 43d0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    43cc:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    43d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43d4:	2201      	movs	r2, #1
    43d6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    43da:	f380 8811 	msr	BASEPRI, r0
    43de:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    43e2:	2000      	movs	r0, #0
    43e4:	bd10      	pop	{r4, pc}
    43e6:	bf00      	nop
    43e8:	4001e000 	.word	0x4001e000
    43ec:	0000d2ec 	.word	0x0000d2ec

000043f0 <sys_arch_reboot>:
    *p_gpregret = val;
    43f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43f4:	b2c0      	uxtb	r0, r0
    43f6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    43fa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    43fe:	4905      	ldr	r1, [pc, #20]	; (4414 <sys_arch_reboot+0x24>)
    4400:	4b05      	ldr	r3, [pc, #20]	; (4418 <sys_arch_reboot+0x28>)
    4402:	68ca      	ldr	r2, [r1, #12]
    4404:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4408:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    440a:	60cb      	str	r3, [r1, #12]
    440c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4410:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4412:	e7fd      	b.n	4410 <sys_arch_reboot+0x20>
    4414:	e000ed00 	.word	0xe000ed00
    4418:	05fa0004 	.word	0x05fa0004

0000441c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    441c:	b120      	cbz	r0, 4428 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    441e:	4b03      	ldr	r3, [pc, #12]	; (442c <arch_busy_wait+0x10>)
    4420:	0180      	lsls	r0, r0, #6
    4422:	f043 0301 	orr.w	r3, r3, #1
    4426:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4428:	4770      	bx	lr
    442a:	bf00      	nop
    442c:	0000bc70 	.word	0x0000bc70

00004430 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4430:	4b08      	ldr	r3, [pc, #32]	; (4454 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4432:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4434:	1ac3      	subs	r3, r0, r3
{
    4436:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4438:	4907      	ldr	r1, [pc, #28]	; (4458 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    443a:	109b      	asrs	r3, r3, #2
{
    443c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    443e:	4359      	muls	r1, r3
    4440:	4806      	ldr	r0, [pc, #24]	; (445c <onoff_stop+0x2c>)
    4442:	2240      	movs	r2, #64	; 0x40
    4444:	f005 fc90 	bl	9d68 <stop>
	notify(mgr, res);
    4448:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    444a:	4601      	mov	r1, r0
	notify(mgr, res);
    444c:	4620      	mov	r0, r4
}
    444e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4452:	4718      	bx	r3
    4454:	200014fc 	.word	0x200014fc
    4458:	b6db6db7 	.word	0xb6db6db7
    445c:	0000b12c 	.word	0x0000b12c

00004460 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4460:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4462:	4c0c      	ldr	r4, [pc, #48]	; (4494 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4464:	4a0c      	ldr	r2, [pc, #48]	; (4498 <onoff_start+0x38>)
    4466:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    4468:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    446a:	9300      	str	r3, [sp, #0]
{
    446c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    446e:	460b      	mov	r3, r1
    4470:	490a      	ldr	r1, [pc, #40]	; (449c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4472:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4474:	4361      	muls	r1, r4
{
    4476:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4478:	4809      	ldr	r0, [pc, #36]	; (44a0 <onoff_start+0x40>)
    447a:	f005 fca2 	bl	9dc2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    447e:	1e01      	subs	r1, r0, #0
    4480:	da05      	bge.n	448e <onoff_start+0x2e>
		notify(mgr, err);
    4482:	4630      	mov	r0, r6
    4484:	462b      	mov	r3, r5
	}
}
    4486:	b002      	add	sp, #8
    4488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    448c:	4718      	bx	r3
}
    448e:	b002      	add	sp, #8
    4490:	bd70      	pop	{r4, r5, r6, pc}
    4492:	bf00      	nop
    4494:	200014fc 	.word	0x200014fc
    4498:	00009e2f 	.word	0x00009e2f
    449c:	b6db6db7 	.word	0xb6db6db7
    44a0:	0000b12c 	.word	0x0000b12c

000044a4 <hfclk_start>:
{
    44a4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    44a6:	f006 f989 	bl	a7bc <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    44aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    44ae:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    44b2:	4c07      	ldr	r4, [pc, #28]	; (44d0 <hfclk_start+0x2c>)
    44b4:	fb02 3101 	mla	r1, r2, r1, r3
    44b8:	0bc0      	lsrs	r0, r0, #15
    44ba:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    44be:	0bc9      	lsrs	r1, r1, #15
    44c0:	e9c4 0100 	strd	r0, r1, [r4]
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    44c4:	2001      	movs	r0, #1
}
    44c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44ca:	f005 bef3 	b.w	a2b4 <nrfx_clock_start>
    44ce:	bf00      	nop
    44d0:	20000500 	.word	0x20000500

000044d4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    44d4:	2200      	movs	r2, #0
{
    44d6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    44d8:	2101      	movs	r1, #1
{
    44da:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    44dc:	4610      	mov	r0, r2
    44de:	f7ff fb8d 	bl	3bfc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    44e2:	480f      	ldr	r0, [pc, #60]	; (4520 <clk_init+0x4c>)
    44e4:	f001 f9d6 	bl	5894 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    44e8:	4b0e      	ldr	r3, [pc, #56]	; (4524 <clk_init+0x50>)
    44ea:	4298      	cmp	r0, r3
    44ec:	d115      	bne.n	451a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    44ee:	f005 fed4 	bl	a29a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    44f2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    44f4:	490c      	ldr	r1, [pc, #48]	; (4528 <clk_init+0x54>)
    44f6:	4630      	mov	r0, r6
    44f8:	f004 fb0d 	bl	8b16 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    44fc:	2800      	cmp	r0, #0
    44fe:	db0b      	blt.n	4518 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4500:	2501      	movs	r5, #1
    4502:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    4504:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4506:	4908      	ldr	r1, [pc, #32]	; (4528 <clk_init+0x54>)
    4508:	f104 001c 	add.w	r0, r4, #28
    450c:	f004 fb03 	bl	8b16 <onoff_manager_init>
		if (err < 0) {
    4510:	2800      	cmp	r0, #0
    4512:	db01      	blt.n	4518 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4514:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4516:	2000      	movs	r0, #0
}
    4518:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    451a:	f06f 0004 	mvn.w	r0, #4
    451e:	e7fb      	b.n	4518 <clk_init+0x44>
    4520:	00004561 	.word	0x00004561
    4524:	0bad0000 	.word	0x0bad0000
    4528:	0000c10c 	.word	0x0000c10c

0000452c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    452c:	b570      	push	{r4, r5, r6, lr}
    452e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4530:	230c      	movs	r3, #12
    4532:	4809      	ldr	r0, [pc, #36]	; (4558 <clkstarted_handle.constprop.0+0x2c>)
    4534:	434b      	muls	r3, r1
    4536:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4538:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    453c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    453e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4540:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4542:	4418      	add	r0, r3
    4544:	f005 fbfd 	bl	9d42 <set_on_state>
	if (callback) {
    4548:	b12d      	cbz	r5, 4556 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    454a:	4632      	mov	r2, r6
    454c:	462b      	mov	r3, r5
    454e:	4803      	ldr	r0, [pc, #12]	; (455c <clkstarted_handle.constprop.0+0x30>)
}
    4550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4554:	4718      	bx	r3
}
    4556:	bd70      	pop	{r4, r5, r6, pc}
    4558:	200014fc 	.word	0x200014fc
    455c:	0000b12c 	.word	0x0000b12c

00004560 <clock_event_handler>:
	switch (event) {
    4560:	b110      	cbz	r0, 4568 <clock_event_handler+0x8>
    4562:	2801      	cmp	r0, #1
    4564:	d004      	beq.n	4570 <clock_event_handler+0x10>
    4566:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4568:	4b03      	ldr	r3, [pc, #12]	; (4578 <clock_event_handler+0x18>)
    456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    456c:	075b      	lsls	r3, r3, #29
    456e:	d101      	bne.n	4574 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4570:	f7ff bfdc 	b.w	452c <clkstarted_handle.constprop.0>
}
    4574:	4770      	bx	lr
    4576:	bf00      	nop
    4578:	200014fc 	.word	0x200014fc

0000457c <generic_hfclk_start>:
{
    457c:	b508      	push	{r3, lr}
	__asm__ volatile(
    457e:	f04f 0320 	mov.w	r3, #32
    4582:	f3ef 8111 	mrs	r1, BASEPRI
    4586:	f383 8812 	msr	BASEPRI_MAX, r3
    458a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    458e:	4a11      	ldr	r2, [pc, #68]	; (45d4 <generic_hfclk_start+0x58>)
    4590:	6813      	ldr	r3, [r2, #0]
    4592:	f043 0002 	orr.w	r0, r3, #2
    4596:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4598:	07da      	lsls	r2, r3, #31
    459a:	d407      	bmi.n	45ac <generic_hfclk_start+0x30>
	__asm__ volatile(
    459c:	f381 8811 	msr	BASEPRI, r1
    45a0:	f3bf 8f6f 	isb	sy
}
    45a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    45a8:	f7ff bf7c 	b.w	44a4 <hfclk_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    45ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45b0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    45b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    45b8:	07d3      	lsls	r3, r2, #31
    45ba:	d5ef      	bpl.n	459c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    45bc:	4806      	ldr	r0, [pc, #24]	; (45d8 <generic_hfclk_start+0x5c>)
    45be:	f005 fbc0 	bl	9d42 <set_on_state>
    45c2:	f381 8811 	msr	BASEPRI, r1
    45c6:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    45ca:	2000      	movs	r0, #0
}
    45cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    45d0:	f7ff bfac 	b.w	452c <clkstarted_handle.constprop.0>
    45d4:	2000154c 	.word	0x2000154c
    45d8:	2000153c 	.word	0x2000153c

000045dc <api_blocking_start>:
{
    45dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    45de:	2200      	movs	r2, #0
    45e0:	2301      	movs	r3, #1
    45e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    45e6:	ab04      	add	r3, sp, #16
    45e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    45ec:	4a09      	ldr	r2, [pc, #36]	; (4614 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    45ee:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    45f2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    45f4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    45f8:	f005 fc12 	bl	9e20 <api_start>
	if (err < 0) {
    45fc:	2800      	cmp	r0, #0
    45fe:	db05      	blt.n	460c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    4600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4604:	2300      	movs	r3, #0
    4606:	4668      	mov	r0, sp
    4608:	f002 f924 	bl	6854 <z_impl_k_sem_take>
}
    460c:	b007      	add	sp, #28
    460e:	f85d fb04 	ldr.w	pc, [sp], #4
    4612:	bf00      	nop
    4614:	00009e4d 	.word	0x00009e4d

00004618 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    4618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    461c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4620:	4605      	mov	r5, r0
    4622:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    4626:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    462a:	f04f 0320 	mov.w	r3, #32
    462e:	f3ef 8711 	mrs	r7, BASEPRI
    4632:	f383 8812 	msr	BASEPRI_MAX, r3
    4636:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    463a:	f006 f8bf 	bl	a7bc <z_impl_k_uptime_ticks>
    463e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4642:	fba0 4302 	umull	r4, r3, r0, r2
    4646:	fb02 3301 	mla	r3, r2, r1, r3
    464a:	0be4      	lsrs	r4, r4, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    464c:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
    4650:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4654:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    4658:	4b23      	ldr	r3, [pc, #140]	; (46e8 <cmd_status+0xd0>)
    465a:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    465e:	4b23      	ldr	r3, [pc, #140]	; (46ec <cmd_status+0xd4>)
    4660:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
    4664:	f387 8811 	msr	BASEPRI, r7
    4668:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    466c:	4a20      	ldr	r2, [pc, #128]	; (46f0 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
    466e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 46f4 <cmd_status+0xdc>
    4672:	4f21      	ldr	r7, [pc, #132]	; (46f8 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    4674:	4628      	mov	r0, r5
    4676:	2108      	movs	r1, #8
    4678:	f004 feb5 	bl	93e6 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    467c:	f019 0f01 	tst.w	r9, #1
    4680:	f8df 9078 	ldr.w	r9, [pc, #120]	; 46fc <cmd_status+0xe4>
    4684:	4a1e      	ldr	r2, [pc, #120]	; (4700 <cmd_status+0xe8>)
    4686:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    468a:	9300      	str	r3, [sp, #0]
    468c:	4628      	mov	r0, r5
    468e:	bf0c      	ite	eq
    4690:	4643      	moveq	r3, r8
    4692:	463b      	movne	r3, r7
    4694:	2108      	movs	r1, #8
    4696:	f004 fea6 	bl	93e6 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    469a:	eba4 030b 	sub.w	r3, r4, fp
    469e:	9300      	str	r3, [sp, #0]
    46a0:	4628      	mov	r0, r5
    46a2:	465b      	mov	r3, fp
    46a4:	4a17      	ldr	r2, [pc, #92]	; (4704 <cmd_status+0xec>)
    46a6:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    46a8:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    46ac:	f004 fe9b 	bl	93e6 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    46b0:	4653      	mov	r3, sl
    46b2:	4628      	mov	r0, r5
    46b4:	4a14      	ldr	r2, [pc, #80]	; (4708 <cmd_status+0xf0>)
    46b6:	9400      	str	r4, [sp, #0]
    46b8:	2108      	movs	r1, #8
    46ba:	f004 fe94 	bl	93e6 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    46be:	4628      	mov	r0, r5
    46c0:	4a12      	ldr	r2, [pc, #72]	; (470c <cmd_status+0xf4>)
    46c2:	2108      	movs	r1, #8
    46c4:	f004 fe8f 	bl	93e6 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    46c8:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    46cc:	9300      	str	r3, [sp, #0]
    46ce:	4628      	mov	r0, r5
    46d0:	4a0b      	ldr	r2, [pc, #44]	; (4700 <cmd_status+0xe8>)
    46d2:	2e00      	cmp	r6, #0
    46d4:	bf0c      	ite	eq
    46d6:	4643      	moveq	r3, r8
    46d8:	463b      	movne	r3, r7
    46da:	2108      	movs	r1, #8
    46dc:	f004 fe83 	bl	93e6 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    46e0:	2000      	movs	r0, #0
    46e2:	b003      	add	sp, #12
    46e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46e8:	20000500 	.word	0x20000500
    46ec:	200004f8 	.word	0x200004f8
    46f0:	0000d2fb 	.word	0x0000d2fb
    46f4:	0000d2f6 	.word	0x0000d2f6
    46f8:	0000c50b 	.word	0x0000c50b
    46fc:	200014fc 	.word	0x200014fc
    4700:	0000d306 	.word	0x0000d306
    4704:	0000d320 	.word	0x0000d320
    4708:	0000d342 	.word	0x0000d342
    470c:	0000d363 	.word	0x0000d363

00004710 <hfclk_stop>:
{
    4710:	b510      	push	{r4, lr}
    4712:	f006 f853 	bl	a7bc <z_impl_k_uptime_ticks>
    4716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    471a:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    471e:	4c07      	ldr	r4, [pc, #28]	; (473c <hfclk_stop+0x2c>)
    4720:	fb02 3101 	mla	r1, r2, r1, r3
    4724:	0bc0      	lsrs	r0, r0, #15
    4726:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    472a:	0bc9      	lsrs	r1, r1, #15
    472c:	e9c4 0100 	strd	r0, r1, [r4]
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4730:	2001      	movs	r0, #1
}
    4732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4736:	f005 bdf9 	b.w	a32c <nrfx_clock_stop>
    473a:	bf00      	nop
    473c:	200004f8 	.word	0x200004f8

00004740 <generic_hfclk_stop>:
{
    4740:	b510      	push	{r4, lr}
	__asm__ volatile(
    4742:	f04f 0320 	mov.w	r3, #32
    4746:	f3ef 8411 	mrs	r4, BASEPRI
    474a:	f383 8812 	msr	BASEPRI_MAX, r3
    474e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    4752:	4a07      	ldr	r2, [pc, #28]	; (4770 <generic_hfclk_stop+0x30>)
    4754:	6813      	ldr	r3, [r2, #0]
    4756:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    475a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    475c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    475e:	d401      	bmi.n	4764 <generic_hfclk_stop+0x24>
		hfclk_stop();
    4760:	f7ff ffd6 	bl	4710 <hfclk_stop>
	__asm__ volatile(
    4764:	f384 8811 	msr	BASEPRI, r4
    4768:	f3bf 8f6f 	isb	sy
}
    476c:	bd10      	pop	{r4, pc}
    476e:	bf00      	nop
    4770:	2000154c 	.word	0x2000154c

00004774 <z_nrf_clock_control_lf_on>:
{
    4774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4778:	4938      	ldr	r1, [pc, #224]	; (485c <z_nrf_clock_control_lf_on+0xe8>)
    477a:	f3bf 8f5b 	dmb	ish
    477e:	4607      	mov	r7, r0
    4780:	2201      	movs	r2, #1
    4782:	e851 3f00 	ldrex	r3, [r1]
    4786:	e841 2000 	strex	r0, r2, [r1]
    478a:	2800      	cmp	r0, #0
    478c:	d1f9      	bne.n	4782 <z_nrf_clock_control_lf_on+0xe>
    478e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4792:	b933      	cbnz	r3, 47a2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4794:	4932      	ldr	r1, [pc, #200]	; (4860 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    4796:	4833      	ldr	r0, [pc, #204]	; (4864 <z_nrf_clock_control_lf_on+0xf0>)
    4798:	604b      	str	r3, [r1, #4]
    479a:	60cb      	str	r3, [r1, #12]
    479c:	608a      	str	r2, [r1, #8]
    479e:	f004 f9cd 	bl	8b3c <onoff_request>
	switch (start_mode) {
    47a2:	1e7b      	subs	r3, r7, #1
    47a4:	2b01      	cmp	r3, #1
    47a6:	d82b      	bhi.n	4800 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    47a8:	2f01      	cmp	r7, #1
    47aa:	d107      	bne.n	47bc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    47ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    47b4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    47b8:	2b01      	cmp	r3, #1
    47ba:	d021      	beq.n	4800 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    47bc:	f005 fea8 	bl	a510 <k_is_in_isr>
    47c0:	4605      	mov	r5, r0
    47c2:	b9f8      	cbnz	r0, 4804 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    47c4:	4b28      	ldr	r3, [pc, #160]	; (4868 <z_nrf_clock_control_lf_on+0xf4>)
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	b1e3      	cbz	r3, 4804 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    47ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47ce:	2202      	movs	r2, #2
    47d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    47d4:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47d6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 486c <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    47da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    47de:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    47e2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    47e6:	03d2      	lsls	r2, r2, #15
    47e8:	d516      	bpl.n	4818 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    47ea:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    47ee:	2b01      	cmp	r3, #1
    47f0:	d001      	beq.n	47f6 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    47f2:	2f01      	cmp	r7, #1
    47f4:	d110      	bne.n	4818 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    47f6:	b35d      	cbz	r5, 4850 <z_nrf_clock_control_lf_on+0xdc>
    47f8:	f386 8811 	msr	BASEPRI, r6
    47fc:	f3bf 8f6f 	isb	sy
}
    4800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4804:	f04f 0320 	mov.w	r3, #32
    4808:	f3ef 8611 	mrs	r6, BASEPRI
    480c:	f383 8812 	msr	BASEPRI_MAX, r3
    4810:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4814:	2501      	movs	r5, #1
    4816:	e7de      	b.n	47d6 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4818:	b1ad      	cbz	r5, 4846 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    481a:	4630      	mov	r0, r6
    481c:	f7ff f9c6 	bl	3bac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4820:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4824:	2b00      	cmp	r3, #0
    4826:	d1da      	bne.n	47de <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4828:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    482c:	2a00      	cmp	r2, #0
    482e:	d0d6      	beq.n	47de <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4830:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4834:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4838:	2301      	movs	r3, #1
    483a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    483e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4842:	60a3      	str	r3, [r4, #8]
}
    4844:	e7cb      	b.n	47de <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    4846:	2100      	movs	r1, #0
    4848:	2021      	movs	r0, #33	; 0x21
    484a:	f002 faf3 	bl	6e34 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    484e:	e7e7      	b.n	4820 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    4850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4854:	2202      	movs	r2, #2
    4856:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    485a:	e7d1      	b.n	4800 <z_nrf_clock_control_lf_on+0x8c>
    485c:	200014f8 	.word	0x200014f8
    4860:	200014e8 	.word	0x200014e8
    4864:	20001518 	.word	0x20001518
    4868:	20001ce3 	.word	0x20001ce3
    486c:	e000e100 	.word	0xe000e100

00004870 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4870:	b508      	push	{r3, lr}
    4872:	4807      	ldr	r0, [pc, #28]	; (4890 <uart_console_init+0x20>)
    4874:	f005 fdbc 	bl	a3f0 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    4878:	b138      	cbz	r0, 488a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    487a:	4806      	ldr	r0, [pc, #24]	; (4894 <uart_console_init+0x24>)
    487c:	f7ff fd34 	bl	42e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4880:	4804      	ldr	r0, [pc, #16]	; (4894 <uart_console_init+0x24>)
    4882:	f7fb ffdb 	bl	83c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4886:	2000      	movs	r0, #0
}
    4888:	bd08      	pop	{r3, pc}
		return -ENODEV;
    488a:	f06f 0012 	mvn.w	r0, #18
    488e:	e7fb      	b.n	4888 <uart_console_init+0x18>
    4890:	0000b18c 	.word	0x0000b18c
    4894:	00004899 	.word	0x00004899

00004898 <console_out>:
	if ('\n' == c) {
    4898:	280a      	cmp	r0, #10
{
    489a:	b538      	push	{r3, r4, r5, lr}
    489c:	4d07      	ldr	r5, [pc, #28]	; (48bc <console_out+0x24>)
    489e:	4604      	mov	r4, r0
	if ('\n' == c) {
    48a0:	d104      	bne.n	48ac <console_out+0x14>
	api->poll_out(dev, out_char);
    48a2:	68ab      	ldr	r3, [r5, #8]
    48a4:	210d      	movs	r1, #13
    48a6:	685b      	ldr	r3, [r3, #4]
    48a8:	4628      	mov	r0, r5
    48aa:	4798      	blx	r3
    48ac:	68ab      	ldr	r3, [r5, #8]
    48ae:	4803      	ldr	r0, [pc, #12]	; (48bc <console_out+0x24>)
    48b0:	685b      	ldr	r3, [r3, #4]
    48b2:	b2e1      	uxtb	r1, r4
    48b4:	4798      	blx	r3
}
    48b6:	4620      	mov	r0, r4
    48b8:	bd38      	pop	{r3, r4, r5, pc}
    48ba:	bf00      	nop
    48bc:	0000b18c 	.word	0x0000b18c

000048c0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    48c0:	b530      	push	{r4, r5, lr}
	return port->config;
    48c2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    48c4:	7b05      	ldrb	r5, [r0, #12]
    48c6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    48ca:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    48ce:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    48d0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    48d4:	d105      	bne.n	48e2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    48d6:	4620      	mov	r0, r4
    48d8:	f001 fa5e 	bl	5d98 <nrfx_gpiote_trigger_disable>

		return 0;
    48dc:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    48de:	b005      	add	sp, #20
    48e0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    48e2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    48e4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    48e8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    48ec:	d114      	bne.n	4918 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    48ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    48f2:	bf0c      	ite	eq
    48f4:	2304      	moveq	r3, #4
    48f6:	2305      	movne	r3, #5
    48f8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    48fc:	2300      	movs	r3, #0
    48fe:	4619      	mov	r1, r3
    4900:	aa02      	add	r2, sp, #8
    4902:	4620      	mov	r0, r4
    4904:	f001 f886 	bl	5a14 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4908:	4b1f      	ldr	r3, [pc, #124]	; (4988 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    490a:	4298      	cmp	r0, r3
    490c:	d139      	bne.n	4982 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    490e:	2101      	movs	r1, #1
    4910:	4620      	mov	r0, r4
    4912:	f001 f9f9 	bl	5d08 <nrfx_gpiote_trigger_enable>
	return 0;
    4916:	e7e1      	b.n	48dc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4918:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    491c:	d026      	beq.n	496c <gpio_nrfx_pin_interrupt_configure+0xac>
    491e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4922:	bf14      	ite	ne
    4924:	2301      	movne	r3, #1
    4926:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4928:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    492c:	6883      	ldr	r3, [r0, #8]
    492e:	40cb      	lsrs	r3, r1
    4930:	07d9      	lsls	r1, r3, #31
    4932:	d4e3      	bmi.n	48fc <gpio_nrfx_pin_interrupt_configure+0x3c>
    4934:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4938:	d1e0      	bne.n	48fc <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    493a:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    493c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    493e:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    4942:	4a12      	ldr	r2, [pc, #72]	; (498c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4944:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4948:	bf18      	it	ne
    494a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4952:	07db      	lsls	r3, r3, #31
    4954:	d4d2      	bmi.n	48fc <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4956:	f10d 0507 	add.w	r5, sp, #7
    495a:	4629      	mov	r1, r5
    495c:	4620      	mov	r0, r4
    495e:	f001 f97f 	bl	5c60 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4962:	4b0b      	ldr	r3, [pc, #44]	; (4990 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4964:	4298      	cmp	r0, r3
    4966:	d003      	beq.n	4970 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    4968:	9503      	str	r5, [sp, #12]
    496a:	e7c7      	b.n	48fc <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    496c:	2303      	movs	r3, #3
    496e:	e7db      	b.n	4928 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    4970:	4628      	mov	r0, r5
    4972:	f001 f9c3 	bl	5cfc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4976:	4b04      	ldr	r3, [pc, #16]	; (4988 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4978:	4298      	cmp	r0, r3
    497a:	d0f5      	beq.n	4968 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    497c:	f06f 000b 	mvn.w	r0, #11
    4980:	e7ad      	b.n	48de <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    4982:	f06f 0015 	mvn.w	r0, #21
    4986:	e7aa      	b.n	48de <gpio_nrfx_pin_interrupt_configure+0x1e>
    4988:	0bad0000 	.word	0x0bad0000
    498c:	50000300 	.word	0x50000300
    4990:	0bad0004 	.word	0x0bad0004

00004994 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4994:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4996:	f001 f9a1 	bl	5cdc <nrfx_gpiote_is_init>
    499a:	4604      	mov	r4, r0
    499c:	b968      	cbnz	r0, 49ba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    499e:	f001 f975 	bl	5c8c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    49a2:	4b08      	ldr	r3, [pc, #32]	; (49c4 <gpio_nrfx_init+0x30>)
    49a4:	4298      	cmp	r0, r3
    49a6:	d10a      	bne.n	49be <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    49a8:	4807      	ldr	r0, [pc, #28]	; (49c8 <gpio_nrfx_init+0x34>)
    49aa:	4621      	mov	r1, r4
    49ac:	f001 f952 	bl	5c54 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    49b0:	4622      	mov	r2, r4
    49b2:	2105      	movs	r1, #5
    49b4:	2006      	movs	r0, #6
    49b6:	f7ff f921 	bl	3bfc <z_arm_irq_priority_set>
		return 0;
    49ba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    49bc:	bd10      	pop	{r4, pc}
		return -EIO;
    49be:	f06f 0004 	mvn.w	r0, #4
    49c2:	e7fb      	b.n	49bc <gpio_nrfx_init+0x28>
    49c4:	0bad0000 	.word	0x0bad0000
    49c8:	000049cd 	.word	0x000049cd

000049cc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    49cc:	0942      	lsrs	r2, r0, #5
{
    49ce:	b570      	push	{r4, r5, r6, lr}
    49d0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    49d2:	d002      	beq.n	49da <nrfx_gpio_handler+0xe>
    49d4:	2a01      	cmp	r2, #1
    49d6:	d017      	beq.n	4a08 <nrfx_gpio_handler+0x3c>
}
    49d8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    49da:	4e0d      	ldr	r6, [pc, #52]	; (4a10 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    49dc:	6932      	ldr	r2, [r6, #16]
    49de:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    49e0:	2900      	cmp	r1, #0
    49e2:	d0f9      	beq.n	49d8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    49e4:	f003 031f 	and.w	r3, r3, #31
    49e8:	2501      	movs	r5, #1
    49ea:	680c      	ldr	r4, [r1, #0]
    49ec:	409d      	lsls	r5, r3
    49ee:	2900      	cmp	r1, #0
    49f0:	d0f2      	beq.n	49d8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    49f2:	688a      	ldr	r2, [r1, #8]
    49f4:	402a      	ands	r2, r5
    49f6:	d002      	beq.n	49fe <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    49f8:	684b      	ldr	r3, [r1, #4]
    49fa:	4630      	mov	r0, r6
    49fc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    49fe:	b12c      	cbz	r4, 4a0c <nrfx_gpio_handler+0x40>
    4a00:	6823      	ldr	r3, [r4, #0]
    4a02:	4621      	mov	r1, r4
    4a04:	461c      	mov	r4, r3
    4a06:	e7f2      	b.n	49ee <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4a08:	4e02      	ldr	r6, [pc, #8]	; (4a14 <nrfx_gpio_handler+0x48>)
    4a0a:	e7e7      	b.n	49dc <nrfx_gpio_handler+0x10>
    4a0c:	4623      	mov	r3, r4
    4a0e:	e7f8      	b.n	4a02 <nrfx_gpio_handler+0x36>
    4a10:	0000b15c 	.word	0x0000b15c
    4a14:	0000b144 	.word	0x0000b144

00004a18 <gpio_nrfx_pin_configure>:
{
    4a18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    4a1c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4a1e:	7b3b      	ldrb	r3, [r7, #12]
    4a20:	f001 051f 	and.w	r5, r1, #31
    4a24:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    4a28:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4a2a:	4628      	mov	r0, r5
    4a2c:	f10d 0103 	add.w	r1, sp, #3
{
    4a30:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4a32:	f001 f915 	bl	5c60 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4a36:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4a3a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4a3c:	d10b      	bne.n	4a56 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4a3e:	4628      	mov	r0, r5
    4a40:	f001 f9d2 	bl	5de8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4a44:	4b3d      	ldr	r3, [pc, #244]	; (4b3c <gpio_nrfx_pin_configure+0x124>)
    4a46:	4598      	cmp	r8, r3
    4a48:	d103      	bne.n	4a52 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    4a4a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4a4e:	f001 f94f 	bl	5cf0 <nrfx_gpiote_channel_free>
		return 0;
    4a52:	2000      	movs	r0, #0
    4a54:	e00c      	b.n	4a70 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a56:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4a58:	4619      	mov	r1, r3
    4a5a:	aa02      	add	r2, sp, #8
    4a5c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4a62:	f000 ffd7 	bl	5a14 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4a66:	4b35      	ldr	r3, [pc, #212]	; (4b3c <gpio_nrfx_pin_configure+0x124>)
    4a68:	4298      	cmp	r0, r3
    4a6a:	d004      	beq.n	4a76 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    4a6c:	f06f 0015 	mvn.w	r0, #21
}
    4a70:	b004      	add	sp, #16
    4a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    4a76:	4580      	cmp	r8, r0
    4a78:	d103      	bne.n	4a82 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    4a7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4a7e:	f001 f937 	bl	5cf0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4a82:	03a3      	lsls	r3, r4, #14
    4a84:	d54b      	bpl.n	4b1e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4a86:	f240 3306 	movw	r3, #774	; 0x306
    4a8a:	4023      	ands	r3, r4
    4a8c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    4a90:	d019      	beq.n	4ac6 <gpio_nrfx_pin_configure+0xae>
    4a92:	d80c      	bhi.n	4aae <gpio_nrfx_pin_configure+0x96>
    4a94:	2b06      	cmp	r3, #6
    4a96:	d017      	beq.n	4ac8 <gpio_nrfx_pin_configure+0xb0>
    4a98:	d804      	bhi.n	4aa4 <gpio_nrfx_pin_configure+0x8c>
    4a9a:	b1ab      	cbz	r3, 4ac8 <gpio_nrfx_pin_configure+0xb0>
    4a9c:	2b02      	cmp	r3, #2
    4a9e:	d1e5      	bne.n	4a6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    4aa0:	2304      	movs	r3, #4
    4aa2:	e011      	b.n	4ac8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4aa8:	d1e0      	bne.n	4a6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    4aaa:	2301      	movs	r3, #1
    4aac:	e00c      	b.n	4ac8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4aae:	f240 2202 	movw	r2, #514	; 0x202
    4ab2:	4293      	cmp	r3, r2
    4ab4:	d027      	beq.n	4b06 <gpio_nrfx_pin_configure+0xee>
    4ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4aba:	d026      	beq.n	4b0a <gpio_nrfx_pin_configure+0xf2>
    4abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4ac0:	d1d4      	bne.n	4a6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    4ac2:	2302      	movs	r3, #2
    4ac4:	e000      	b.n	4ac8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    4ac6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4ac8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4acc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4ad0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4ad4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4ad6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4ada:	bf54      	ite	pl
    4adc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4ae0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ae2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4ae4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ae8:	d511      	bpl.n	4b0e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4aea:	687a      	ldr	r2, [r7, #4]
    4aec:	2301      	movs	r3, #1
    4aee:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4af0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4af4:	2200      	movs	r2, #0
    4af6:	a901      	add	r1, sp, #4
    4af8:	4628      	mov	r0, r5
    4afa:	f001 f839 	bl	5b70 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4afe:	4b0f      	ldr	r3, [pc, #60]	; (4b3c <gpio_nrfx_pin_configure+0x124>)
    4b00:	4298      	cmp	r0, r3
    4b02:	d0a6      	beq.n	4a52 <gpio_nrfx_pin_configure+0x3a>
    4b04:	e7b2      	b.n	4a6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    4b06:	2305      	movs	r3, #5
    4b08:	e7de      	b.n	4ac8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4b0a:	2303      	movs	r3, #3
    4b0c:	e7dc      	b.n	4ac8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4b0e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4b10:	bf41      	itttt	mi
    4b12:	2301      	movmi	r3, #1
    4b14:	687a      	ldrmi	r2, [r7, #4]
    4b16:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4b18:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4b1c:	e7ea      	b.n	4af4 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    4b1e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4b20:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4b24:	bf54      	ite	pl
    4b26:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4b2a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4b2c:	461a      	mov	r2, r3
    4b2e:	a901      	add	r1, sp, #4
    4b30:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4b32:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4b36:	f000 ff6d 	bl	5a14 <nrfx_gpiote_input_configure>
    4b3a:	e7e0      	b.n	4afe <gpio_nrfx_pin_configure+0xe6>
    4b3c:	0bad0000 	.word	0x0bad0000

00004b40 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    4b40:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    4b42:	794b      	ldrb	r3, [r1, #5]
    4b44:	2b01      	cmp	r3, #1
    4b46:	d026      	beq.n	4b96 <uarte_nrfx_configure+0x56>
    4b48:	2b03      	cmp	r3, #3
    4b4a:	d121      	bne.n	4b90 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4b4c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4b4e:	798b      	ldrb	r3, [r1, #6]
    4b50:	2b03      	cmp	r3, #3
    4b52:	d11d      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4b54:	79ce      	ldrb	r6, [r1, #7]
    4b56:	b10e      	cbz	r6, 4b5c <uarte_nrfx_configure+0x1c>
    4b58:	2e01      	cmp	r6, #1
    4b5a:	d119      	bne.n	4b90 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4b5c:	790a      	ldrb	r2, [r1, #4]
    4b5e:	b112      	cbz	r2, 4b66 <uarte_nrfx_configure+0x26>
    4b60:	2a02      	cmp	r2, #2
    4b62:	d115      	bne.n	4b90 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4b64:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4b66:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4b68:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    4b6a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4b6e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    4b70:	d067      	beq.n	4c42 <uarte_nrfx_configure+0x102>
    4b72:	d82d      	bhi.n	4bd0 <uarte_nrfx_configure+0x90>
    4b74:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4b78:	d066      	beq.n	4c48 <uarte_nrfx_configure+0x108>
    4b7a:	d816      	bhi.n	4baa <uarte_nrfx_configure+0x6a>
    4b7c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4b80:	d064      	beq.n	4c4c <uarte_nrfx_configure+0x10c>
    4b82:	d80a      	bhi.n	4b9a <uarte_nrfx_configure+0x5a>
    4b84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4b88:	d063      	beq.n	4c52 <uarte_nrfx_configure+0x112>
    4b8a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4b8e:	d063      	beq.n	4c58 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    4b90:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4b94:	e054      	b.n	4c40 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    4b96:	2500      	movs	r5, #0
    4b98:	e7d9      	b.n	4b4e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    4b9a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4b9e:	d05e      	beq.n	4c5e <uarte_nrfx_configure+0x11e>
    4ba0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4ba4:	d1f4      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4ba6:	4b38      	ldr	r3, [pc, #224]	; (4c88 <uarte_nrfx_configure+0x148>)
    4ba8:	e03c      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4baa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4bae:	d059      	beq.n	4c64 <uarte_nrfx_configure+0x124>
    4bb0:	d807      	bhi.n	4bc2 <uarte_nrfx_configure+0x82>
    4bb2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4bb6:	d057      	beq.n	4c68 <uarte_nrfx_configure+0x128>
    4bb8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4bbc:	d1e8      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4bbe:	4b33      	ldr	r3, [pc, #204]	; (4c8c <uarte_nrfx_configure+0x14c>)
    4bc0:	e030      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4bc2:	f647 2412 	movw	r4, #31250	; 0x7a12
    4bc6:	42a3      	cmp	r3, r4
    4bc8:	d1e2      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4bca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4bce:	e029      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4bd0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4bd4:	d04a      	beq.n	4c6c <uarte_nrfx_configure+0x12c>
    4bd6:	d813      	bhi.n	4c00 <uarte_nrfx_configure+0xc0>
    4bd8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4bdc:	d049      	beq.n	4c72 <uarte_nrfx_configure+0x132>
    4bde:	d809      	bhi.n	4bf4 <uarte_nrfx_configure+0xb4>
    4be0:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    4be4:	42a3      	cmp	r3, r4
    4be6:	d046      	beq.n	4c76 <uarte_nrfx_configure+0x136>
    4be8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4bec:	d1d0      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4bee:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4bf2:	e017      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4bf4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4bf8:	d1ca      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4bfa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4bfe:	e011      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4c00:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4c04:	d03a      	beq.n	4c7c <uarte_nrfx_configure+0x13c>
    4c06:	d808      	bhi.n	4c1a <uarte_nrfx_configure+0xda>
    4c08:	4c21      	ldr	r4, [pc, #132]	; (4c90 <uarte_nrfx_configure+0x150>)
    4c0a:	42a3      	cmp	r3, r4
    4c0c:	d039      	beq.n	4c82 <uarte_nrfx_configure+0x142>
    4c0e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4c12:	d1bd      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4c14:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4c18:	e004      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4c1a:	4c1e      	ldr	r4, [pc, #120]	; (4c94 <uarte_nrfx_configure+0x154>)
    4c1c:	42a3      	cmp	r3, r4
    4c1e:	d1b7      	bne.n	4b90 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4c20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    4c24:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4c26:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    4c2a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    4c2c:	4335      	orrs	r5, r6
    4c2e:	681b      	ldr	r3, [r3, #0]
    4c30:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4c32:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    4c36:	c903      	ldmia	r1, {r0, r1}
    4c38:	1d23      	adds	r3, r4, #4
    4c3a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4c3e:	2000      	movs	r0, #0
}
    4c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4c42:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4c46:	e7ed      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4c48:	4b13      	ldr	r3, [pc, #76]	; (4c98 <uarte_nrfx_configure+0x158>)
    4c4a:	e7eb      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4c4c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4c50:	e7e8      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    4c52:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4c56:	e7e5      	b.n	4c24 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4c58:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4c5c:	e7e2      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4c5e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4c62:	e7df      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4c64:	4b0d      	ldr	r3, [pc, #52]	; (4c9c <uarte_nrfx_configure+0x15c>)
    4c66:	e7dd      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4c68:	4b0d      	ldr	r3, [pc, #52]	; (4ca0 <uarte_nrfx_configure+0x160>)
    4c6a:	e7db      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4c6c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4c70:	e7d8      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4c72:	4b0c      	ldr	r3, [pc, #48]	; (4ca4 <uarte_nrfx_configure+0x164>)
    4c74:	e7d6      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4c76:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4c7a:	e7d3      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4c7c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4c80:	e7d0      	b.n	4c24 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4c82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4c86:	e7cd      	b.n	4c24 <uarte_nrfx_configure+0xe4>
    4c88:	0013b000 	.word	0x0013b000
    4c8c:	004ea000 	.word	0x004ea000
    4c90:	0003d090 	.word	0x0003d090
    4c94:	000f4240 	.word	0x000f4240
    4c98:	00275000 	.word	0x00275000
    4c9c:	0075c000 	.word	0x0075c000
    4ca0:	003af000 	.word	0x003af000
    4ca4:	013a9000 	.word	0x013a9000

00004ca8 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4cac:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    4cae:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4cb0:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4cb2:	2100      	movs	r1, #0
    4cb4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4cb8:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    4cba:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
    4cbe:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4cc0:	aa01      	add	r2, sp, #4
    4cc2:	4648      	mov	r0, r9
    4cc4:	f005 fac4 	bl	a250 <pinctrl_lookup_state>
	if (ret < 0) {
    4cc8:	1e05      	subs	r5, r0, #0
    4cca:	db54      	blt.n	4d76 <uarte_instance_init.constprop.0+0xce>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4ccc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4cce:	f8d9 2000 	ldr.w	r2, [r9]
    4cd2:	7919      	ldrb	r1, [r3, #4]
    4cd4:	6818      	ldr	r0, [r3, #0]
    4cd6:	f000 fb81 	bl	53dc <pinctrl_configure_pins>
	if (err < 0) {
    4cda:	1e05      	subs	r5, r0, #0
    4cdc:	db4b      	blt.n	4d76 <uarte_instance_init.constprop.0+0xce>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4cde:	1d31      	adds	r1, r6, #4
    4ce0:	4640      	mov	r0, r8
    4ce2:	f7ff ff2d 	bl	4b40 <uarte_nrfx_configure>
	if (err) {
    4ce6:	4605      	mov	r5, r0
    4ce8:	2800      	cmp	r0, #0
    4cea:	d144      	bne.n	4d76 <uarte_instance_init.constprop.0+0xce>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4cec:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4cee:	0799      	lsls	r1, r3, #30
    4cf0:	d51a      	bpl.n	4d28 <uarte_instance_init.constprop.0+0x80>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4cf2:	f106 001c 	add.w	r0, r6, #28
    4cf6:	f001 f979 	bl	5fec <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4cfa:	4b22      	ldr	r3, [pc, #136]	; (4d84 <uarte_instance_init.constprop.0+0xdc>)
    4cfc:	4298      	cmp	r0, r3
    4cfe:	d13e      	bne.n	4d7e <uarte_instance_init.constprop.0+0xd6>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4d00:	7f33      	ldrb	r3, [r6, #28]
    4d02:	00db      	lsls	r3, r3, #3
    4d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d08:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    4d0c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4d10:	f504 7190 	add.w	r1, r4, #288	; 0x120
    4d14:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4d18:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4d1c:	7f32      	ldrb	r2, [r6, #28]
    4d1e:	2301      	movs	r3, #1
    4d20:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    4d22:	4a19      	ldr	r2, [pc, #100]	; (4d88 <uarte_instance_init.constprop.0+0xe0>)
    4d24:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4d28:	2308      	movs	r3, #8
    4d2a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    4d2e:	7a3b      	ldrb	r3, [r7, #8]
    4d30:	b953      	cbnz	r3, 4d48 <uarte_instance_init.constprop.0+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d32:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4d36:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4d3a:	69b3      	ldr	r3, [r6, #24]
    4d3c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4d40:	2301      	movs	r3, #1
    4d42:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d46:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4d4c:	bf5c      	itt	pl
    4d4e:	f44f 7380 	movpl.w	r3, #256	; 0x100
    4d52:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	06db      	lsls	r3, r3, #27
    4d5a:	bf44      	itt	mi
    4d5c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4d60:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4d64:	6973      	ldr	r3, [r6, #20]
    4d66:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4d6a:	2300      	movs	r3, #0
    4d6c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d70:	2301      	movs	r3, #1
    4d72:	60a3      	str	r3, [r4, #8]
    4d74:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4d76:	4628      	mov	r0, r5
    4d78:	b003      	add	sp, #12
    4d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    4d7e:	f06f 0504 	mvn.w	r5, #4
    4d82:	e7f8      	b.n	4d76 <uarte_instance_init.constprop.0+0xce>
    4d84:	0bad0000 	.word	0x0bad0000
    4d88:	4001f000 	.word	0x4001f000

00004d8c <uarte_nrfx_poll_out>:
{
    4d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d8e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    4d90:	6907      	ldr	r7, [r0, #16]
{
    4d92:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d94:	f005 fbbc 	bl	a510 <k_is_in_isr>
    4d98:	b9b0      	cbnz	r0, 4dc8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    4d9a:	4b21      	ldr	r3, [pc, #132]	; (4e20 <uarte_nrfx_poll_out+0x94>)
    4d9c:	781b      	ldrb	r3, [r3, #0]
    4d9e:	b19b      	cbz	r3, 4dc8 <uarte_nrfx_poll_out+0x3c>
{
    4da0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4da2:	6860      	ldr	r0, [r4, #4]
    4da4:	f005 f979 	bl	a09a <is_tx_ready.isra.0>
    4da8:	bb00      	cbnz	r0, 4dec <uarte_nrfx_poll_out+0x60>
    4daa:	2001      	movs	r0, #1
    4dac:	f005 fa73 	bl	a296 <nrfx_busy_wait>
    4db0:	3e01      	subs	r6, #1
    4db2:	d1f6      	bne.n	4da2 <uarte_nrfx_poll_out+0x16>
    4db4:	2100      	movs	r1, #0
    4db6:	2021      	movs	r0, #33	; 0x21
    4db8:	f002 f83c 	bl	6e34 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4dbc:	e7f0      	b.n	4da0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    4dbe:	f381 8811 	msr	BASEPRI, r1
    4dc2:	f3bf 8f6f 	isb	sy
}
    4dc6:	e7f5      	b.n	4db4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    4dc8:	f04f 0320 	mov.w	r3, #32
    4dcc:	f3ef 8111 	mrs	r1, BASEPRI
    4dd0:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4dd8:	6860      	ldr	r0, [r4, #4]
    4dda:	460e      	mov	r6, r1
    4ddc:	f005 f95d 	bl	a09a <is_tx_ready.isra.0>
    4de0:	b990      	cbnz	r0, 4e08 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    4de2:	f381 8811 	msr	BASEPRI, r1
    4de6:	f3bf 8f6f 	isb	sy
}
    4dea:	e7ed      	b.n	4dc8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    4dec:	f04f 0320 	mov.w	r3, #32
    4df0:	f3ef 8111 	mrs	r1, BASEPRI
    4df4:	f383 8812 	msr	BASEPRI_MAX, r3
    4df8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4dfc:	6860      	ldr	r0, [r4, #4]
    4dfe:	460e      	mov	r6, r1
    4e00:	f005 f94b 	bl	a09a <is_tx_ready.isra.0>
    4e04:	2800      	cmp	r0, #0
    4e06:	d0da      	beq.n	4dbe <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    4e08:	697b      	ldr	r3, [r7, #20]
    4e0a:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    4e0c:	6979      	ldr	r1, [r7, #20]
    4e0e:	2201      	movs	r2, #1
    4e10:	4620      	mov	r0, r4
    4e12:	f005 f882 	bl	9f1a <tx_start>
	__asm__ volatile(
    4e16:	f386 8811 	msr	BASEPRI, r6
    4e1a:	f3bf 8f6f 	isb	sy
}
    4e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e20:	20001ce3 	.word	0x20001ce3

00004e24 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4e24:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4e26:	2301      	movs	r3, #1
    4e28:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4e2a:	4a0e      	ldr	r2, [pc, #56]	; (4e64 <compare_int_lock+0x40>)
    4e2c:	f3bf 8f5b 	dmb	ish
    4e30:	43dc      	mvns	r4, r3
    4e32:	e852 1f00 	ldrex	r1, [r2]
    4e36:	ea01 0504 	and.w	r5, r1, r4
    4e3a:	e842 5600 	strex	r6, r5, [r2]
    4e3e:	2e00      	cmp	r6, #0
    4e40:	d1f7      	bne.n	4e32 <compare_int_lock+0xe>
    4e42:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4e4a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4e4c:	4806      	ldr	r0, [pc, #24]	; (4e68 <compare_int_lock+0x44>)
    4e4e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4e52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e56:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4e5a:	420b      	tst	r3, r1
}
    4e5c:	bf14      	ite	ne
    4e5e:	2001      	movne	r0, #1
    4e60:	2000      	moveq	r0, #0
    4e62:	bd70      	pop	{r4, r5, r6, pc}
    4e64:	2000156c 	.word	0x2000156c
    4e68:	40011000 	.word	0x40011000

00004e6c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    4e6c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    4e6e:	4918      	ldr	r1, [pc, #96]	; (4ed0 <sys_clock_timeout_handler+0x64>)
    4e70:	680b      	ldr	r3, [r1, #0]
	return absolute_time & COUNTER_MAX;
    4e72:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    4e76:	1ad2      	subs	r2, r2, r3
	return z_clock_hw_cycles_per_sec;
    4e78:	4d16      	ldr	r5, [pc, #88]	; (4ed4 <sys_clock_timeout_handler+0x68>)
    4e7a:	682b      	ldr	r3, [r5, #0]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	bfbc      	itt	lt
    4e80:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    4e84:	337f      	addlt	r3, #127	; 0x7f
    4e86:	13db      	asrs	r3, r3, #15
    4e88:	fbb2 f0f3 	udiv	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    4e8c:	682b      	ldr	r3, [r5, #0]
    4e8e:	2b00      	cmp	r3, #0
    4e90:	bfb8      	it	lt
    4e92:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    4e96:	e9d1 5200 	ldrd	r5, r2, [r1]
    4e9a:	bfb8      	it	lt
    4e9c:	337f      	addlt	r3, #127	; 0x7f
    4e9e:	13db      	asrs	r3, r3, #15
    4ea0:	4343      	muls	r3, r0
    4ea2:	195b      	adds	r3, r3, r5
    4ea4:	f142 0200 	adc.w	r2, r2, #0
    4ea8:	e9c1 3200 	strd	r3, r2, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4eac:	f5a4 1300 	sub.w	r3, r4, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4eb4:	d209      	bcs.n	4eca <sys_clock_timeout_handler+0x5e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4eb6:	4b08      	ldr	r3, [pc, #32]	; (4ed8 <sys_clock_timeout_handler+0x6c>)
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	0a1a      	lsrs	r2, r3, #8
    4ebc:	061b      	lsls	r3, r3, #24
    4ebe:	191e      	adds	r6, r3, r4
    4ec0:	4b06      	ldr	r3, [pc, #24]	; (4edc <sys_clock_timeout_handler+0x70>)
    4ec2:	f142 0700 	adc.w	r7, r2, #0
    4ec6:	e9c3 6700 	strd	r6, r7, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    4eca:	bcf0      	pop	{r4, r5, r6, r7}
	sys_clock_announce(dticks);
    4ecc:	f002 b92e 	b.w	712c <sys_clock_announce>
    4ed0:	20000518 	.word	0x20000518
    4ed4:	20000200 	.word	0x20000200
    4ed8:	20001570 	.word	0x20001570
    4edc:	20000520 	.word	0x20000520

00004ee0 <compare_int_unlock>:
	if (key) {
    4ee0:	b311      	cbz	r1, 4f28 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ee2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    4ee6:	2301      	movs	r3, #1
    4ee8:	4a10      	ldr	r2, [pc, #64]	; (4f2c <compare_int_unlock+0x4c>)
    4eea:	4083      	lsls	r3, r0
    4eec:	e852 cf00 	ldrex	ip, [r2]
    4ef0:	ea4c 0c03 	orr.w	ip, ip, r3
    4ef4:	e842 c100 	strex	r1, ip, [r2]
    4ef8:	2900      	cmp	r1, #0
    4efa:	d1f7      	bne.n	4eec <compare_int_unlock+0xc>
    4efc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4f00:	4a0b      	ldr	r2, [pc, #44]	; (4f30 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4f06:	4083      	lsls	r3, r0
    4f08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4f0c:	4b09      	ldr	r3, [pc, #36]	; (4f34 <compare_int_unlock+0x54>)
    4f0e:	f3bf 8f5b 	dmb	ish
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4f18:	40c3      	lsrs	r3, r0
    4f1a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f1c:	bf42      	ittt	mi
    4f1e:	4b06      	ldrmi	r3, [pc, #24]	; (4f38 <compare_int_unlock+0x58>)
    4f20:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4f24:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4f28:	4770      	bx	lr
    4f2a:	bf00      	nop
    4f2c:	2000156c 	.word	0x2000156c
    4f30:	40011000 	.word	0x40011000
    4f34:	20001568 	.word	0x20001568
    4f38:	e000e100 	.word	0xe000e100

00004f3c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4f3c:	4b0d      	ldr	r3, [pc, #52]	; (4f74 <z_nrf_rtc_timer_read+0x38>)
    4f3e:	6818      	ldr	r0, [r3, #0]
    4f40:	0a01      	lsrs	r1, r0, #8
    4f42:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4f44:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    4f48:	4b0b      	ldr	r3, [pc, #44]	; (4f78 <z_nrf_rtc_timer_read+0x3c>)
    4f4a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4f4e:	1818      	adds	r0, r3, r0
    4f50:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4f58:	d20a      	bcs.n	4f70 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4f5a:	4b08      	ldr	r3, [pc, #32]	; (4f7c <z_nrf_rtc_timer_read+0x40>)
    4f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f60:	4290      	cmp	r0, r2
    4f62:	eb71 0303 	sbcs.w	r3, r1, r3
    4f66:	d203      	bcs.n	4f70 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4f68:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4f6c:	f141 0100 	adc.w	r1, r1, #0
}
    4f70:	4770      	bx	lr
    4f72:	bf00      	nop
    4f74:	20001570 	.word	0x20001570
    4f78:	40011000 	.word	0x40011000
    4f7c:	20000520 	.word	0x20000520

00004f80 <compare_set>:
{
    4f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f84:	4616      	mov	r6, r2
    4f86:	461f      	mov	r7, r3
    4f88:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    4f8a:	f7ff ff4b 	bl	4e24 <compare_int_lock>
    4f8e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4f90:	f7ff ffd4 	bl	4f3c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4f94:	42b0      	cmp	r0, r6
    4f96:	eb71 0307 	sbcs.w	r3, r1, r7
    4f9a:	d251      	bcs.n	5040 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    4f9c:	4b3a      	ldr	r3, [pc, #232]	; (5088 <compare_set+0x108>)
    4f9e:	1a30      	subs	r0, r6, r0
    4fa0:	eb67 0101 	sbc.w	r1, r7, r1
    4fa4:	4298      	cmp	r0, r3
    4fa6:	f171 0100 	sbcs.w	r1, r1, #0
    4faa:	d26a      	bcs.n	5082 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    4fac:	4b37      	ldr	r3, [pc, #220]	; (508c <compare_set+0x10c>)
    4fae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4fb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4fb6:	429f      	cmp	r7, r3
    4fb8:	bf08      	it	eq
    4fba:	4296      	cmpeq	r6, r2
    4fbc:	d04e      	beq.n	505c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4fbe:	4934      	ldr	r1, [pc, #208]	; (5090 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4fc0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4fc4:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4fc8:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4fcc:	00ad      	lsls	r5, r5, #2
    4fce:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    4fd2:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fd4:	b2ad      	uxth	r5, r5
    4fd6:	f005 f92b 	bl	a230 <event_clear>
	return absolute_time & COUNTER_MAX;
    4fda:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    4fde:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    4fe2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    4fe6:	4a2b      	ldr	r2, [pc, #172]	; (5094 <compare_set+0x114>)
    4fe8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fea:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    4fee:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    4ff0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    4ff4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4ff6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    4ffa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    4ffe:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    5002:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5006:	f06f 0002 	mvn.w	r0, #2
    500a:	eba0 0008 	sub.w	r0, r0, r8
    500e:	4460      	add	r0, ip
    5010:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    5014:	4290      	cmp	r0, r2
    5016:	d921      	bls.n	505c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5018:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    501a:	b160      	cbz	r0, 5036 <compare_set+0xb6>
     return p_reg->COUNTER;
    501c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5020:	eba8 000b 	sub.w	r0, r8, fp
    5024:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    5028:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    502c:	d916      	bls.n	505c <compare_set+0xdc>
					event_clear(chan);
    502e:	4620      	mov	r0, r4
    5030:	f005 f8fe 	bl	a230 <event_clear>
    5034:	4a17      	ldr	r2, [pc, #92]	; (5094 <compare_set+0x114>)
			cc_val = now + cc_inc;
    5036:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    503a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    503e:	e7d9      	b.n	4ff4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5040:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5042:	4a15      	ldr	r2, [pc, #84]	; (5098 <compare_set+0x118>)
    5044:	f3bf 8f5b 	dmb	ish
    5048:	40a3      	lsls	r3, r4
    504a:	e852 0f00 	ldrex	r0, [r2]
    504e:	4318      	orrs	r0, r3
    5050:	e842 0100 	strex	r1, r0, [r2]
    5054:	2900      	cmp	r1, #0
    5056:	d1f8      	bne.n	504a <compare_set+0xca>
    5058:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    505c:	490b      	ldr	r1, [pc, #44]	; (508c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    505e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5060:	0123      	lsls	r3, r4, #4
    5062:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    5066:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    506a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    506c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    506e:	6053      	str	r3, [r2, #4]
	return ret;
    5070:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    5072:	4620      	mov	r0, r4
    5074:	9900      	ldr	r1, [sp, #0]
    5076:	f7ff ff33 	bl	4ee0 <compare_int_unlock>
}
    507a:	4628      	mov	r0, r5
    507c:	b003      	add	sp, #12
    507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    5082:	f06f 0515 	mvn.w	r5, #21
    5086:	e7f4      	b.n	5072 <compare_set+0xf2>
    5088:	00800001 	.word	0x00800001
    508c:	20000508 	.word	0x20000508
    5090:	40011000 	.word	0x40011000
    5094:	007ffffd 	.word	0x007ffffd
    5098:	20001568 	.word	0x20001568

0000509c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    509c:	b513      	push	{r0, r1, r4, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    509e:	4b26      	ldr	r3, [pc, #152]	; (5138 <sys_clock_driver_init+0x9c>)
    p_reg->PRESCALER = val;
    50a0:	4c26      	ldr	r4, [pc, #152]	; (513c <sys_clock_driver_init+0xa0>)
    50a2:	2200      	movs	r2, #0
    50a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    50a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    50ac:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    50b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    50b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    50b8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    50bc:	2302      	movs	r3, #2
    50be:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50c2:	4b1f      	ldr	r3, [pc, #124]	; (5140 <sys_clock_driver_init+0xa4>)
    50c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    50c8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    50cc:	2011      	movs	r0, #17
    50ce:	2101      	movs	r1, #1
    50d0:	f7fe fd94 	bl	3bfc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    50d4:	2011      	movs	r0, #17
    50d6:	f7fe fd75 	bl	3bc4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    50da:	4a1a      	ldr	r2, [pc, #104]	; (5144 <sys_clock_driver_init+0xa8>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    50dc:	2301      	movs	r3, #1
    50de:	60a3      	str	r3, [r4, #8]
    50e0:	6023      	str	r3, [r4, #0]
    50e2:	6013      	str	r3, [r2, #0]
    50e4:	4818      	ldr	r0, [pc, #96]	; (5148 <sys_clock_driver_init+0xac>)
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;
    50e6:	6801      	ldr	r1, [r0, #0]
    50e8:	2900      	cmp	r1, #0
    50ea:	bfbc      	itt	lt
    50ec:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
    50f0:	317f      	addlt	r1, #127	; 0x7f
    50f2:	13c9      	asrs	r1, r1, #15
    50f4:	f5c1 0100 	rsb	r1, r1, #8388608	; 0x800000
    50f8:	6803      	ldr	r3, [r0, #0]
    50fa:	2b00      	cmp	r3, #0
    50fc:	bfbc      	itt	lt
    50fe:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    5102:	337f      	addlt	r3, #127	; 0x7f
    5104:	13db      	asrs	r3, r3, #15
    5106:	fbb1 f1f3 	udiv	r1, r1, r3
    510a:	6802      	ldr	r2, [r0, #0]

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    510c:	4b0f      	ldr	r3, [pc, #60]	; (514c <sys_clock_driver_init+0xb0>)
    510e:	9300      	str	r3, [sp, #0]
		MAX_CYCLES : CYC_PER_TICK;
    5110:	2a00      	cmp	r2, #0
    5112:	bfbc      	itt	lt
    5114:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    5118:	327f      	addlt	r2, #127	; 0x7f
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    511a:	2400      	movs	r4, #0
		MAX_CYCLES : CYC_PER_TICK;
    511c:	13d2      	asrs	r2, r2, #15
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    511e:	434a      	muls	r2, r1
    5120:	4623      	mov	r3, r4
    5122:	9401      	str	r4, [sp, #4]
    5124:	4620      	mov	r0, r4
    5126:	f7ff ff2b 	bl	4f80 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    512a:	2002      	movs	r0, #2
    512c:	f7ff fb22 	bl	4774 <z_nrf_clock_control_lf_on>

	return 0;
}
    5130:	4620      	mov	r0, r4
    5132:	b002      	add	sp, #8
    5134:	bd10      	pop	{r4, pc}
    5136:	bf00      	nop
    5138:	20000508 	.word	0x20000508
    513c:	40011000 	.word	0x40011000
    5140:	e000e100 	.word	0xe000e100
    5144:	2000156c 	.word	0x2000156c
    5148:	20000200 	.word	0x20000200
    514c:	00004e6d 	.word	0x00004e6d

00005150 <rtc_nrf_isr>:
{
    5150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5154:	4c2f      	ldr	r4, [pc, #188]	; (5214 <rtc_nrf_isr+0xc4>)
    5156:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    515a:	0799      	lsls	r1, r3, #30
    515c:	d50b      	bpl.n	5176 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    515e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5162:	b143      	cbz	r3, 5176 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5164:	4a2c      	ldr	r2, [pc, #176]	; (5218 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5166:	2300      	movs	r3, #0
    5168:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    516c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5170:	6813      	ldr	r3, [r2, #0]
    5172:	3301      	adds	r3, #1
    5174:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5176:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    517a:	03da      	lsls	r2, r3, #15
    517c:	d52a      	bpl.n	51d4 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    517e:	f3bf 8f5b 	dmb	ish
    5182:	4b26      	ldr	r3, [pc, #152]	; (521c <rtc_nrf_isr+0xcc>)
    5184:	e853 2f00 	ldrex	r2, [r3]
    5188:	f022 0101 	bic.w	r1, r2, #1
    518c:	e843 1000 	strex	r0, r1, [r3]
    5190:	2800      	cmp	r0, #0
    5192:	d1f7      	bne.n	5184 <rtc_nrf_isr+0x34>
    5194:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    5198:	07d3      	lsls	r3, r2, #31
    519a:	d402      	bmi.n	51a2 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    519c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    51a0:	b1c3      	cbz	r3, 51d4 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    51a2:	2500      	movs	r5, #0
    51a4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    51a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    51ac:	f7ff fec6 	bl	4f3c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    51b0:	f04f 0320 	mov.w	r3, #32
    51b4:	f3ef 8211 	mrs	r2, BASEPRI
    51b8:	f383 8812 	msr	BASEPRI_MAX, r3
    51bc:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    51c0:	4b17      	ldr	r3, [pc, #92]	; (5220 <rtc_nrf_isr+0xd0>)
    51c2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    51c6:	42b0      	cmp	r0, r6
    51c8:	41b9      	sbcs	r1, r7
    51ca:	d206      	bcs.n	51da <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    51cc:	f382 8811 	msr	BASEPRI, r2
    51d0:	f3bf 8f6f 	isb	sy
}
    51d4:	b003      	add	sp, #12
    51d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    51da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    51de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    51e2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    51e6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    51ea:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    51ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    51f0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    51f4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    51f8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    51fc:	f382 8811 	msr	BASEPRI, r2
    5200:	f3bf 8f6f 	isb	sy
		if (handler) {
    5204:	2900      	cmp	r1, #0
    5206:	d0e5      	beq.n	51d4 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    5208:	9000      	str	r0, [sp, #0]
    520a:	4632      	mov	r2, r6
    520c:	463b      	mov	r3, r7
    520e:	4628      	mov	r0, r5
    5210:	4788      	blx	r1
    5212:	e7df      	b.n	51d4 <rtc_nrf_isr+0x84>
    5214:	40011000 	.word	0x40011000
    5218:	20001570 	.word	0x20001570
    521c:	20001568 	.word	0x20001568
    5220:	20000508 	.word	0x20000508

00005224 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    5224:	1c43      	adds	r3, r0, #1
{
    5226:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5228:	4d5c      	ldr	r5, [pc, #368]	; (539c <sys_clock_set_timeout+0x178>)
	if (ticks == K_TICKS_FOREVER) {
    522a:	f040 8082 	bne.w	5332 <sys_clock_set_timeout+0x10e>
		cyc = MAX_TICKS * CYC_PER_TICK;
    522e:	682a      	ldr	r2, [r5, #0]
    5230:	2a00      	cmp	r2, #0
    5232:	bfbc      	itt	lt
    5234:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    5238:	327f      	addlt	r2, #127	; 0x7f
    523a:	13d2      	asrs	r2, r2, #15
    523c:	f5c2 0200 	rsb	r2, r2, #8388608	; 0x800000
    5240:	682b      	ldr	r3, [r5, #0]
    5242:	2b00      	cmp	r3, #0
    5244:	bfbc      	itt	lt
    5246:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    524a:	337f      	addlt	r3, #127	; 0x7f
    524c:	13db      	asrs	r3, r3, #15
    524e:	fbb2 f2f3 	udiv	r2, r2, r3
    5252:	682b      	ldr	r3, [r5, #0]
    5254:	2b00      	cmp	r3, #0
    5256:	bfbc      	itt	lt
    5258:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    525c:	337f      	addlt	r3, #127	; 0x7f
    525e:	13db      	asrs	r3, r3, #15
    5260:	fb02 f403 	mul.w	r4, r2, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5264:	f7ff fe6a 	bl	4f3c <z_nrf_rtc_timer_read>
    5268:	494d      	ldr	r1, [pc, #308]	; (53a0 <sys_clock_set_timeout+0x17c>)
    526a:	680b      	ldr	r3, [r1, #0]
    526c:	1ac0      	subs	r0, r0, r3
		cyc = 0;
    526e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5272:	bf28      	it	cs
    5274:	2400      	movcs	r4, #0
	cyc = ceiling_fraction(cyc, CYC_PER_TICK) * CYC_PER_TICK;
    5276:	682b      	ldr	r3, [r5, #0]
    5278:	2b00      	cmp	r3, #0
    527a:	bfbc      	itt	lt
    527c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    5280:	337f      	addlt	r3, #127	; 0x7f
    5282:	eb00 30e3 	add.w	r0, r0, r3, asr #15
    5286:	3801      	subs	r0, #1
    5288:	4420      	add	r0, r4
    528a:	682b      	ldr	r3, [r5, #0]
    528c:	2b00      	cmp	r3, #0
    528e:	bfbc      	itt	lt
    5290:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    5294:	337f      	addlt	r3, #127	; 0x7f
    5296:	13db      	asrs	r3, r3, #15
    5298:	fbb0 f0f3 	udiv	r0, r0, r3
    529c:	682a      	ldr	r2, [r5, #0]
    529e:	2a00      	cmp	r2, #0
    52a0:	bfbc      	itt	lt
    52a2:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    52a6:	327f      	addlt	r2, #127	; 0x7f
    52a8:	13d2      	asrs	r2, r2, #15
    52aa:	4342      	muls	r2, r0
	if (cyc > MAX_CYCLES) {
    52ac:	682b      	ldr	r3, [r5, #0]
    52ae:	2b00      	cmp	r3, #0
    52b0:	bfbc      	itt	lt
    52b2:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    52b6:	337f      	addlt	r3, #127	; 0x7f
    52b8:	13db      	asrs	r3, r3, #15
    52ba:	f5c3 0300 	rsb	r3, r3, #8388608	; 0x800000
    52be:	6828      	ldr	r0, [r5, #0]
    52c0:	2800      	cmp	r0, #0
    52c2:	bfbc      	itt	lt
    52c4:	f500 40ff 	addlt.w	r0, r0, #32640	; 0x7f80
    52c8:	307f      	addlt	r0, #127	; 0x7f
    52ca:	13c0      	asrs	r0, r0, #15
    52cc:	fbb3 f3f0 	udiv	r3, r3, r0
    52d0:	6828      	ldr	r0, [r5, #0]
    52d2:	2800      	cmp	r0, #0
    52d4:	bfbc      	itt	lt
    52d6:	f500 40ff 	addlt.w	r0, r0, #32640	; 0x7f80
    52da:	307f      	addlt	r0, #127	; 0x7f
    52dc:	13c0      	asrs	r0, r0, #15
    52de:	4358      	muls	r0, r3
    52e0:	4290      	cmp	r0, r2
    52e2:	d219      	bcs.n	5318 <sys_clock_set_timeout+0xf4>
		cyc = MAX_CYCLES;
    52e4:	682b      	ldr	r3, [r5, #0]
    52e6:	2b00      	cmp	r3, #0
    52e8:	bfbc      	itt	lt
    52ea:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    52ee:	337f      	addlt	r3, #127	; 0x7f
    52f0:	13db      	asrs	r3, r3, #15
    52f2:	f5c3 0300 	rsb	r3, r3, #8388608	; 0x800000
    52f6:	682a      	ldr	r2, [r5, #0]
    52f8:	2a00      	cmp	r2, #0
    52fa:	bfbc      	itt	lt
    52fc:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    5300:	327f      	addlt	r2, #127	; 0x7f
    5302:	13d2      	asrs	r2, r2, #15
    5304:	fbb3 f3f2 	udiv	r3, r3, r2
    5308:	682a      	ldr	r2, [r5, #0]
    530a:	2a00      	cmp	r2, #0
    530c:	bfbc      	itt	lt
    530e:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    5312:	327f      	addlt	r2, #127	; 0x7f
    5314:	13d2      	asrs	r2, r2, #15
    5316:	435a      	muls	r2, r3
	uint64_t target_time = cyc + last_count;
    5318:	e9d1 4300 	ldrd	r4, r3, [r1]
    531c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    531e:	4921      	ldr	r1, [pc, #132]	; (53a4 <sys_clock_set_timeout+0x180>)
    5320:	9001      	str	r0, [sp, #4]
	uint64_t target_time = cyc + last_count;
    5322:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5324:	9100      	str	r1, [sp, #0]
    5326:	f143 0300 	adc.w	r3, r3, #0
    532a:	f7ff fe29 	bl	4f80 <compare_set>
}
    532e:	b003      	add	sp, #12
    5330:	bd30      	pop	{r4, r5, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    5332:	2801      	cmp	r0, #1
    5334:	dd2f      	ble.n	5396 <sys_clock_set_timeout+0x172>
    5336:	682b      	ldr	r3, [r5, #0]
    5338:	2b00      	cmp	r3, #0
    533a:	bfbc      	itt	lt
    533c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    5340:	337f      	addlt	r3, #127	; 0x7f
    5342:	13db      	asrs	r3, r3, #15
    5344:	f5c3 0300 	rsb	r3, r3, #8388608	; 0x800000
    5348:	682a      	ldr	r2, [r5, #0]
    534a:	2a00      	cmp	r2, #0
    534c:	bfbc      	itt	lt
    534e:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    5352:	327f      	addlt	r2, #127	; 0x7f
    5354:	13d2      	asrs	r2, r2, #15
    5356:	fbb3 f3f2 	udiv	r3, r3, r2
    535a:	4283      	cmp	r3, r0
    535c:	dc11      	bgt.n	5382 <sys_clock_set_timeout+0x15e>
    535e:	6828      	ldr	r0, [r5, #0]
    5360:	2800      	cmp	r0, #0
    5362:	bfbc      	itt	lt
    5364:	f500 40ff 	addlt.w	r0, r0, #32640	; 0x7f80
    5368:	307f      	addlt	r0, #127	; 0x7f
    536a:	13c0      	asrs	r0, r0, #15
    536c:	f5c0 0000 	rsb	r0, r0, #8388608	; 0x800000
    5370:	682b      	ldr	r3, [r5, #0]
    5372:	2b00      	cmp	r3, #0
    5374:	bfbc      	itt	lt
    5376:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    537a:	337f      	addlt	r3, #127	; 0x7f
    537c:	13db      	asrs	r3, r3, #15
    537e:	fbb0 f0f3 	udiv	r0, r0, r3
		cyc *= CYC_PER_TICK;
    5382:	682b      	ldr	r3, [r5, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	bfbc      	itt	lt
    5388:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    538c:	337f      	addlt	r3, #127	; 0x7f
    538e:	13db      	asrs	r3, r3, #15
    5390:	fb00 f403 	mul.w	r4, r0, r3
		sys_busy = true;
    5394:	e766      	b.n	5264 <sys_clock_set_timeout+0x40>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    5396:	2001      	movs	r0, #1
    5398:	e7f3      	b.n	5382 <sys_clock_set_timeout+0x15e>
    539a:	bf00      	nop
    539c:	20000200 	.word	0x20000200
    53a0:	20000518 	.word	0x20000518
    53a4:	00004e6d 	.word	0x00004e6d

000053a8 <sys_clock_elapsed>:
{
    53a8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    53aa:	f7ff fdc7 	bl	4f3c <z_nrf_rtc_timer_read>
    53ae:	4a09      	ldr	r2, [pc, #36]	; (53d4 <sys_clock_elapsed+0x2c>)
    53b0:	e9d2 3200 	ldrd	r3, r2, [r2]
    53b4:	1ac0      	subs	r0, r0, r3
    53b6:	eb61 0102 	sbc.w	r1, r1, r2
    53ba:	4b07      	ldr	r3, [pc, #28]	; (53d8 <sys_clock_elapsed+0x30>)
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	2b00      	cmp	r3, #0
    53c0:	bfbc      	itt	lt
    53c2:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
    53c6:	337f      	addlt	r3, #127	; 0x7f
    53c8:	13da      	asrs	r2, r3, #15
    53ca:	17db      	asrs	r3, r3, #31
    53cc:	f7fa fef4 	bl	1b8 <__aeabi_uldivmod>
}
    53d0:	bd08      	pop	{r3, pc}
    53d2:	bf00      	nop
    53d4:	20000518 	.word	0x20000518
    53d8:	20000200 	.word	0x20000200

000053dc <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    53dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    53e0:	4e5a      	ldr	r6, [pc, #360]	; (554c <pinctrl_configure_pins+0x170>)
    53e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    53e6:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    53e8:	4281      	cmp	r1, r0
    53ea:	d102      	bne.n	53f2 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    53ec:	2000      	movs	r0, #0
}
    53ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    53f2:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    53f4:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    53f8:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    53fc:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    53fe:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    5402:	bf08      	it	eq
    5404:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    5408:	2c22      	cmp	r4, #34	; 0x22
    540a:	f200 809b 	bhi.w	5544 <pinctrl_configure_pins+0x168>
    540e:	e8df f004 	tbb	[pc, r4]
    5412:	2412      	.short	0x2412
    5414:	402c4429 	.word	0x402c4429
    5418:	99999944 	.word	0x99999944
    541c:	99704799 	.word	0x99704799
    5420:	99999999 	.word	0x99999999
    5424:	99999999 	.word	0x99999999
    5428:	817e7b73 	.word	0x817e7b73
    542c:	84999999 	.word	0x84999999
    5430:	93908d8a 	.word	0x93908d8a
    5434:	96          	.byte	0x96
    5435:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    5436:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    543a:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    543e:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    5442:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    5446:	bf14      	ite	ne
    5448:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    544c:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    544e:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    5452:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    5456:	2401      	movs	r4, #1
    5458:	e002      	b.n	5460 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    545a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    545e:	2400      	movs	r4, #0
    5460:	46a6      	mov	lr, r4
    5462:	e024      	b.n	54ae <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    5464:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    5468:	e7e7      	b.n	543a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    546a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    546e:	2400      	movs	r4, #0
    return pin_number >> 5;
    5470:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    5474:	f1be 0f01 	cmp.w	lr, #1
    5478:	bf14      	ite	ne
    547a:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    547e:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    5480:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5484:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    5488:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    548c:	f04f 0e01 	mov.w	lr, #1
    5490:	e00d      	b.n	54ae <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    5492:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    5496:	2401      	movs	r4, #1
    5498:	e7ea      	b.n	5470 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    549a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    549e:	e7de      	b.n	545e <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    54a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    54a4:	2d00      	cmp	r5, #0
    54a6:	d1da      	bne.n	545e <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    54a8:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    54aa:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    54ac:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    54ae:	f850 cb04 	ldr.w	ip, [r0], #4
    54b2:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    54b6:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    54ba:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    54be:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    54c2:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    54c6:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    54ca:	bf1c      	itt	ne
    54cc:	2401      	movne	r4, #1
    54ce:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    54d2:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    54d6:	2b01      	cmp	r3, #1
    54d8:	bf0c      	ite	eq
    54da:	4633      	moveq	r3, r6
    54dc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    54e0:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    54e4:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    54e8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    54ec:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    54f0:	e77a      	b.n	53e8 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    54f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    54f6:	e7d5      	b.n	54a4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    54f8:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    54fc:	6804      	ldr	r4, [r0, #0]
    54fe:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    5502:	2c00      	cmp	r4, #0
    5504:	d0c7      	beq.n	5496 <pinctrl_configure_pins+0xba>
    5506:	e798      	b.n	543a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    5508:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    550c:	e7f6      	b.n	54fc <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    550e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    5512:	e7f3      	b.n	54fc <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    5514:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    5518:	e7f0      	b.n	54fc <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    551a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    551e:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5520:	f04f 0e00 	mov.w	lr, #0
    5524:	e7c3      	b.n	54ae <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    5526:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    552a:	e786      	b.n	543a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    552c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    5530:	e7f5      	b.n	551e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    5532:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    5536:	e7f2      	b.n	551e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    5538:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    553c:	e7ef      	b.n	551e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    553e:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    5542:	e7ec      	b.n	551e <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    5544:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5548:	e751      	b.n	53ee <pinctrl_configure_pins+0x12>
    554a:	bf00      	nop
    554c:	50000300 	.word	0x50000300

00005550 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5550:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5554:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5558:	2a08      	cmp	r2, #8
    555a:	d106      	bne.n	556a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    555c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5560:	2b05      	cmp	r3, #5
    5562:	d802      	bhi.n	556a <nrf52_errata_103+0x1a>
    5564:	4a02      	ldr	r2, [pc, #8]	; (5570 <nrf52_errata_103+0x20>)
    5566:	5cd0      	ldrb	r0, [r2, r3]
    5568:	4770      	bx	lr
                        return false;
    556a:	2000      	movs	r0, #0
}
    556c:	4770      	bx	lr
    556e:	bf00      	nop
    5570:	0000d40e 	.word	0x0000d40e

00005574 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5574:	4a02      	ldr	r2, [pc, #8]	; (5580 <nvmc_wait+0xc>)
    5576:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    557a:	2b00      	cmp	r3, #0
    557c:	d0fb      	beq.n	5576 <nvmc_wait+0x2>
}
    557e:	4770      	bx	lr
    5580:	4001e000 	.word	0x4001e000

00005584 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5584:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    558a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    558e:	2a08      	cmp	r2, #8
    5590:	d14e      	bne.n	5630 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    5592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5596:	2100      	movs	r1, #0
    5598:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    559c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    55a0:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    55a4:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    55a8:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    55ac:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    55b0:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    55b4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    55b8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    55bc:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    55c0:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    55c4:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    55c8:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    55cc:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    55d0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    55d4:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    55d8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    55dc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    55e0:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    55e4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    55e8:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    55ec:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    55f0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    55f4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    55f8:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    55fc:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5600:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    5604:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5608:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    560c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5610:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    5614:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5618:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    561c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5620:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    5624:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5628:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    562c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5630:	f7ff ff8e 	bl	5550 <nrf52_errata_103>
    5634:	b118      	cbz	r0, 563e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5636:	4b3b      	ldr	r3, [pc, #236]	; (5724 <SystemInit+0x1a0>)
    5638:	4a3b      	ldr	r2, [pc, #236]	; (5728 <SystemInit+0x1a4>)
    563a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    563e:	f7ff ff87 	bl	5550 <nrf52_errata_103>
    5642:	b118      	cbz	r0, 564c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5644:	4b39      	ldr	r3, [pc, #228]	; (572c <SystemInit+0x1a8>)
    5646:	22fb      	movs	r2, #251	; 0xfb
    5648:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    564c:	f7ff ff80 	bl	5550 <nrf52_errata_103>
    5650:	b170      	cbz	r0, 5670 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5652:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    565a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    565e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5662:	f022 020f 	bic.w	r2, r2, #15
    5666:	f003 030f 	and.w	r3, r3, #15
    566a:	4313      	orrs	r3, r2
    566c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5670:	f7ff ff6e 	bl	5550 <nrf52_errata_103>
    5674:	b120      	cbz	r0, 5680 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5676:	4b2e      	ldr	r3, [pc, #184]	; (5730 <SystemInit+0x1ac>)
    5678:	f44f 7200 	mov.w	r2, #512	; 0x200
    567c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5684:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5688:	2b08      	cmp	r3, #8
    568a:	d11a      	bne.n	56c2 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    568c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5690:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5694:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5696:	bf44      	itt	mi
    5698:	f06f 0201 	mvnmi.w	r2, #1
    569c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    56a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    56a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    56a8:	2b05      	cmp	r3, #5
    56aa:	d802      	bhi.n	56b2 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    56ac:	4a21      	ldr	r2, [pc, #132]	; (5734 <SystemInit+0x1b0>)
    56ae:	5cd3      	ldrb	r3, [r2, r3]
    56b0:	b13b      	cbz	r3, 56c2 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    56b2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    56b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    56ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56be:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    56c2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    56c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    56ca:	2a00      	cmp	r2, #0
    56cc:	db03      	blt.n	56d6 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    56ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    56d2:	2b00      	cmp	r3, #0
    56d4:	da22      	bge.n	571c <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    56d6:	4918      	ldr	r1, [pc, #96]	; (5738 <SystemInit+0x1b4>)
    56d8:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    56da:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    56de:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    56e2:	2412      	movs	r4, #18
    nvmc_wait();
    56e4:	f7ff ff46 	bl	5574 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    56e8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    56ec:	f7ff ff42 	bl	5574 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    56f0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    56f4:	f7ff ff3e 	bl	5574 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    56f8:	2300      	movs	r3, #0
    56fa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    56fe:	f7ff ff39 	bl	5574 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5702:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5706:	490d      	ldr	r1, [pc, #52]	; (573c <SystemInit+0x1b8>)
    5708:	4b0d      	ldr	r3, [pc, #52]	; (5740 <SystemInit+0x1bc>)
    570a:	68ca      	ldr	r2, [r1, #12]
    570c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5710:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5712:	60cb      	str	r3, [r1, #12]
    5714:	f3bf 8f4f 	dsb	sy
    __NOP();
    5718:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    571a:	e7fd      	b.n	5718 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    571c:	4b09      	ldr	r3, [pc, #36]	; (5744 <SystemInit+0x1c0>)
    571e:	4a0a      	ldr	r2, [pc, #40]	; (5748 <SystemInit+0x1c4>)
    5720:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5722:	bd10      	pop	{r4, pc}
    5724:	40005000 	.word	0x40005000
    5728:	00038148 	.word	0x00038148
    572c:	4000f000 	.word	0x4000f000
    5730:	40029000 	.word	0x40029000
    5734:	0000d408 	.word	0x0000d408
    5738:	4001e000 	.word	0x4001e000
    573c:	e000ed00 	.word	0xe000ed00
    5740:	05fa0004 	.word	0x05fa0004
    5744:	2000017c 	.word	0x2000017c
    5748:	03d09000 	.word	0x03d09000

0000574c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    574c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    574e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5750:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5752:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5756:	fab2 f382 	clz	r3, r2
    575a:	f1c3 031f 	rsb	r3, r3, #31
    575e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5760:	fa05 f403 	lsl.w	r4, r5, r3
    5764:	ea22 0404 	bic.w	r4, r2, r4
    5768:	e850 6f00 	ldrex	r6, [r0]
    576c:	4296      	cmp	r6, r2
    576e:	d104      	bne.n	577a <nrfx_flag32_alloc+0x2e>
    5770:	e840 4c00 	strex	ip, r4, [r0]
    5774:	f1bc 0f00 	cmp.w	ip, #0
    5778:	d1f6      	bne.n	5768 <nrfx_flag32_alloc+0x1c>
    577a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    577e:	d1e7      	bne.n	5750 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5780:	4801      	ldr	r0, [pc, #4]	; (5788 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5782:	700b      	strb	r3, [r1, #0]
}
    5784:	bd70      	pop	{r4, r5, r6, pc}
    5786:	bf00      	nop
    5788:	0bad0000 	.word	0x0bad0000

0000578c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    578c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    578e:	6803      	ldr	r3, [r0, #0]
    5790:	40cb      	lsrs	r3, r1
    5792:	07db      	lsls	r3, r3, #31
    5794:	d414      	bmi.n	57c0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5796:	2301      	movs	r3, #1
    5798:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    579a:	6802      	ldr	r2, [r0, #0]
    579c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    57a0:	ea43 0102 	orr.w	r1, r3, r2
    57a4:	e850 4f00 	ldrex	r4, [r0]
    57a8:	4294      	cmp	r4, r2
    57aa:	d104      	bne.n	57b6 <nrfx_flag32_free+0x2a>
    57ac:	e840 1c00 	strex	ip, r1, [r0]
    57b0:	f1bc 0f00 	cmp.w	ip, #0
    57b4:	d1f6      	bne.n	57a4 <nrfx_flag32_free+0x18>
    57b6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    57ba:	d1ee      	bne.n	579a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    57bc:	4801      	ldr	r0, [pc, #4]	; (57c4 <nrfx_flag32_free+0x38>)
}
    57be:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    57c0:	4801      	ldr	r0, [pc, #4]	; (57c8 <nrfx_flag32_free+0x3c>)
    57c2:	e7fc      	b.n	57be <nrfx_flag32_free+0x32>
    57c4:	0bad0000 	.word	0x0bad0000
    57c8:	0bad0004 	.word	0x0bad0004

000057cc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    57cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    57ce:	4604      	mov	r4, r0
    57d0:	b118      	cbz	r0, 57da <clock_stop+0xe>
    57d2:	2801      	cmp	r0, #1
    57d4:	d022      	beq.n	581c <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    57d6:	b003      	add	sp, #12
    57d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    57da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57de:	2202      	movs	r2, #2
    57e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57e4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    57e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57ec:	2201      	movs	r2, #1
    57ee:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    57f0:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    57f2:	2301      	movs	r3, #1
    57f4:	f88d 3007 	strb.w	r3, [sp, #7]
    57f8:	f242 7510 	movw	r5, #10000	; 0x2710
    57fc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    5800:	b1cc      	cbz	r4, 5836 <clock_stop+0x6a>
    5802:	2c01      	cmp	r4, #1
    5804:	d1e7      	bne.n	57d6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    5806:	b3c7      	cbz	r7, 587a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5808:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    580c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5810:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5812:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5816:	03da      	lsls	r2, r3, #15
    5818:	d521      	bpl.n	585e <clock_stop+0x92>
    581a:	e016      	b.n	584a <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    581c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5820:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5822:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5826:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    582a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    582e:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5830:	f10d 0707 	add.w	r7, sp, #7
    5834:	e7dd      	b.n	57f2 <clock_stop+0x26>
            if (p_clk_src != NULL)
    5836:	b1b7      	cbz	r7, 5866 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5838:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    583c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5840:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5842:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5846:	03d8      	lsls	r0, r3, #15
    5848:	d5c5      	bpl.n	57d6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    584a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    584e:	2801      	cmp	r0, #1
    5850:	d103      	bne.n	585a <clock_stop+0x8e>
    5852:	f004 fd20 	bl	a296 <nrfx_busy_wait>
    5856:	3d01      	subs	r5, #1
    5858:	d1d2      	bne.n	5800 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    585a:	2c01      	cmp	r4, #1
    585c:	d1bb      	bne.n	57d6 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    585e:	4b0c      	ldr	r3, [pc, #48]	; (5890 <clock_stop+0xc4>)
    5860:	2200      	movs	r2, #0
    5862:	715a      	strb	r2, [r3, #5]
    5864:	e7b7      	b.n	57d6 <clock_stop+0xa>
    5866:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    586a:	03d9      	lsls	r1, r3, #15
    586c:	d5b3      	bpl.n	57d6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    586e:	2001      	movs	r0, #1
    5870:	f004 fd11 	bl	a296 <nrfx_busy_wait>
    5874:	3d01      	subs	r5, #1
    5876:	d1f6      	bne.n	5866 <clock_stop+0x9a>
    5878:	e7ad      	b.n	57d6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    587a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    587e:	03db      	lsls	r3, r3, #15
    5880:	d5ed      	bpl.n	585e <clock_stop+0x92>
    5882:	2001      	movs	r0, #1
    5884:	f004 fd07 	bl	a296 <nrfx_busy_wait>
    5888:	3d01      	subs	r5, #1
    588a:	d1f6      	bne.n	587a <clock_stop+0xae>
    588c:	e7e7      	b.n	585e <clock_stop+0x92>
    588e:	bf00      	nop
    5890:	20001574 	.word	0x20001574

00005894 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5894:	4b04      	ldr	r3, [pc, #16]	; (58a8 <nrfx_clock_init+0x14>)
    5896:	791a      	ldrb	r2, [r3, #4]
    5898:	b922      	cbnz	r2, 58a4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    589a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    589c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    589e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    58a0:	4802      	ldr	r0, [pc, #8]	; (58ac <nrfx_clock_init+0x18>)
    58a2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    58a4:	4802      	ldr	r0, [pc, #8]	; (58b0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    58a6:	4770      	bx	lr
    58a8:	20001574 	.word	0x20001574
    58ac:	0bad0000 	.word	0x0bad0000
    58b0:	0bad000c 	.word	0x0bad000c

000058b4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    58b4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    58b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58ba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    58be:	b16a      	cbz	r2, 58dc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58c0:	2200      	movs	r2, #0
    58c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    58c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    58ca:	2201      	movs	r2, #1
    58cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    58d0:	4b11      	ldr	r3, [pc, #68]	; (5918 <nrfx_power_clock_irq_handler+0x64>)
    58d2:	7958      	ldrb	r0, [r3, #5]
    58d4:	b910      	cbnz	r0, 58dc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    58d6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    58dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    58e4:	b172      	cbz	r2, 5904 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58e6:	2200      	movs	r2, #0
    58e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    58ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    58f0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    58f4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    58f8:	0792      	lsls	r2, r2, #30
    58fa:	d104      	bne.n	5906 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    58fc:	2201      	movs	r2, #1
    58fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5902:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5904:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    5906:	2202      	movs	r2, #2
    5908:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    590c:	4b02      	ldr	r3, [pc, #8]	; (5918 <nrfx_power_clock_irq_handler+0x64>)
}
    590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5912:	681b      	ldr	r3, [r3, #0]
    5914:	2001      	movs	r0, #1
    5916:	4718      	bx	r3
    5918:	20001574 	.word	0x20001574

0000591c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    591c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    591e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5922:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    5924:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    5926:	6002      	str	r2, [r0, #0]
}
    5928:	4802      	ldr	r0, [pc, #8]	; (5934 <nrf_gpio_pin_port_decode+0x18>)
    592a:	bf18      	it	ne
    592c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    5930:	4770      	bx	lr
    5932:	bf00      	nop
    5934:	50000300 	.word	0x50000300

00005938 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5938:	4b03      	ldr	r3, [pc, #12]	; (5948 <pin_in_use_by_te+0x10>)
    593a:	3008      	adds	r0, #8
    593c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5940:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5944:	4770      	bx	lr
    5946:	bf00      	nop
    5948:	20000180 	.word	0x20000180

0000594c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    594c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    594e:	f100 0308 	add.w	r3, r0, #8
    5952:	4c0c      	ldr	r4, [pc, #48]	; (5984 <call_handler+0x38>)
    5954:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5958:	05da      	lsls	r2, r3, #23
{
    595a:	4605      	mov	r5, r0
    595c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    595e:	d507      	bpl.n	5970 <call_handler+0x24>
    5960:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5964:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5968:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    596c:	6852      	ldr	r2, [r2, #4]
    596e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5970:	68a3      	ldr	r3, [r4, #8]
    5972:	b12b      	cbz	r3, 5980 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5974:	68e2      	ldr	r2, [r4, #12]
    5976:	4631      	mov	r1, r6
    5978:	4628      	mov	r0, r5
    }
}
    597a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    597e:	4718      	bx	r3
}
    5980:	bd70      	pop	{r4, r5, r6, pc}
    5982:	bf00      	nop
    5984:	20000180 	.word	0x20000180

00005988 <release_handler>:
{
    5988:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    598a:	4a12      	ldr	r2, [pc, #72]	; (59d4 <release_handler+0x4c>)
    598c:	3008      	adds	r0, #8
    598e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    5992:	05d9      	lsls	r1, r3, #23
    5994:	d51b      	bpl.n	59ce <release_handler+0x46>
    5996:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    599a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    599e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    59a2:	f102 040e 	add.w	r4, r2, #14
    59a6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    59a8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    59ac:	f413 7f80 	tst.w	r3, #256	; 0x100
    59b0:	d003      	beq.n	59ba <release_handler+0x32>
    59b2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    59b6:	4299      	cmp	r1, r3
    59b8:	d009      	beq.n	59ce <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    59ba:	3001      	adds	r0, #1
    59bc:	2830      	cmp	r0, #48	; 0x30
    59be:	d1f3      	bne.n	59a8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    59c0:	2300      	movs	r3, #0
    59c2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    59c6:	4804      	ldr	r0, [pc, #16]	; (59d8 <release_handler+0x50>)
}
    59c8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    59ca:	f7ff bedf 	b.w	578c <nrfx_flag32_free>
}
    59ce:	bc10      	pop	{r4}
    59d0:	4770      	bx	lr
    59d2:	bf00      	nop
    59d4:	20000180 	.word	0x20000180
    59d8:	200001f4 	.word	0x200001f4

000059dc <pin_handler_trigger_uninit>:
{
    59dc:	b538      	push	{r3, r4, r5, lr}
    59de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    59e0:	f7ff ffaa 	bl	5938 <pin_in_use_by_te>
    59e4:	4c09      	ldr	r4, [pc, #36]	; (5a0c <pin_handler_trigger_uninit+0x30>)
    59e6:	f102 0508 	add.w	r5, r2, #8
    59ea:	b140      	cbz	r0, 59fe <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    59ec:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    59f0:	4907      	ldr	r1, [pc, #28]	; (5a10 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    59f2:	0b5b      	lsrs	r3, r3, #13
    59f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    59f8:	2000      	movs	r0, #0
    59fa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    59fe:	4610      	mov	r0, r2
    5a00:	f7ff ffc2 	bl	5988 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5a04:	2300      	movs	r3, #0
    5a06:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5a0a:	bd38      	pop	{r3, r4, r5, pc}
    5a0c:	20000180 	.word	0x20000180
    5a10:	40006000 	.word	0x40006000

00005a14 <nrfx_gpiote_input_configure>:
{
    5a14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5a18:	4604      	mov	r4, r0
    5a1a:	4616      	mov	r6, r2
    5a1c:	461d      	mov	r5, r3
    if (p_input_config)
    5a1e:	b301      	cbz	r1, 5a62 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a20:	4f4e      	ldr	r7, [pc, #312]	; (5b5c <nrfx_gpiote_input_configure+0x148>)
    5a22:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5a26:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5a2a:	079b      	lsls	r3, r3, #30
    5a2c:	d502      	bpl.n	5a34 <nrfx_gpiote_input_configure+0x20>
    5a2e:	f7ff ff83 	bl	5938 <pin_in_use_by_te>
    5a32:	bb10      	cbnz	r0, 5a7a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a34:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a36:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a3a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5a3e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a42:	f10d 020f 	add.w	r2, sp, #15
    5a46:	460b      	mov	r3, r1
    5a48:	4620      	mov	r0, r4
    5a4a:	f10d 010e 	add.w	r1, sp, #14
    5a4e:	f004 fc6f 	bl	a330 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5a52:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5a56:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5a5a:	f043 0301 	orr.w	r3, r3, #1
    5a5e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    5a62:	b346      	cbz	r6, 5ab6 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a64:	4b3d      	ldr	r3, [pc, #244]	; (5b5c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5a66:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5a6a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a6c:	f104 0708 	add.w	r7, r4, #8
    5a70:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    5a74:	0788      	lsls	r0, r1, #30
    5a76:	d502      	bpl.n	5a7e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    5a78:	b1aa      	cbz	r2, 5aa6 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    5a7a:	4839      	ldr	r0, [pc, #228]	; (5b60 <nrfx_gpiote_input_configure+0x14c>)
    5a7c:	e01d      	b.n	5aba <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5a7e:	f021 0120 	bic.w	r1, r1, #32
    5a82:	04c9      	lsls	r1, r1, #19
    5a84:	0cc9      	lsrs	r1, r1, #19
    5a86:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    5a8a:	b162      	cbz	r2, 5aa6 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    5a8c:	f1bc 0f03 	cmp.w	ip, #3
    5a90:	d8f3      	bhi.n	5a7a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5a92:	6872      	ldr	r2, [r6, #4]
    5a94:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5a96:	f1bc 0f00 	cmp.w	ip, #0
    5a9a:	d111      	bne.n	5ac0 <nrfx_gpiote_input_configure+0xac>
    5a9c:	4a31      	ldr	r2, [pc, #196]	; (5b64 <nrfx_gpiote_input_configure+0x150>)
    5a9e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    5aa2:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5aa6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    5aaa:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5aae:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    5ab2:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    5ab6:	bb45      	cbnz	r5, 5b0a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    5ab8:	482b      	ldr	r0, [pc, #172]	; (5b68 <nrfx_gpiote_input_configure+0x154>)
}
    5aba:	b004      	add	sp, #16
    5abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5ac0:	00b2      	lsls	r2, r6, #2
    5ac2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5ac6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5aca:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    5ace:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5ad2:	f020 0003 	bic.w	r0, r0, #3
    5ad6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5ada:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5ade:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5ae2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5ae6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5aea:	0220      	lsls	r0, r4, #8
    5aec:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5af0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    5af8:	ea40 000e 	orr.w	r0, r0, lr
    5afc:	f041 0120 	orr.w	r1, r1, #32
    5b00:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    5b04:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5b08:	e7cd      	b.n	5aa6 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5b0a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5b0e:	4620      	mov	r0, r4
    5b10:	f7ff ff3a 	bl	5988 <release_handler>
    if (!handler)
    5b14:	2e00      	cmp	r6, #0
    5b16:	d0cf      	beq.n	5ab8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b18:	4d10      	ldr	r5, [pc, #64]	; (5b5c <nrfx_gpiote_input_configure+0x148>)
    5b1a:	e9d5 2300 	ldrd	r2, r3, [r5]
    5b1e:	4296      	cmp	r6, r2
    5b20:	d101      	bne.n	5b26 <nrfx_gpiote_input_configure+0x112>
    5b22:	429f      	cmp	r7, r3
    5b24:	d018      	beq.n	5b58 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b26:	4811      	ldr	r0, [pc, #68]	; (5b6c <nrfx_gpiote_input_configure+0x158>)
    5b28:	f10d 010f 	add.w	r1, sp, #15
    5b2c:	f7ff fe0e 	bl	574c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b30:	4b0d      	ldr	r3, [pc, #52]	; (5b68 <nrfx_gpiote_input_configure+0x154>)
    5b32:	4298      	cmp	r0, r3
    5b34:	d1c1      	bne.n	5aba <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    5b36:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5b3a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5b3e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b42:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5b44:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b46:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5b4a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5b52:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5b56:	e7af      	b.n	5ab8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b58:	2200      	movs	r2, #0
    5b5a:	e7ee      	b.n	5b3a <nrfx_gpiote_input_configure+0x126>
    5b5c:	20000180 	.word	0x20000180
    5b60:	0bad0004 	.word	0x0bad0004
    5b64:	40006000 	.word	0x40006000
    5b68:	0bad0000 	.word	0x0bad0000
    5b6c:	200001f4 	.word	0x200001f4

00005b70 <nrfx_gpiote_output_configure>:
{
    5b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b72:	4604      	mov	r4, r0
    5b74:	b085      	sub	sp, #20
    5b76:	4615      	mov	r5, r2
    if (p_config)
    5b78:	b319      	cbz	r1, 5bc2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5b7a:	4e33      	ldr	r6, [pc, #204]	; (5c48 <nrfx_gpiote_output_configure+0xd8>)
    5b7c:	f100 0708 	add.w	r7, r0, #8
    5b80:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5b84:	0793      	lsls	r3, r2, #30
    5b86:	d403      	bmi.n	5b90 <nrfx_gpiote_output_configure+0x20>
    5b88:	f7ff fed6 	bl	5938 <pin_in_use_by_te>
    5b8c:	2800      	cmp	r0, #0
    5b8e:	d158      	bne.n	5c42 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5b90:	f012 0f1c 	tst.w	r2, #28
    5b94:	d002      	beq.n	5b9c <nrfx_gpiote_output_configure+0x2c>
    5b96:	784b      	ldrb	r3, [r1, #1]
    5b98:	2b01      	cmp	r3, #1
    5b9a:	d052      	beq.n	5c42 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5b9c:	2301      	movs	r3, #1
    5b9e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5ba2:	2300      	movs	r3, #0
    5ba4:	e9cd 1300 	strd	r1, r3, [sp]
    5ba8:	1c4a      	adds	r2, r1, #1
    5baa:	1c8b      	adds	r3, r1, #2
    5bac:	4620      	mov	r0, r4
    5bae:	f10d 010f 	add.w	r1, sp, #15
    5bb2:	f004 fbbd 	bl	a330 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5bb6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5bba:	f043 0303 	orr.w	r3, r3, #3
    5bbe:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5bc2:	b915      	cbnz	r5, 5bca <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    5bc4:	4821      	ldr	r0, [pc, #132]	; (5c4c <nrfx_gpiote_output_configure+0xdc>)
}
    5bc6:	b005      	add	sp, #20
    5bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5bca:	4e1f      	ldr	r6, [pc, #124]	; (5c48 <nrfx_gpiote_output_configure+0xd8>)
    5bcc:	f104 0708 	add.w	r7, r4, #8
    5bd0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5bd4:	0783      	lsls	r3, r0, #30
    5bd6:	d534      	bpl.n	5c42 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    5bd8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5bdc:	4661      	mov	r1, ip
    5bde:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5be0:	f020 0020 	bic.w	r0, r0, #32
    5be4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5be8:	04c0      	lsls	r0, r0, #19
    5bea:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5bee:	0cc0      	lsrs	r0, r0, #19
    5bf0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5bf4:	2300      	movs	r3, #0
    5bf6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5bfa:	786a      	ldrb	r2, [r5, #1]
    5bfc:	2a00      	cmp	r2, #0
    5bfe:	d0e1      	beq.n	5bc4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5c00:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    5c04:	78ad      	ldrb	r5, [r5, #2]
    5c06:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5c0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5c0e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c12:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5c16:	0223      	lsls	r3, r4, #8
    5c18:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5c1c:	0412      	lsls	r2, r2, #16
    5c1e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c22:	ea43 030e 	orr.w	r3, r3, lr
    5c26:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c28:	052a      	lsls	r2, r5, #20
    5c2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c2e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c32:	4313      	orrs	r3, r2
    5c34:	f040 0020 	orr.w	r0, r0, #32
    5c38:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5c3c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5c40:	e7c0      	b.n	5bc4 <nrfx_gpiote_output_configure+0x54>
{
    5c42:	4803      	ldr	r0, [pc, #12]	; (5c50 <nrfx_gpiote_output_configure+0xe0>)
    5c44:	e7bf      	b.n	5bc6 <nrfx_gpiote_output_configure+0x56>
    5c46:	bf00      	nop
    5c48:	20000180 	.word	0x20000180
    5c4c:	0bad0000 	.word	0x0bad0000
    5c50:	0bad0004 	.word	0x0bad0004

00005c54 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5c54:	4b01      	ldr	r3, [pc, #4]	; (5c5c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5c56:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5c5a:	4770      	bx	lr
    5c5c:	20000180 	.word	0x20000180

00005c60 <nrfx_gpiote_channel_get>:
{
    5c60:	b508      	push	{r3, lr}
    5c62:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5c64:	f7ff fe68 	bl	5938 <pin_in_use_by_te>
    5c68:	b138      	cbz	r0, 5c7a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5c6a:	4b05      	ldr	r3, [pc, #20]	; (5c80 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5c6c:	4805      	ldr	r0, [pc, #20]	; (5c84 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5c6e:	3208      	adds	r2, #8
    5c70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5c74:	0b5b      	lsrs	r3, r3, #13
    5c76:	700b      	strb	r3, [r1, #0]
}
    5c78:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5c7a:	4803      	ldr	r0, [pc, #12]	; (5c88 <nrfx_gpiote_channel_get+0x28>)
    5c7c:	e7fc      	b.n	5c78 <nrfx_gpiote_channel_get+0x18>
    5c7e:	bf00      	nop
    5c80:	20000180 	.word	0x20000180
    5c84:	0bad0000 	.word	0x0bad0000
    5c88:	0bad0004 	.word	0x0bad0004

00005c8c <nrfx_gpiote_init>:
{
    5c8c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5c8e:	4c0f      	ldr	r4, [pc, #60]	; (5ccc <nrfx_gpiote_init+0x40>)
    5c90:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5c94:	b9bd      	cbnz	r5, 5cc6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5c96:	2260      	movs	r2, #96	; 0x60
    5c98:	4629      	mov	r1, r5
    5c9a:	f104 0010 	add.w	r0, r4, #16
    5c9e:	f004 ff55 	bl	ab4c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5ca2:	2006      	movs	r0, #6
    5ca4:	f7fd ff8e 	bl	3bc4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ca8:	4b09      	ldr	r3, [pc, #36]	; (5cd0 <nrfx_gpiote_init+0x44>)
    return err_code;
    5caa:	480a      	ldr	r0, [pc, #40]	; (5cd4 <nrfx_gpiote_init+0x48>)
    5cac:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5cb0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5cb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5cb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5cbc:	2301      	movs	r3, #1
    5cbe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5cc2:	6763      	str	r3, [r4, #116]	; 0x74
}
    5cc4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5cc6:	4804      	ldr	r0, [pc, #16]	; (5cd8 <nrfx_gpiote_init+0x4c>)
    5cc8:	e7fc      	b.n	5cc4 <nrfx_gpiote_init+0x38>
    5cca:	bf00      	nop
    5ccc:	20000180 	.word	0x20000180
    5cd0:	40006000 	.word	0x40006000
    5cd4:	0bad0000 	.word	0x0bad0000
    5cd8:	0bad0005 	.word	0x0bad0005

00005cdc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5cdc:	4b03      	ldr	r3, [pc, #12]	; (5cec <nrfx_gpiote_is_init+0x10>)
    5cde:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5ce2:	3800      	subs	r0, #0
    5ce4:	bf18      	it	ne
    5ce6:	2001      	movne	r0, #1
    5ce8:	4770      	bx	lr
    5cea:	bf00      	nop
    5cec:	20000180 	.word	0x20000180

00005cf0 <nrfx_gpiote_channel_free>:
{
    5cf0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5cf2:	4801      	ldr	r0, [pc, #4]	; (5cf8 <nrfx_gpiote_channel_free+0x8>)
    5cf4:	f7ff bd4a 	b.w	578c <nrfx_flag32_free>
    5cf8:	200001f0 	.word	0x200001f0

00005cfc <nrfx_gpiote_channel_alloc>:
{
    5cfc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5cfe:	4801      	ldr	r0, [pc, #4]	; (5d04 <nrfx_gpiote_channel_alloc+0x8>)
    5d00:	f7ff bd24 	b.w	574c <nrfx_flag32_alloc>
    5d04:	200001f0 	.word	0x200001f0

00005d08 <nrfx_gpiote_trigger_enable>:
{
    5d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d0a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d0c:	f7ff fe14 	bl	5938 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d10:	f104 0208 	add.w	r2, r4, #8
    5d14:	4b1e      	ldr	r3, [pc, #120]	; (5d90 <nrfx_gpiote_trigger_enable+0x88>)
    5d16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d1a:	b1e8      	cbz	r0, 5d58 <nrfx_gpiote_trigger_enable+0x50>
    5d1c:	f013 0502 	ands.w	r5, r3, #2
    5d20:	d11a      	bne.n	5d58 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d22:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5d24:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    5d26:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    5d2a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    5d2e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5d32:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d36:	6005      	str	r5, [r0, #0]
    5d38:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5d3a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5d3e:	f040 0001 	orr.w	r0, r0, #1
    5d42:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5d46:	b129      	cbz	r1, 5d54 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5d48:	2201      	movs	r2, #1
    5d4a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    5d4e:	4a11      	ldr	r2, [pc, #68]	; (5d94 <nrfx_gpiote_trigger_enable+0x8c>)
    5d50:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5d54:	b003      	add	sp, #12
    5d56:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5d58:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5d5c:	2b04      	cmp	r3, #4
    5d5e:	d012      	beq.n	5d86 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5d60:	2b05      	cmp	r3, #5
    5d62:	d012      	beq.n	5d8a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5d64:	a801      	add	r0, sp, #4
    5d66:	9401      	str	r4, [sp, #4]
    5d68:	f7ff fdd8 	bl	591c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5d6c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5d6e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5d72:	40d9      	lsrs	r1, r3
    5d74:	f001 0101 	and.w	r1, r1, #1
    5d78:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5d7a:	4620      	mov	r0, r4
}
    5d7c:	b003      	add	sp, #12
    5d7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5d82:	f004 bb1e 	b.w	a3c2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5d86:	2103      	movs	r1, #3
    5d88:	e7f7      	b.n	5d7a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5d8a:	2102      	movs	r1, #2
    5d8c:	e7f5      	b.n	5d7a <nrfx_gpiote_trigger_enable+0x72>
    5d8e:	bf00      	nop
    5d90:	20000180 	.word	0x20000180
    5d94:	40006000 	.word	0x40006000

00005d98 <nrfx_gpiote_trigger_disable>:
{
    5d98:	b508      	push	{r3, lr}
    5d9a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d9c:	f7ff fdcc 	bl	5938 <pin_in_use_by_te>
    5da0:	b1c0      	cbz	r0, 5dd4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5da2:	f102 0108 	add.w	r1, r2, #8
    5da6:	4b0e      	ldr	r3, [pc, #56]	; (5de0 <nrfx_gpiote_trigger_disable+0x48>)
    5da8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5dac:	0799      	lsls	r1, r3, #30
    5dae:	d411      	bmi.n	5dd4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5db0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5db2:	2201      	movs	r2, #1
    5db4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5db6:	009b      	lsls	r3, r3, #2
    5db8:	490a      	ldr	r1, [pc, #40]	; (5de4 <nrfx_gpiote_trigger_disable+0x4c>)
    5dba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5dbe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5dc2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5dc6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5dca:	f022 0203 	bic.w	r2, r2, #3
    5dce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5dd2:	bd08      	pop	{r3, pc}
    5dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5dd8:	2100      	movs	r1, #0
    5dda:	4610      	mov	r0, r2
    5ddc:	f004 baf1 	b.w	a3c2 <nrf_gpio_cfg_sense_set>
    5de0:	20000180 	.word	0x20000180
    5de4:	40006000 	.word	0x40006000

00005de8 <nrfx_gpiote_pin_uninit>:
{
    5de8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5dea:	4b0e      	ldr	r3, [pc, #56]	; (5e24 <nrfx_gpiote_pin_uninit+0x3c>)
    5dec:	f100 0208 	add.w	r2, r0, #8
{
    5df0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5df2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5df6:	07db      	lsls	r3, r3, #31
    5df8:	d511      	bpl.n	5e1e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5dfa:	f7ff ffcd 	bl	5d98 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5dfe:	4620      	mov	r0, r4
    5e00:	f7ff fdec 	bl	59dc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e04:	a801      	add	r0, sp, #4
    5e06:	9401      	str	r4, [sp, #4]
    5e08:	f7ff fd88 	bl	591c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5e0c:	9b01      	ldr	r3, [sp, #4]
    5e0e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5e12:	2202      	movs	r2, #2
    5e14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5e18:	4803      	ldr	r0, [pc, #12]	; (5e28 <nrfx_gpiote_pin_uninit+0x40>)
}
    5e1a:	b002      	add	sp, #8
    5e1c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5e1e:	4803      	ldr	r0, [pc, #12]	; (5e2c <nrfx_gpiote_pin_uninit+0x44>)
    5e20:	e7fb      	b.n	5e1a <nrfx_gpiote_pin_uninit+0x32>
    5e22:	bf00      	nop
    5e24:	20000180 	.word	0x20000180
    5e28:	0bad0000 	.word	0x0bad0000
    5e2c:	0bad0004 	.word	0x0bad0004

00005e30 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e34:	4b68      	ldr	r3, [pc, #416]	; (5fd8 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    5e36:	4869      	ldr	r0, [pc, #420]	; (5fdc <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5e38:	4969      	ldr	r1, [pc, #420]	; (5fe0 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    5e3a:	2600      	movs	r6, #0
{
    5e3c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5e3e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5e40:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e42:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5e44:	b135      	cbz	r5, 5e54 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5e46:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5e4a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5e4c:	bf1e      	ittt	ne
    5e4e:	601c      	strne	r4, [r3, #0]
    5e50:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5e52:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5e54:	3304      	adds	r3, #4
    5e56:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5e58:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5e5c:	d1f1      	bne.n	5e42 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e5e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 5fdc <nrfx_gpiote_irq_handler+0x1ac>
    5e62:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5e66:	2b00      	cmp	r3, #0
    5e68:	f000 8099 	beq.w	5f9e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    5e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5e70:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5e74:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5e76:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5e7a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    5e7e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5e80:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5e84:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    5e88:	f10d 0a10 	add.w	sl, sp, #16
    5e8c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    5e90:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5e92:	f04f 0b01 	mov.w	fp, #1
    5e96:	e049      	b.n	5f2c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5e98:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5e9a:	4a52      	ldr	r2, [pc, #328]	; (5fe4 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5e9c:	fa94 f4a4 	rbit	r4, r4
    5ea0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5ea4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5ea6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5ea8:	f104 0308 	add.w	r3, r4, #8
    5eac:	9403      	str	r4, [sp, #12]
    5eae:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5eb2:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    5eb6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5eba:	fa0b f202 	lsl.w	r2, fp, r2
    5ebe:	ea23 0302 	bic.w	r3, r3, r2
    5ec2:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ec6:	a803      	add	r0, sp, #12
    5ec8:	f7ff fd28 	bl	591c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ecc:	9b03      	ldr	r3, [sp, #12]
    5ece:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5ed2:	08b9      	lsrs	r1, r7, #2
    5ed4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5ed8:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    5edc:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5ede:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5ee0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    5ee4:	d52c      	bpl.n	5f40 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    5ee6:	4620      	mov	r0, r4
    5ee8:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5eea:	b2dd      	uxtb	r5, r3
    5eec:	f7ff fd2e 	bl	594c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ef0:	a803      	add	r0, sp, #12
    5ef2:	9403      	str	r4, [sp, #12]
    5ef4:	f7ff fd12 	bl	591c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ef8:	9b03      	ldr	r3, [sp, #12]
    5efa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5efe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5f02:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5f06:	429d      	cmp	r5, r3
    5f08:	d107      	bne.n	5f1a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5f0a:	2100      	movs	r1, #0
    5f0c:	4620      	mov	r0, r4
    5f0e:	f004 fa58 	bl	a3c2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5f12:	4629      	mov	r1, r5
    5f14:	4620      	mov	r0, r4
    5f16:	f004 fa54 	bl	a3c2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f1a:	a803      	add	r0, sp, #12
    5f1c:	9403      	str	r4, [sp, #12]
    5f1e:	f7ff fcfd 	bl	591c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5f22:	9b03      	ldr	r3, [sp, #12]
    5f24:	fa0b f303 	lsl.w	r3, fp, r3
    5f28:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5f2c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    5f30:	2c00      	cmp	r4, #0
    5f32:	d1b1      	bne.n	5e98 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5f34:	f1b8 0f00 	cmp.w	r8, #0
    5f38:	d11d      	bne.n	5f76 <nrfx_gpiote_irq_handler+0x146>
    5f3a:	f04f 0801 	mov.w	r8, #1
    5f3e:	e7a5      	b.n	5e8c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5f40:	2b02      	cmp	r3, #2
    5f42:	d10c      	bne.n	5f5e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5f44:	2103      	movs	r1, #3
    5f46:	4620      	mov	r0, r4
    5f48:	f004 fa3b 	bl	a3c2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f4c:	f005 0305 	and.w	r3, r5, #5
    5f50:	2b01      	cmp	r3, #1
    5f52:	d1e2      	bne.n	5f1a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5f54:	4639      	mov	r1, r7
    5f56:	4620      	mov	r0, r4
    5f58:	f7ff fcf8 	bl	594c <call_handler>
    5f5c:	e7dd      	b.n	5f1a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5f5e:	2102      	movs	r1, #2
    5f60:	4620      	mov	r0, r4
    5f62:	9301      	str	r3, [sp, #4]
    5f64:	f004 fa2d 	bl	a3c2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f68:	2d03      	cmp	r5, #3
    5f6a:	d0f3      	beq.n	5f54 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f6c:	9b01      	ldr	r3, [sp, #4]
    5f6e:	2b03      	cmp	r3, #3
    5f70:	d1d3      	bne.n	5f1a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5f72:	2d02      	cmp	r5, #2
    5f74:	e7ed      	b.n	5f52 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    5f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5f7a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    5f7e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    5f82:	4919      	ldr	r1, [pc, #100]	; (5fe8 <nrfx_gpiote_irq_handler+0x1b8>)
    5f84:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5f88:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5f8a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5f8e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5f92:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5f94:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5f96:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    5f9a:	f47f af73 	bne.w	5e84 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    5f9e:	2401      	movs	r4, #1
    while (mask)
    5fa0:	b916      	cbnz	r6, 5fa8 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5fa2:	b007      	add	sp, #28
    5fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5fa8:	fa96 f3a6 	rbit	r3, r6
    5fac:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5fb0:	fa04 f203 	lsl.w	r2, r4, r3
    5fb4:	009b      	lsls	r3, r3, #2
    5fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5fba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5fbe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5fc2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5fc6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5fca:	f3c0 2005 	ubfx	r0, r0, #8, #6
    5fce:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5fd2:	f7ff fcbb 	bl	594c <call_handler>
    5fd6:	e7e3      	b.n	5fa0 <nrfx_gpiote_irq_handler+0x170>
    5fd8:	40006100 	.word	0x40006100
    5fdc:	40006000 	.word	0x40006000
    5fe0:	40006120 	.word	0x40006120
    5fe4:	20000180 	.word	0x20000180
    5fe8:	50000300 	.word	0x50000300

00005fec <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5fec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5fee:	4801      	ldr	r0, [pc, #4]	; (5ff4 <nrfx_ppi_channel_alloc+0x8>)
    5ff0:	f7ff bbac 	b.w	574c <nrfx_flag32_alloc>
    5ff4:	200001fc 	.word	0x200001fc

00005ff8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5ff8:	4b14      	ldr	r3, [pc, #80]	; (604c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5ffa:	4915      	ldr	r1, [pc, #84]	; (6050 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5ffc:	2203      	movs	r2, #3
    5ffe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6000:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6002:	4a14      	ldr	r2, [pc, #80]	; (6054 <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
    6004:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6006:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6008:	f44f 6280 	mov.w	r2, #1024	; 0x400
    600c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    600e:	2200      	movs	r2, #0
    6010:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6012:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6014:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6016:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6018:	490f      	ldr	r1, [pc, #60]	; (6058 <_DoInit+0x60>)
    601a:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    601c:	2110      	movs	r1, #16
    601e:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6020:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6022:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6024:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6026:	4a0d      	ldr	r2, [pc, #52]	; (605c <_DoInit+0x64>)
    6028:	6812      	ldr	r2, [r2, #0]
    602a:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    602e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    6032:	4a0b      	ldr	r2, [pc, #44]	; (6060 <_DoInit+0x68>)
    6034:	6810      	ldr	r0, [r2, #0]
    6036:	8892      	ldrh	r2, [r2, #4]
    6038:	6018      	str	r0, [r3, #0]
    603a:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    603c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    6040:	2220      	movs	r2, #32
    6042:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    6044:	f3bf 8f5f 	dmb	sy
}
    6048:	4770      	bx	lr
    604a:	bf00      	nop
    604c:	2000157c 	.word	0x2000157c
    6050:	0000d434 	.word	0x0000d434
    6054:	200018e3 	.word	0x200018e3
    6058:	200018d3 	.word	0x200018d3
    605c:	0000d43d 	.word	0x0000d43d
    6060:	0000d441 	.word	0x0000d441

00006064 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    6064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    6068:	f8df b048 	ldr.w	fp, [pc, #72]	; 60b4 <device_visitor+0x50>
    606c:	4d12      	ldr	r5, [pc, #72]	; (60b8 <device_visitor+0x54>)
    606e:	469a      	mov	sl, r3
    6070:	eba5 050b 	sub.w	r5, r5, fp
    6074:	4b11      	ldr	r3, [pc, #68]	; (60bc <device_visitor+0x58>)
    6076:	10ed      	asrs	r5, r5, #3
    6078:	4680      	mov	r8, r0
    607a:	460f      	mov	r7, r1
    607c:	4691      	mov	r9, r2
    607e:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    6080:	2600      	movs	r6, #0
    6082:	42be      	cmp	r6, r7
    6084:	d102      	bne.n	608c <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    6086:	4630      	mov	r0, r6
}
    6088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    608c:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    6090:	2c00      	cmp	r4, #0
    6092:	dd0d      	ble.n	60b0 <device_visitor+0x4c>
    6094:	42a5      	cmp	r5, r4
    6096:	d30b      	bcc.n	60b0 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    6098:	3c01      	subs	r4, #1
    609a:	b224      	sxth	r4, r4
    609c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    60a0:	eb0b 00c4 	add.w	r0, fp, r4, lsl #3
		int rc = visitor_cb(rdev, context);
    60a4:	4651      	mov	r1, sl
    60a6:	47c8      	blx	r9
		if (rc < 0) {
    60a8:	2800      	cmp	r0, #0
    60aa:	dbed      	blt.n	6088 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    60ac:	3601      	adds	r6, #1
    60ae:	e7e8      	b.n	6082 <device_visitor+0x1e>
	const struct device *dev = NULL;
    60b0:	2000      	movs	r0, #0
    60b2:	e7f7      	b.n	60a4 <device_visitor+0x40>
    60b4:	0000b12c 	.word	0x0000b12c
    60b8:	0000b1a4 	.word	0x0000b1a4
    60bc:	aaaaaaab 	.word	0xaaaaaaab

000060c0 <z_device_get_all_static>:
	*devices = __device_start;
    60c0:	4a03      	ldr	r2, [pc, #12]	; (60d0 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    60c2:	4b04      	ldr	r3, [pc, #16]	; (60d4 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    60c4:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    60c6:	1a9b      	subs	r3, r3, r2
}
    60c8:	4803      	ldr	r0, [pc, #12]	; (60d8 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    60ca:	10db      	asrs	r3, r3, #3
}
    60cc:	4358      	muls	r0, r3
    60ce:	4770      	bx	lr
    60d0:	0000b12c 	.word	0x0000b12c
    60d4:	0000b1a4 	.word	0x0000b1a4
    60d8:	aaaaaaab 	.word	0xaaaaaaab

000060dc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    60dc:	4b01      	ldr	r3, [pc, #4]	; (60e4 <z_impl_z_errno+0x8>)
    60de:	6898      	ldr	r0, [r3, #8]
}
    60e0:	3098      	adds	r0, #152	; 0x98
    60e2:	4770      	bx	lr
    60e4:	20001624 	.word	0x20001624

000060e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    60e8:	4b0f      	ldr	r3, [pc, #60]	; (6128 <z_sys_init_run_level+0x40>)
{
    60ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    60ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    60f0:	3001      	adds	r0, #1
    60f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    60f6:	42a6      	cmp	r6, r4
    60f8:	d800      	bhi.n	60fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    60fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    60fc:	e9d4 3500 	ldrd	r3, r5, [r4]
    6100:	4628      	mov	r0, r5
    6102:	4798      	blx	r3
		if (dev != NULL) {
    6104:	b16d      	cbz	r5, 6122 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    6106:	b138      	cbz	r0, 6118 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6108:	2800      	cmp	r0, #0
    610a:	bfb8      	it	lt
    610c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    610e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    6110:	28ff      	cmp	r0, #255	; 0xff
    6112:	bfa8      	it	ge
    6114:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    6116:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6118:	68ea      	ldr	r2, [r5, #12]
    611a:	7853      	ldrb	r3, [r2, #1]
    611c:	f043 0301 	orr.w	r3, r3, #1
    6120:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6122:	3408      	adds	r4, #8
    6124:	e7e7      	b.n	60f6 <z_sys_init_run_level+0xe>
    6126:	bf00      	nop
    6128:	0000c278 	.word	0x0000c278

0000612c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    612c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    612e:	4b0a      	ldr	r3, [pc, #40]	; (6158 <bg_thread_main+0x2c>)
    6130:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    6132:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    6134:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    6136:	f7ff ffd7 	bl	60e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    613a:	f001 f8f5 	bl	7328 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    613e:	2004      	movs	r0, #4
    6140:	f7ff ffd2 	bl	60e8 <z_sys_init_run_level>

	z_init_static_threads();
    6144:	f000 fa2c 	bl	65a0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    6148:	f7fa fa7a 	bl	640 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    614c:	4a03      	ldr	r2, [pc, #12]	; (615c <bg_thread_main+0x30>)
    614e:	7b13      	ldrb	r3, [r2, #12]
    6150:	f023 0301 	bic.w	r3, r3, #1
    6154:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6156:	bd08      	pop	{r3, pc}
    6158:	20001ce3 	.word	0x20001ce3
    615c:	200005e0 	.word	0x200005e0

00006160 <z_bss_zero>:
{
    6160:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    6162:	4803      	ldr	r0, [pc, #12]	; (6170 <z_bss_zero+0x10>)
    6164:	4a03      	ldr	r2, [pc, #12]	; (6174 <z_bss_zero+0x14>)
    6166:	2100      	movs	r1, #0
    6168:	1a12      	subs	r2, r2, r0
    616a:	f004 f97f 	bl	a46c <z_early_memset>
}
    616e:	bd08      	pop	{r3, pc}
    6170:	20000388 	.word	0x20000388
    6174:	20001ce4 	.word	0x20001ce4

00006178 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    6178:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    617a:	4e17      	ldr	r6, [pc, #92]	; (61d8 <z_init_cpu+0x60>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    617c:	4d17      	ldr	r5, [pc, #92]	; (61dc <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
    617e:	4918      	ldr	r1, [pc, #96]	; (61e0 <z_init_cpu+0x68>)
{
    6180:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    6182:	23b8      	movs	r3, #184	; 0xb8
    6184:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    6188:	4b16      	ldr	r3, [pc, #88]	; (61e4 <z_init_cpu+0x6c>)
    618a:	9305      	str	r3, [sp, #20]
    618c:	2201      	movs	r2, #1
    618e:	230f      	movs	r3, #15
    6190:	e9cd 3203 	strd	r3, r2, [sp, #12]
    6194:	2300      	movs	r3, #0
    6196:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    619a:	2318      	movs	r3, #24
    619c:	fb03 5500 	mla	r5, r3, r0, r5
{
    61a0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    61a2:	f44f 70c0 	mov.w	r0, #384	; 0x180
    61a6:	fb00 1104 	mla	r1, r0, r4, r1
    61aa:	4b0f      	ldr	r3, [pc, #60]	; (61e8 <z_init_cpu+0x70>)
    61ac:	9500      	str	r5, [sp, #0]
    61ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
    61b2:	4630      	mov	r0, r6
    61b4:	f000 f962 	bl	647c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    61b8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    61ba:	4a0c      	ldr	r2, [pc, #48]	; (61ec <z_init_cpu+0x74>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    61bc:	60ee      	str	r6, [r5, #12]
    61be:	f023 0304 	bic.w	r3, r3, #4
    61c2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    61c4:	f44f 6304 	mov.w	r3, #2112	; 0x840
    61c8:	fb04 3303 	mla	r3, r4, r3, r3
    61cc:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    61ce:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    61d0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    61d2:	b006      	add	sp, #24
    61d4:	bd70      	pop	{r4, r5, r6, pc}
    61d6:	bf00      	nop
    61d8:	20000528 	.word	0x20000528
    61dc:	20001624 	.word	0x20001624
    61e0:	200035c0 	.word	0x200035c0
    61e4:	0000d448 	.word	0x0000d448
    61e8:	00006661 	.word	0x00006661
    61ec:	20002d80 	.word	0x20002d80

000061f0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    61f0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    61f2:	2000      	movs	r0, #0
{
    61f4:	b0b4      	sub	sp, #208	; 0xd0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    61f6:	f7ff ff77 	bl	60e8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    61fa:	4b2e      	ldr	r3, [pc, #184]	; (62b4 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    61fc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    6200:	4d2d      	ldr	r5, [pc, #180]	; (62b8 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    6202:	4e2e      	ldr	r6, [pc, #184]	; (62bc <z_cstart+0xcc>)
    6204:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6206:	4f2e      	ldr	r7, [pc, #184]	; (62c0 <z_cstart+0xd0>)
    6208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    620c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    620e:	2400      	movs	r4, #0
    6210:	23e0      	movs	r3, #224	; 0xe0
    6212:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6216:	77ec      	strb	r4, [r5, #31]
    6218:	762c      	strb	r4, [r5, #24]
    621a:	766c      	strb	r4, [r5, #25]
    621c:	76ac      	strb	r4, [r5, #26]
    621e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6224:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6228:	626b      	str	r3, [r5, #36]	; 0x24
    622a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    622e:	f7fd fee7 	bl	4000 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6232:	f7fd fca7 	bl	3b84 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    623a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    623c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    623e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6240:	f7fe f822 	bl	4288 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6244:	f7fd ff86 	bl	4154 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6248:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    624c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    624e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    6252:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	k_thread_system_pool_assign(dummy_thread);
    6256:	f001 f861 	bl	731c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    625a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    625c:	f004 f8c7 	bl	a3ee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    6260:	2001      	movs	r0, #1
    6262:	f7ff ff41 	bl	60e8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    6266:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    6268:	4d16      	ldr	r5, [pc, #88]	; (62c4 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    626a:	f7ff ff3d 	bl	60e8 <z_sys_init_run_level>
	z_sched_init();
    626e:	f000 fd53 	bl	6d18 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6272:	4b15      	ldr	r3, [pc, #84]	; (62c8 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    6274:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6276:	9305      	str	r3, [sp, #20]
    6278:	2301      	movs	r3, #1
    627a:	4914      	ldr	r1, [pc, #80]	; (62cc <z_cstart+0xdc>)
    627c:	9400      	str	r4, [sp, #0]
    627e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6282:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6286:	463b      	mov	r3, r7
    6288:	e9cd 4401 	strd	r4, r4, [sp, #4]
    628c:	4628      	mov	r0, r5
    628e:	f000 f8f5 	bl	647c <z_setup_new_thread>
    6292:	7b6a      	ldrb	r2, [r5, #13]
    6294:	4606      	mov	r6, r0
    6296:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    629a:	4628      	mov	r0, r5
    629c:	736a      	strb	r2, [r5, #13]
    629e:	f004 f9cd 	bl	a63c <z_ready_thread>
	z_init_cpu(0);
    62a2:	4620      	mov	r0, r4
    62a4:	f7ff ff68 	bl	6178 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    62a8:	463a      	mov	r2, r7
    62aa:	4631      	mov	r1, r6
    62ac:	4628      	mov	r0, r5
    62ae:	f7fd fd69 	bl	3d84 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    62b2:	bf00      	nop
    62b4:	200035c0 	.word	0x200035c0
    62b8:	e000ed00 	.word	0xe000ed00
    62bc:	20001624 	.word	0x20001624
    62c0:	0000612d 	.word	0x0000612d
    62c4:	200005e0 	.word	0x200005e0
    62c8:	0000d44d 	.word	0x0000d44d
    62cc:	20003740 	.word	0x20003740

000062d0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    62d0:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    62d2:	4c06      	ldr	r4, [pc, #24]	; (62ec <init_mem_slab_module+0x1c>)
    62d4:	4d06      	ldr	r5, [pc, #24]	; (62f0 <init_mem_slab_module+0x20>)
	int rc = 0;
    62d6:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    62d8:	42ac      	cmp	r4, r5
    62da:	d300      	bcc.n	62de <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    62dc:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    62de:	4620      	mov	r0, r4
    62e0:	f004 f8c8 	bl	a474 <create_free_list>
		if (rc < 0) {
    62e4:	2800      	cmp	r0, #0
    62e6:	dbf9      	blt.n	62dc <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    62e8:	341c      	adds	r4, #28
    62ea:	e7f5      	b.n	62d8 <init_mem_slab_module+0x8>
    62ec:	200002e2 	.word	0x200002e2
    62f0:	200002e2 	.word	0x200002e2

000062f4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    62f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    62f6:	460c      	mov	r4, r1
	__asm__ volatile(
    62f8:	f04f 0520 	mov.w	r5, #32
    62fc:	f3ef 8111 	mrs	r1, BASEPRI
    6300:	f385 8812 	msr	BASEPRI_MAX, r5
    6304:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6308:	6945      	ldr	r5, [r0, #20]
    630a:	b15d      	cbz	r5, 6324 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    630c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    630e:	682b      	ldr	r3, [r5, #0]
    6310:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    6312:	6983      	ldr	r3, [r0, #24]
    6314:	3301      	adds	r3, #1
    6316:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6318:	2000      	movs	r0, #0
	__asm__ volatile(
    631a:	f381 8811 	msr	BASEPRI, r1
    631e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    6322:	e011      	b.n	6348 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6324:	ea52 0603 	orrs.w	r6, r2, r3
    6328:	d103      	bne.n	6332 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    632a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    632c:	f06f 000b 	mvn.w	r0, #11
    6330:	e7f3      	b.n	631a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6332:	e9cd 2300 	strd	r2, r3, [sp]
    6336:	4602      	mov	r2, r0
    6338:	3008      	adds	r0, #8
    633a:	f000 fbf7 	bl	6b2c <z_pend_curr>
		if (result == 0) {
    633e:	b918      	cbnz	r0, 6348 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    6340:	4b02      	ldr	r3, [pc, #8]	; (634c <k_mem_slab_alloc+0x58>)
    6342:	689b      	ldr	r3, [r3, #8]
    6344:	695b      	ldr	r3, [r3, #20]
    6346:	6023      	str	r3, [r4, #0]
}
    6348:	b002      	add	sp, #8
    634a:	bd70      	pop	{r4, r5, r6, pc}
    634c:	20001624 	.word	0x20001624

00006350 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    6350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6352:	4605      	mov	r5, r0
    6354:	460e      	mov	r6, r1
	__asm__ volatile(
    6356:	f04f 0320 	mov.w	r3, #32
    635a:	f3ef 8711 	mrs	r7, BASEPRI
    635e:	f383 8812 	msr	BASEPRI_MAX, r3
    6362:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    6366:	4b06      	ldr	r3, [pc, #24]	; (6380 <k_thread_foreach+0x30>)
    6368:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    636a:	b924      	cbnz	r4, 6376 <k_thread_foreach+0x26>
	__asm__ volatile(
    636c:	f387 8811 	msr	BASEPRI, r7
    6370:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    6374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    6376:	4620      	mov	r0, r4
    6378:	4631      	mov	r1, r6
    637a:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    637c:	6f64      	ldr	r4, [r4, #116]	; 0x74
    637e:	e7f4      	b.n	636a <k_thread_foreach+0x1a>
    6380:	20001624 	.word	0x20001624

00006384 <z_thread_monitor_exit>:
	__asm__ volatile(
    6384:	f04f 0320 	mov.w	r3, #32
    6388:	f3ef 8111 	mrs	r1, BASEPRI
    638c:	f383 8812 	msr	BASEPRI_MAX, r3
    6390:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    6394:	4a09      	ldr	r2, [pc, #36]	; (63bc <z_thread_monitor_exit+0x38>)
    6396:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6398:	4283      	cmp	r3, r0
    639a:	d107      	bne.n	63ac <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    639c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    639e:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    63a0:	f381 8811 	msr	BASEPRI, r1
    63a4:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    63a8:	4770      	bx	lr
    63aa:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    63ac:	2b00      	cmp	r3, #0
    63ae:	d0f7      	beq.n	63a0 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    63b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    63b2:	4282      	cmp	r2, r0
    63b4:	d1f9      	bne.n	63aa <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    63b6:	6f42      	ldr	r2, [r0, #116]	; 0x74
    63b8:	675a      	str	r2, [r3, #116]	; 0x74
    63ba:	e7f1      	b.n	63a0 <z_thread_monitor_exit+0x1c>
    63bc:	20001624 	.word	0x20001624

000063c0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    63c0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    63c2:	4604      	mov	r4, r0
    63c4:	b908      	cbnz	r0, 63ca <z_impl_k_thread_name_set+0xa>
		thread = _current;
    63c6:	4b05      	ldr	r3, [pc, #20]	; (63dc <z_impl_k_thread_name_set+0x1c>)
    63c8:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    63ca:	221f      	movs	r2, #31
    63cc:	f104 0078 	add.w	r0, r4, #120	; 0x78
    63d0:	f004 fbf4 	bl	abbc <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    63d4:	2000      	movs	r0, #0
    63d6:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    63da:	bd10      	pop	{r4, pc}
    63dc:	20001624 	.word	0x20001624

000063e0 <k_thread_state_str>:

	return bytes_to_copy;
}

const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size)
{
    63e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static const char  *states_str[8] = {"dummy", "pending", "prestart",
					     "dead", "suspended", "aborting",
					     "", "queued"};
	static const size_t states_sz[8] = {5, 7, 8, 4, 9, 8, 0, 6};

	if ((buf == NULL) || (buf_size == 0)) {
    63e4:	460c      	mov	r4, r1
    63e6:	2900      	cmp	r1, #0
    63e8:	d03d      	beq.n	6466 <k_thread_state_str+0x86>
    63ea:	2a00      	cmp	r2, #0
    63ec:	d03b      	beq.n	6466 <k_thread_state_str+0x86>
	uint8_t     thread_state = thread_id->base.thread_state;
    63ee:	7b47      	ldrb	r7, [r0, #13]
		return "";
	}

	buf_size--;   /* Reserve 1 byte for end-of-string character */
    63f0:	1e56      	subs	r6, r2, #1
		bit = BIT(index);
		if ((thread_state & bit) == 0) {
			continue;
		}

		off += copy_bytes(buf + off, buf_size - off,
    63f2:	4608      	mov	r0, r1
	for (uint8_t index = 0; thread_state != 0; index++) {
    63f4:	b38f      	cbz	r7, 645a <k_thread_state_str+0x7a>
    63f6:	f04f 0b00 	mov.w	fp, #0
				  states_str[index], states_sz[index]);
    63fa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 646c <k_thread_state_str+0x8c>
		off += copy_bytes(buf + off, buf_size - off,
    63fe:	f8df a070 	ldr.w	sl, [pc, #112]	; 6470 <k_thread_state_str+0x90>
	size_t      off = 0;
    6402:	465d      	mov	r5, fp
		bit = BIT(index);
    6404:	fa5f f18b 	uxtb.w	r1, fp
    6408:	f04f 0801 	mov.w	r8, #1
    640c:	fa08 f801 	lsl.w	r8, r8, r1
		if ((thread_state & bit) == 0) {
    6410:	ea17 0f08 	tst.w	r7, r8
    6414:	d01d      	beq.n	6452 <k_thread_state_str+0x72>
	bytes_to_copy = MIN(dest_size, src_size);
    6416:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    641a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
		off += copy_bytes(buf + off, buf_size - off,
    641e:	1b72      	subs	r2, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
    6420:	429a      	cmp	r2, r3
    6422:	bf28      	it	cs
    6424:	461a      	movcs	r2, r3
    6426:	9201      	str	r2, [sp, #4]
    6428:	f004 fb68 	bl	aafc <memcpy>
		off += copy_bytes(buf + off, buf_size - off,
    642c:	9a01      	ldr	r2, [sp, #4]

		thread_state &= ~bit;

		if (thread_state != 0) {
    642e:	ea37 0708 	bics.w	r7, r7, r8
		off += copy_bytes(buf + off, buf_size - off,
    6432:	4415      	add	r5, r2
		if (thread_state != 0) {
    6434:	eb04 0005 	add.w	r0, r4, r5
    6438:	d00f      	beq.n	645a <k_thread_state_str+0x7a>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
    643a:	eba6 0805 	sub.w	r8, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
    643e:	f1b8 0f01 	cmp.w	r8, #1
    6442:	bf28      	it	cs
    6444:	f04f 0801 	movcs.w	r8, #1
    6448:	490a      	ldr	r1, [pc, #40]	; (6474 <k_thread_state_str+0x94>)
    644a:	4642      	mov	r2, r8
    644c:	f004 fb56 	bl	aafc <memcpy>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
    6450:	4445      	add	r5, r8
	for (uint8_t index = 0; thread_state != 0; index++) {
    6452:	f10b 0b01 	add.w	fp, fp, #1
		off += copy_bytes(buf + off, buf_size - off,
    6456:	1960      	adds	r0, r4, r5
    6458:	e7d4      	b.n	6404 <k_thread_state_str+0x24>
		}
	}

	buf[off] = '\0';
    645a:	2300      	movs	r3, #0
    645c:	7003      	strb	r3, [r0, #0]

	return (const char *)buf;
    645e:	4620      	mov	r0, r4
}
    6460:	b003      	add	sp, #12
    6462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return "";
    6466:	4804      	ldr	r0, [pc, #16]	; (6478 <k_thread_state_str+0x98>)
    6468:	e7fa      	b.n	6460 <k_thread_state_str+0x80>
    646a:	bf00      	nop
    646c:	0000c290 	.word	0x0000c290
    6470:	0000c2b0 	.word	0x0000c2b0
    6474:	0000d455 	.word	0x0000d455
    6478:	0000c50b 	.word	0x0000c50b

0000647c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6480:	b085      	sub	sp, #20
    6482:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6484:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6488:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    648c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    648e:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6490:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6492:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6494:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6498:	7343      	strb	r3, [r0, #13]

	thread_base->prio = priority;
    649a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    649c:	7383      	strb	r3, [r0, #14]
	thread_base->pended_on = NULL;
    649e:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    64a0:	f101 0340 	add.w	r3, r1, #64	; 0x40
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    64a4:	f10a 0740 	add.w	r7, sl, #64	; 0x40
{
    64a8:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    64aa:	e9c0 5506 	strd	r5, r5, [r0, #24]
    64ae:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
    64b0:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    64b2:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    64b4:	440f      	add	r7, r1
__ssp_bos_icheck3(memset, void *, int)
    64b6:	4652      	mov	r2, sl
    64b8:	21aa      	movs	r1, #170	; 0xaa
    64ba:	4618      	mov	r0, r3
{
    64bc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    64c0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    64c4:	f004 fb42 	bl	ab4c <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    64c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.delta = delta;
    64ca:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
    64ce:	e9c4 0a27 	strd	r0, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    64d2:	9302      	str	r3, [sp, #8]
    64d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    64d6:	463a      	mov	r2, r7
    64d8:	e9cd b300 	strd	fp, r3, [sp]
    64dc:	4631      	mov	r1, r6
    64de:	4643      	mov	r3, r8
    64e0:	4620      	mov	r0, r4
    64e2:	f7fd fc1b 	bl	3d1c <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    64e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    64e8:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    64ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    64ec:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
    64ee:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    64f2:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    64f4:	f04f 0220 	mov.w	r2, #32
    64f8:	f3ef 8311 	mrs	r3, BASEPRI
    64fc:	f382 8812 	msr	BASEPRI_MAX, r2
    6500:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    6504:	4e0f      	ldr	r6, [pc, #60]	; (6544 <z_setup_new_thread+0xc8>)
    6506:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    6508:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    650a:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    650c:	f383 8811 	msr	BASEPRI, r3
    6510:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    6514:	f1b9 0f00 	cmp.w	r9, #0
    6518:	d011      	beq.n	653e <z_setup_new_thread+0xc2>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    651a:	221f      	movs	r2, #31
    651c:	4649      	mov	r1, r9
    651e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6522:	f004 fb4b 	bl	abbc <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    6526:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    652a:	68b3      	ldr	r3, [r6, #8]
    652c:	b10b      	cbz	r3, 6532 <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
    652e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    6532:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    6536:	4638      	mov	r0, r7
    6538:	b005      	add	sp, #20
    653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    653e:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
    6542:	e7f2      	b.n	652a <z_setup_new_thread+0xae>
    6544:	20001624 	.word	0x20001624

00006548 <z_impl_k_thread_create>:
{
    6548:	b5f0      	push	{r4, r5, r6, r7, lr}
    654a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    654c:	2500      	movs	r5, #0
    654e:	9505      	str	r5, [sp, #20]
    6550:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6552:	9504      	str	r5, [sp, #16]
    6554:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    6556:	9503      	str	r5, [sp, #12]
    6558:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    655a:	9502      	str	r5, [sp, #8]
{
    655c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6560:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    6562:	9501      	str	r5, [sp, #4]
    6564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    6566:	9500      	str	r5, [sp, #0]
{
    6568:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    656a:	f7ff ff87 	bl	647c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    656e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    6572:	bf08      	it	eq
    6574:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    6578:	d005      	beq.n	6586 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    657a:	ea56 0307 	orrs.w	r3, r6, r7
    657e:	d105      	bne.n	658c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    6580:	4620      	mov	r0, r4
    6582:	f000 fb49 	bl	6c18 <z_sched_start>
}
    6586:	4620      	mov	r0, r4
    6588:	b007      	add	sp, #28
    658a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    658c:	4903      	ldr	r1, [pc, #12]	; (659c <z_impl_k_thread_create+0x54>)
    658e:	463a      	mov	r2, r7
    6590:	4633      	mov	r3, r6
    6592:	f104 0018 	add.w	r0, r4, #24
    6596:	f000 fd4b 	bl	7030 <z_add_timeout>
    659a:	e7f4      	b.n	6586 <z_impl_k_thread_create+0x3e>
    659c:	0000a5a9 	.word	0x0000a5a9

000065a0 <z_init_static_threads>:
{
    65a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65a4:	4c29      	ldr	r4, [pc, #164]	; (664c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    65a6:	4d2a      	ldr	r5, [pc, #168]	; (6650 <z_init_static_threads+0xb0>)
{
    65a8:	b087      	sub	sp, #28
    65aa:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    65ac:	42ae      	cmp	r6, r5
    65ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
    65b2:	d30f      	bcc.n	65d4 <z_init_static_threads+0x34>
	k_sched_lock();
    65b4:	f000 fb80 	bl	6cb8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    65b8:	4c24      	ldr	r4, [pc, #144]	; (664c <z_init_static_threads+0xac>)
    65ba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 6654 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    65be:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    65c2:	f240 37e7 	movw	r7, #999	; 0x3e7
    65c6:	42ac      	cmp	r4, r5
    65c8:	d320      	bcc.n	660c <z_init_static_threads+0x6c>
}
    65ca:	b007      	add	sp, #28
    65cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    65d0:	f000 bb86 	b.w	6ce0 <k_sched_unlock>
		z_setup_new_thread(
    65d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    65d8:	9305      	str	r3, [sp, #20]
    65da:	f854 3c10 	ldr.w	r3, [r4, #-16]
    65de:	9304      	str	r3, [sp, #16]
    65e0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    65e4:	9303      	str	r3, [sp, #12]
    65e6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    65ea:	9302      	str	r3, [sp, #8]
    65ec:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    65f0:	9301      	str	r3, [sp, #4]
    65f2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    65f6:	9300      	str	r3, [sp, #0]
    65f8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    65fc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6600:	f7ff ff3c 	bl	647c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6604:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6608:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    660a:	e7ce      	b.n	65aa <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    660c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    660e:	1c5a      	adds	r2, r3, #1
    6610:	d00d      	beq.n	662e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    6612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6616:	2100      	movs	r1, #0
    6618:	4638      	mov	r0, r7
    661a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    661e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    6622:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6626:	d104      	bne.n	6632 <z_init_static_threads+0x92>
	z_sched_start(thread);
    6628:	4640      	mov	r0, r8
    662a:	f000 faf5 	bl	6c18 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    662e:	3430      	adds	r4, #48	; 0x30
    6630:	e7c9      	b.n	65c6 <z_init_static_threads+0x26>
    6632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6636:	2300      	movs	r3, #0
    6638:	f7f9 fdbe 	bl	1b8 <__aeabi_uldivmod>
    663c:	4602      	mov	r2, r0
    663e:	460b      	mov	r3, r1
    6640:	f108 0018 	add.w	r0, r8, #24
    6644:	4649      	mov	r1, r9
    6646:	f000 fcf3 	bl	7030 <z_add_timeout>
    664a:	e7f0      	b.n	662e <z_init_static_threads+0x8e>
    664c:	0000b324 	.word	0x0000b324
    6650:	0000b324 	.word	0x0000b324
    6654:	0000a5a9 	.word	0x0000a5a9

00006658 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    6658:	4800      	ldr	r0, [pc, #0]	; (665c <sys_kernel_version_get+0x4>)
    665a:	4770      	bx	lr
    665c:	03026300 	.word	0x03026300

00006660 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6660:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6662:	4c0b      	ldr	r4, [pc, #44]	; (6690 <idle+0x30>)
	return !z_sys_post_kernel;
    6664:	4d0b      	ldr	r5, [pc, #44]	; (6694 <idle+0x34>)
	__asm__ volatile(
    6666:	f04f 0220 	mov.w	r2, #32
    666a:	f3ef 8311 	mrs	r3, BASEPRI
    666e:	f382 8812 	msr	BASEPRI_MAX, r2
    6672:	f3bf 8f6f 	isb	sy
    6676:	f004 f871 	bl	a75c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    667a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    667c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    667e:	b913      	cbnz	r3, 6686 <idle+0x26>
	arch_cpu_idle();
    6680:	f7fd fa86 	bl	3b90 <arch_cpu_idle>
}
    6684:	e7ef      	b.n	6666 <idle+0x6>
    6686:	f7fd f8c3 	bl	3810 <pm_system_suspend>
    668a:	2800      	cmp	r0, #0
    668c:	d1eb      	bne.n	6666 <idle+0x6>
    668e:	e7f7      	b.n	6680 <idle+0x20>
    6690:	20001624 	.word	0x20001624
    6694:	20001ce3 	.word	0x20001ce3

00006698 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    669c:	4604      	mov	r4, r0
    669e:	4617      	mov	r7, r2
    66a0:	461e      	mov	r6, r3
    66a2:	f04f 0320 	mov.w	r3, #32
    66a6:	f3ef 8811 	mrs	r8, BASEPRI
    66aa:	f383 8812 	msr	BASEPRI_MAX, r3
    66ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    66b2:	68c3      	ldr	r3, [r0, #12]
    66b4:	4a33      	ldr	r2, [pc, #204]	; (6784 <z_impl_k_mutex_lock+0xec>)
    66b6:	b17b      	cbz	r3, 66d8 <z_impl_k_mutex_lock+0x40>
    66b8:	6880      	ldr	r0, [r0, #8]
    66ba:	6891      	ldr	r1, [r2, #8]
    66bc:	4288      	cmp	r0, r1
    66be:	d019      	beq.n	66f4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    66c0:	ea57 0306 	orrs.w	r3, r7, r6
    66c4:	d118      	bne.n	66f8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    66c6:	f388 8811 	msr	BASEPRI, r8
    66ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    66ce:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    66d2:	b002      	add	sp, #8
    66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    66d8:	6891      	ldr	r1, [r2, #8]
    66da:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    66de:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    66e0:	3301      	adds	r3, #1
    66e2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    66e4:	6893      	ldr	r3, [r2, #8]
    66e6:	60a3      	str	r3, [r4, #8]
    66e8:	f388 8811 	msr	BASEPRI, r8
    66ec:	f3bf 8f6f 	isb	sy
		return 0;
    66f0:	2000      	movs	r0, #0
    66f2:	e7ee      	b.n	66d2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    66f4:	6921      	ldr	r1, [r4, #16]
    66f6:	e7f2      	b.n	66de <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    66f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    66fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6700:	4299      	cmp	r1, r3
    6702:	bfa8      	it	ge
    6704:	4619      	movge	r1, r3
    6706:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    670a:	4291      	cmp	r1, r2
    670c:	bfb8      	it	lt
    670e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6710:	428b      	cmp	r3, r1
    6712:	dd2e      	ble.n	6772 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    6714:	f003 ff1e 	bl	a554 <adjust_owner_prio.isra.0>
    6718:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    671a:	e9cd 7600 	strd	r7, r6, [sp]
    671e:	481a      	ldr	r0, [pc, #104]	; (6788 <z_impl_k_mutex_lock+0xf0>)
    6720:	4622      	mov	r2, r4
    6722:	4641      	mov	r1, r8
    6724:	f000 fa02 	bl	6b2c <z_pend_curr>
	if (got_mutex == 0) {
    6728:	2800      	cmp	r0, #0
    672a:	d0e1      	beq.n	66f0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    672c:	f04f 0320 	mov.w	r3, #32
    6730:	f3ef 8611 	mrs	r6, BASEPRI
    6734:	f383 8812 	msr	BASEPRI_MAX, r3
    6738:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    673c:	68a0      	ldr	r0, [r4, #8]
    673e:	b1d0      	cbz	r0, 6776 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6740:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6742:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6744:	429c      	cmp	r4, r3
    6746:	d00a      	beq.n	675e <z_impl_k_mutex_lock+0xc6>
    6748:	b14b      	cbz	r3, 675e <z_impl_k_mutex_lock+0xc6>
    674a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    674e:	4299      	cmp	r1, r3
    6750:	bfa8      	it	ge
    6752:	4619      	movge	r1, r3
    6754:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6758:	4299      	cmp	r1, r3
    675a:	bfb8      	it	lt
    675c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    675e:	f003 fef9 	bl	a554 <adjust_owner_prio.isra.0>
    6762:	b140      	cbz	r0, 6776 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    6764:	4808      	ldr	r0, [pc, #32]	; (6788 <z_impl_k_mutex_lock+0xf0>)
    6766:	4631      	mov	r1, r6
    6768:	f000 fa44 	bl	6bf4 <z_reschedule>
	return -EAGAIN;
    676c:	f06f 000a 	mvn.w	r0, #10
    6770:	e7af      	b.n	66d2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    6772:	2500      	movs	r5, #0
    6774:	e7d1      	b.n	671a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    6776:	2d00      	cmp	r5, #0
    6778:	d1f4      	bne.n	6764 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    677a:	f386 8811 	msr	BASEPRI, r6
    677e:	f3bf 8f6f 	isb	sy
    6782:	e7f3      	b.n	676c <z_impl_k_mutex_lock+0xd4>
    6784:	20001624 	.word	0x20001624
    6788:	20001ce4 	.word	0x20001ce4

0000678c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    678c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    678e:	6883      	ldr	r3, [r0, #8]
{
    6790:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    6792:	b373      	cbz	r3, 67f2 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6794:	4a1a      	ldr	r2, [pc, #104]	; (6800 <z_impl_k_mutex_unlock+0x74>)
    6796:	6892      	ldr	r2, [r2, #8]
    6798:	4293      	cmp	r3, r2
    679a:	d12d      	bne.n	67f8 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    679c:	68c3      	ldr	r3, [r0, #12]
    679e:	2b01      	cmp	r3, #1
    67a0:	d903      	bls.n	67aa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    67a2:	3b01      	subs	r3, #1
    67a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    67a6:	2000      	movs	r0, #0
}
    67a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    67aa:	f04f 0320 	mov.w	r3, #32
    67ae:	f3ef 8511 	mrs	r5, BASEPRI
    67b2:	f383 8812 	msr	BASEPRI_MAX, r3
    67b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    67ba:	6901      	ldr	r1, [r0, #16]
    67bc:	6880      	ldr	r0, [r0, #8]
    67be:	f003 fec9 	bl	a554 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    67c2:	4620      	mov	r0, r4
    67c4:	f003 ff4a 	bl	a65c <z_unpend_first_thread>
	mutex->owner = new_owner;
    67c8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    67ca:	b160      	cbz	r0, 67e6 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    67cc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    67d0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    67d2:	2200      	movs	r2, #0
    67d4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    67d8:	f003 ff30 	bl	a63c <z_ready_thread>
		z_reschedule(&lock, key);
    67dc:	4809      	ldr	r0, [pc, #36]	; (6804 <z_impl_k_mutex_unlock+0x78>)
    67de:	4629      	mov	r1, r5
    67e0:	f000 fa08 	bl	6bf4 <z_reschedule>
    67e4:	e7df      	b.n	67a6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    67e6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    67e8:	f385 8811 	msr	BASEPRI, r5
    67ec:	f3bf 8f6f 	isb	sy
    67f0:	e7d9      	b.n	67a6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    67f2:	f06f 0015 	mvn.w	r0, #21
    67f6:	e7d7      	b.n	67a8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    67f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67fc:	e7d4      	b.n	67a8 <z_impl_k_mutex_unlock+0x1c>
    67fe:	bf00      	nop
    6800:	20001624 	.word	0x20001624
    6804:	20001ce4 	.word	0x20001ce4

00006808 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6808:	b538      	push	{r3, r4, r5, lr}
    680a:	4604      	mov	r4, r0
	__asm__ volatile(
    680c:	f04f 0320 	mov.w	r3, #32
    6810:	f3ef 8511 	mrs	r5, BASEPRI
    6814:	f383 8812 	msr	BASEPRI_MAX, r3
    6818:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    681c:	f003 ff1e 	bl	a65c <z_unpend_first_thread>

	if (thread != NULL) {
    6820:	b150      	cbz	r0, 6838 <z_impl_k_sem_give+0x30>
    6822:	2200      	movs	r2, #0
    6824:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6828:	f003 ff08 	bl	a63c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    682c:	4629      	mov	r1, r5
    682e:	4808      	ldr	r0, [pc, #32]	; (6850 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6834:	f000 b9de 	b.w	6bf4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6838:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    683c:	429a      	cmp	r2, r3
    683e:	bf18      	it	ne
    6840:	3301      	addne	r3, #1
    6842:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6844:	2102      	movs	r1, #2
    6846:	f104 0010 	add.w	r0, r4, #16
    684a:	f004 f8fd 	bl	aa48 <z_handle_obj_poll_events>
}
    684e:	e7ed      	b.n	682c <z_impl_k_sem_give+0x24>
    6850:	20001ce4 	.word	0x20001ce4

00006854 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6854:	b513      	push	{r0, r1, r4, lr}
    6856:	f04f 0420 	mov.w	r4, #32
    685a:	f3ef 8111 	mrs	r1, BASEPRI
    685e:	f384 8812 	msr	BASEPRI_MAX, r4
    6862:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6866:	6884      	ldr	r4, [r0, #8]
    6868:	b144      	cbz	r4, 687c <z_impl_k_sem_take+0x28>
		sem->count--;
    686a:	3c01      	subs	r4, #1
    686c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    686e:	f381 8811 	msr	BASEPRI, r1
    6872:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6876:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6878:	b002      	add	sp, #8
    687a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    687c:	ea52 0403 	orrs.w	r4, r2, r3
    6880:	d106      	bne.n	6890 <z_impl_k_sem_take+0x3c>
    6882:	f381 8811 	msr	BASEPRI, r1
    6886:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    688a:	f06f 000f 	mvn.w	r0, #15
    688e:	e7f3      	b.n	6878 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6890:	e9cd 2300 	strd	r2, r3, [sp]
    6894:	4602      	mov	r2, r0
    6896:	4802      	ldr	r0, [pc, #8]	; (68a0 <z_impl_k_sem_take+0x4c>)
    6898:	f000 f948 	bl	6b2c <z_pend_curr>
	return ret;
    689c:	e7ec      	b.n	6878 <z_impl_k_sem_take+0x24>
    689e:	bf00      	nop
    68a0:	20001ce4 	.word	0x20001ce4

000068a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    68a4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    68a6:	4d07      	ldr	r5, [pc, #28]	; (68c4 <z_reset_time_slice+0x20>)
    68a8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    68aa:	b154      	cbz	r4, 68c2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    68ac:	f7fe fd7c 	bl	53a8 <sys_clock_elapsed>
    68b0:	4b05      	ldr	r3, [pc, #20]	; (68c8 <z_reset_time_slice+0x24>)
    68b2:	4404      	add	r4, r0
    68b4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    68b6:	6828      	ldr	r0, [r5, #0]
    68b8:	2100      	movs	r1, #0
	}
}
    68ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    68be:	f003 bf5d 	b.w	a77c <z_set_timeout_expiry>
}
    68c2:	bd38      	pop	{r3, r4, r5, pc}
    68c4:	20001658 	.word	0x20001658
    68c8:	20001624 	.word	0x20001624

000068cc <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    68cc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    68ce:	4d0d      	ldr	r5, [pc, #52]	; (6904 <update_cache+0x38>)
    68d0:	462b      	mov	r3, r5
    68d2:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68d6:	429c      	cmp	r4, r3
    68d8:	d000      	beq.n	68dc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    68da:	b904      	cbnz	r4, 68de <update_cache+0x12>
    68dc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    68de:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    68e0:	b938      	cbnz	r0, 68f2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    68e2:	7b5a      	ldrb	r2, [r3, #13]
    68e4:	06d2      	lsls	r2, r2, #27
    68e6:	d104      	bne.n	68f2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    68e8:	69a2      	ldr	r2, [r4, #24]
    68ea:	b912      	cbnz	r2, 68f2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    68ec:	89da      	ldrh	r2, [r3, #14]
    68ee:	2a7f      	cmp	r2, #127	; 0x7f
    68f0:	d805      	bhi.n	68fe <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    68f2:	429c      	cmp	r4, r3
    68f4:	d002      	beq.n	68fc <update_cache+0x30>
			z_reset_time_slice(thread);
    68f6:	4620      	mov	r0, r4
    68f8:	f7ff ffd4 	bl	68a4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    68fc:	4623      	mov	r3, r4
    68fe:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    6900:	bd38      	pop	{r3, r4, r5, pc}
    6902:	bf00      	nop
    6904:	20001624 	.word	0x20001624

00006908 <move_thread_to_end_of_prio_q>:
{
    6908:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    690a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    690e:	7b43      	ldrb	r3, [r0, #13]
    6910:	2a00      	cmp	r2, #0
{
    6912:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6914:	da04      	bge.n	6920 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    691a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    691c:	f003 fe29 	bl	a572 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6920:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    6922:	4a15      	ldr	r2, [pc, #84]	; (6978 <move_thread_to_end_of_prio_q+0x70>)
    6924:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6928:	4610      	mov	r0, r2
    692a:	734b      	strb	r3, [r1, #13]
    692c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    6930:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6932:	4283      	cmp	r3, r0
    6934:	bf08      	it	eq
    6936:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6938:	b923      	cbnz	r3, 6944 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    693a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    693e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    6940:	6251      	str	r1, [r2, #36]	; 0x24
}
    6942:	e00c      	b.n	695e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    6944:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    6948:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    694c:	42b5      	cmp	r5, r6
    694e:	d00e      	beq.n	696e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6950:	42ae      	cmp	r6, r5
    6952:	dd0c      	ble.n	696e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6954:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    6956:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    695a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    695c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    695e:	6890      	ldr	r0, [r2, #8]
    6960:	1a43      	subs	r3, r0, r1
    6962:	4258      	negs	r0, r3
}
    6964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6968:	4158      	adcs	r0, r3
    696a:	f7ff bfaf 	b.w	68cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    696e:	429c      	cmp	r4, r3
    6970:	d0e3      	beq.n	693a <move_thread_to_end_of_prio_q+0x32>
    6972:	681b      	ldr	r3, [r3, #0]
    6974:	e7e0      	b.n	6938 <move_thread_to_end_of_prio_q+0x30>
    6976:	bf00      	nop
    6978:	20001624 	.word	0x20001624

0000697c <ready_thread>:
{
    697c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    697e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6982:	7b42      	ldrb	r2, [r0, #13]
    6984:	2b00      	cmp	r3, #0
    6986:	db29      	blt.n	69dc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6988:	06d3      	lsls	r3, r2, #27
    698a:	d127      	bne.n	69dc <ready_thread+0x60>
	return node->next != NULL;
    698c:	6983      	ldr	r3, [r0, #24]
    698e:	bb2b      	cbnz	r3, 69dc <ready_thread+0x60>
	return list->head == list;
    6990:	4913      	ldr	r1, [pc, #76]	; (69e0 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    6992:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6996:	7342      	strb	r2, [r0, #13]
    6998:	460a      	mov	r2, r1
    699a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    699e:	4294      	cmp	r4, r2
    69a0:	bf18      	it	ne
    69a2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    69a4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    69a6:	b923      	cbnz	r3, 69b2 <ready_thread+0x36>
	node->prev = tail;
    69a8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    69ac:	6020      	str	r0, [r4, #0]
	list->tail = node;
    69ae:	6248      	str	r0, [r1, #36]	; 0x24
}
    69b0:	e00c      	b.n	69cc <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    69b2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    69b6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    69ba:	42b5      	cmp	r5, r6
    69bc:	d00a      	beq.n	69d4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    69be:	42ae      	cmp	r6, r5
    69c0:	dd08      	ble.n	69d4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    69c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    69c4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    69c8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    69ca:	6058      	str	r0, [r3, #4]
}
    69cc:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    69ce:	2000      	movs	r0, #0
    69d0:	f7ff bf7c 	b.w	68cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    69d4:	42a3      	cmp	r3, r4
    69d6:	d0e7      	beq.n	69a8 <ready_thread+0x2c>
    69d8:	681b      	ldr	r3, [r3, #0]
    69da:	e7e4      	b.n	69a6 <ready_thread+0x2a>
}
    69dc:	bc70      	pop	{r4, r5, r6}
    69de:	4770      	bx	lr
    69e0:	20001624 	.word	0x20001624

000069e4 <unready_thread>:
{
    69e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    69e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    69ea:	7b43      	ldrb	r3, [r0, #13]
    69ec:	2a00      	cmp	r2, #0
{
    69ee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    69f0:	da04      	bge.n	69fc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    69f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    69f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    69f8:	f003 fdbb 	bl	a572 <sys_dlist_remove>
	update_cache(thread == _current);
    69fc:	4b04      	ldr	r3, [pc, #16]	; (6a10 <unready_thread+0x2c>)
    69fe:	6898      	ldr	r0, [r3, #8]
    6a00:	1a43      	subs	r3, r0, r1
    6a02:	4258      	negs	r0, r3
    6a04:	4158      	adcs	r0, r3
}
    6a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    6a0a:	f7ff bf5f 	b.w	68cc <update_cache>
    6a0e:	bf00      	nop
    6a10:	20001624 	.word	0x20001624

00006a14 <pend_locked>:
{
    6a14:	b570      	push	{r4, r5, r6, lr}
    6a16:	4615      	mov	r5, r2
    6a18:	461c      	mov	r4, r3
    6a1a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    6a1c:	f003 fde6 	bl	a5ec <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6a20:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    6a24:	bf08      	it	eq
    6a26:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    6a2a:	d008      	beq.n	6a3e <pend_locked+0x2a>
    6a2c:	462a      	mov	r2, r5
    6a2e:	4623      	mov	r3, r4
    6a30:	f106 0018 	add.w	r0, r6, #24
    6a34:	4902      	ldr	r1, [pc, #8]	; (6a40 <pend_locked+0x2c>)
}
    6a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a3a:	f000 baf9 	b.w	7030 <z_add_timeout>
    6a3e:	bd70      	pop	{r4, r5, r6, pc}
    6a40:	0000a5a9 	.word	0x0000a5a9

00006a44 <k_sched_time_slice_set>:
{
    6a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a46:	4604      	mov	r4, r0
    6a48:	460d      	mov	r5, r1
	__asm__ volatile(
    6a4a:	f04f 0320 	mov.w	r3, #32
    6a4e:	f3ef 8711 	mrs	r7, BASEPRI
    6a52:	f383 8812 	msr	BASEPRI_MAX, r3
    6a56:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    6a5a:	2600      	movs	r6, #0
    6a5c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    6a60:	f240 30e7 	movw	r0, #999	; 0x3e7
    6a64:	4631      	mov	r1, r6
    6a66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6a6a:	2300      	movs	r3, #0
    6a6c:	fbe4 010c 	umlal	r0, r1, r4, ip
    6a70:	f7f9 fba2 	bl	1b8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6a74:	42b4      	cmp	r4, r6
    6a76:	dd02      	ble.n	6a7e <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    6a78:	2802      	cmp	r0, #2
    6a7a:	bfb8      	it	lt
    6a7c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6a7e:	4a07      	ldr	r2, [pc, #28]	; (6a9c <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    6a80:	4b07      	ldr	r3, [pc, #28]	; (6aa0 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6a82:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    6a84:	4a07      	ldr	r2, [pc, #28]	; (6aa4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    6a86:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    6a88:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    6a8a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    6a8c:	f7ff ff0a 	bl	68a4 <z_reset_time_slice>
	__asm__ volatile(
    6a90:	f387 8811 	msr	BASEPRI, r7
    6a94:	f3bf 8f6f 	isb	sy
}
    6a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a9a:	bf00      	nop
    6a9c:	20001658 	.word	0x20001658
    6aa0:	20001624 	.word	0x20001624
    6aa4:	20001654 	.word	0x20001654

00006aa8 <z_time_slice>:
{
    6aa8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6aaa:	f04f 0320 	mov.w	r3, #32
    6aae:	f3ef 8511 	mrs	r5, BASEPRI
    6ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ab6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    6aba:	4b17      	ldr	r3, [pc, #92]	; (6b18 <z_time_slice+0x70>)
    6abc:	4a17      	ldr	r2, [pc, #92]	; (6b1c <z_time_slice+0x74>)
    6abe:	689c      	ldr	r4, [r3, #8]
    6ac0:	6811      	ldr	r1, [r2, #0]
    6ac2:	428c      	cmp	r4, r1
    6ac4:	d107      	bne.n	6ad6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    6ac6:	4620      	mov	r0, r4
    6ac8:	f7ff feec 	bl	68a4 <z_reset_time_slice>
	__asm__ volatile(
    6acc:	f385 8811 	msr	BASEPRI, r5
    6ad0:	f3bf 8f6f 	isb	sy
}
    6ad4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    6ad6:	2100      	movs	r1, #0
    6ad8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    6ada:	4a11      	ldr	r2, [pc, #68]	; (6b20 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    6adc:	6812      	ldr	r2, [r2, #0]
    6ade:	b1c2      	cbz	r2, 6b12 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6ae0:	89e2      	ldrh	r2, [r4, #14]
    6ae2:	2a7f      	cmp	r2, #127	; 0x7f
    6ae4:	d815      	bhi.n	6b12 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    6ae6:	7b62      	ldrb	r2, [r4, #13]
    6ae8:	06d2      	lsls	r2, r2, #27
    6aea:	d112      	bne.n	6b12 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6aec:	4a0d      	ldr	r2, [pc, #52]	; (6b24 <z_time_slice+0x7c>)
    6aee:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6af2:	6812      	ldr	r2, [r2, #0]
    6af4:	4291      	cmp	r1, r2
    6af6:	db0c      	blt.n	6b12 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6af8:	4a0b      	ldr	r2, [pc, #44]	; (6b28 <z_time_slice+0x80>)
    6afa:	4294      	cmp	r4, r2
    6afc:	d009      	beq.n	6b12 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    6afe:	691a      	ldr	r2, [r3, #16]
    6b00:	4282      	cmp	r2, r0
    6b02:	dc03      	bgt.n	6b0c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    6b04:	4620      	mov	r0, r4
    6b06:	f7ff feff 	bl	6908 <move_thread_to_end_of_prio_q>
    6b0a:	e7dc      	b.n	6ac6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    6b0c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    6b0e:	611a      	str	r2, [r3, #16]
    6b10:	e7dc      	b.n	6acc <z_time_slice+0x24>
    6b12:	2200      	movs	r2, #0
    6b14:	e7fb      	b.n	6b0e <z_time_slice+0x66>
    6b16:	bf00      	nop
    6b18:	20001624 	.word	0x20001624
    6b1c:	20001650 	.word	0x20001650
    6b20:	20001658 	.word	0x20001658
    6b24:	20001654 	.word	0x20001654
    6b28:	20000528 	.word	0x20000528

00006b2c <z_pend_curr>:
{
    6b2c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    6b2e:	480c      	ldr	r0, [pc, #48]	; (6b60 <z_pend_curr+0x34>)
    6b30:	4d0c      	ldr	r5, [pc, #48]	; (6b64 <z_pend_curr+0x38>)
    6b32:	6886      	ldr	r6, [r0, #8]
    6b34:	602e      	str	r6, [r5, #0]
{
    6b36:	460c      	mov	r4, r1
    6b38:	4611      	mov	r1, r2
    6b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    6b3e:	f04f 0620 	mov.w	r6, #32
    6b42:	f3ef 8511 	mrs	r5, BASEPRI
    6b46:	f386 8812 	msr	BASEPRI_MAX, r6
    6b4a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    6b4e:	6880      	ldr	r0, [r0, #8]
    6b50:	f7ff ff60 	bl	6a14 <pend_locked>
	ret = arch_swap(key);
    6b54:	4620      	mov	r0, r4
}
    6b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b5a:	f7fd b887 	b.w	3c6c <arch_swap>
    6b5e:	bf00      	nop
    6b60:	20001624 	.word	0x20001624
    6b64:	20001650 	.word	0x20001650

00006b68 <z_set_prio>:
{
    6b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b6a:	4604      	mov	r4, r0
    6b6c:	f04f 0320 	mov.w	r3, #32
    6b70:	f3ef 8611 	mrs	r6, BASEPRI
    6b74:	f383 8812 	msr	BASEPRI_MAX, r3
    6b78:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    6b7c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6b7e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    6b80:	b249      	sxtb	r1, r1
    6b82:	d119      	bne.n	6bb8 <z_set_prio+0x50>
	return node->next != NULL;
    6b84:	6985      	ldr	r5, [r0, #24]
    6b86:	b9bd      	cbnz	r5, 6bb8 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6b8c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6b8e:	f003 fcf0 	bl	a572 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6b92:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    6b94:	4a16      	ldr	r2, [pc, #88]	; (6bf0 <z_set_prio+0x88>)
				thread->base.prio = prio;
    6b96:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b9c:	7343      	strb	r3, [r0, #13]
    6b9e:	4613      	mov	r3, r2
    6ba0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ba4:	4298      	cmp	r0, r3
    6ba6:	bf18      	it	ne
    6ba8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    6baa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6bac:	b95d      	cbnz	r5, 6bc6 <z_set_prio+0x5e>
	node->prev = tail;
    6bae:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    6bb2:	6004      	str	r4, [r0, #0]
	list->tail = node;
    6bb4:	6254      	str	r4, [r2, #36]	; 0x24
}
    6bb6:	e011      	b.n	6bdc <z_set_prio+0x74>
			thread->base.prio = prio;
    6bb8:	73a1      	strb	r1, [r4, #14]
    6bba:	2000      	movs	r0, #0
	__asm__ volatile(
    6bbc:	f386 8811 	msr	BASEPRI, r6
    6bc0:	f3bf 8f6f 	isb	sy
}
    6bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    6bc6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    6bca:	42b9      	cmp	r1, r7
    6bcc:	d00b      	beq.n	6be6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6bce:	428f      	cmp	r7, r1
    6bd0:	dd09      	ble.n	6be6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    6bd2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    6bd4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    6bd8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6bda:	606c      	str	r4, [r5, #4]
			update_cache(1);
    6bdc:	2001      	movs	r0, #1
    6bde:	f7ff fe75 	bl	68cc <update_cache>
    6be2:	2001      	movs	r0, #1
    6be4:	e7ea      	b.n	6bbc <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    6be6:	42a8      	cmp	r0, r5
    6be8:	d0e1      	beq.n	6bae <z_set_prio+0x46>
    6bea:	682d      	ldr	r5, [r5, #0]
    6bec:	e7de      	b.n	6bac <z_set_prio+0x44>
    6bee:	bf00      	nop
    6bf0:	20001624 	.word	0x20001624

00006bf4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6bf4:	b949      	cbnz	r1, 6c0a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6bf6:	f3ef 8005 	mrs	r0, IPSR
    6bfa:	b930      	cbnz	r0, 6c0a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    6bfc:	4b05      	ldr	r3, [pc, #20]	; (6c14 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    6bfe:	69da      	ldr	r2, [r3, #28]
    6c00:	689b      	ldr	r3, [r3, #8]
    6c02:	429a      	cmp	r2, r3
    6c04:	d001      	beq.n	6c0a <z_reschedule+0x16>
    6c06:	f7fd b831 	b.w	3c6c <arch_swap>
    6c0a:	f381 8811 	msr	BASEPRI, r1
    6c0e:	f3bf 8f6f 	isb	sy
}
    6c12:	4770      	bx	lr
    6c14:	20001624 	.word	0x20001624

00006c18 <z_sched_start>:
{
    6c18:	b510      	push	{r4, lr}
	__asm__ volatile(
    6c1a:	f04f 0220 	mov.w	r2, #32
    6c1e:	f3ef 8411 	mrs	r4, BASEPRI
    6c22:	f382 8812 	msr	BASEPRI_MAX, r2
    6c26:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6c2a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    6c2c:	0751      	lsls	r1, r2, #29
    6c2e:	d404      	bmi.n	6c3a <z_sched_start+0x22>
	__asm__ volatile(
    6c30:	f384 8811 	msr	BASEPRI, r4
    6c34:	f3bf 8f6f 	isb	sy
}
    6c38:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6c3a:	f022 0204 	bic.w	r2, r2, #4
    6c3e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    6c40:	f7ff fe9c 	bl	697c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6c44:	4621      	mov	r1, r4
    6c46:	4802      	ldr	r0, [pc, #8]	; (6c50 <z_sched_start+0x38>)
}
    6c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    6c4c:	f7ff bfd2 	b.w	6bf4 <z_reschedule>
    6c50:	20001ce4 	.word	0x20001ce4

00006c54 <z_impl_k_thread_suspend>:
{
    6c54:	b570      	push	{r4, r5, r6, lr}
    6c56:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6c58:	3018      	adds	r0, #24
    6c5a:	f003 fd69 	bl	a730 <z_abort_timeout>
	__asm__ volatile(
    6c5e:	f04f 0320 	mov.w	r3, #32
    6c62:	f3ef 8611 	mrs	r6, BASEPRI
    6c66:	f383 8812 	msr	BASEPRI_MAX, r3
    6c6a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6c6e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    6c72:	7b63      	ldrb	r3, [r4, #13]
    6c74:	2a00      	cmp	r2, #0
    6c76:	da05      	bge.n	6c84 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c7c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6c7e:	4620      	mov	r0, r4
    6c80:	f003 fc77 	bl	a572 <sys_dlist_remove>
		update_cache(thread == _current);
    6c84:	4d0b      	ldr	r5, [pc, #44]	; (6cb4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6c86:	7b63      	ldrb	r3, [r4, #13]
    6c88:	68a8      	ldr	r0, [r5, #8]
    6c8a:	f043 0310 	orr.w	r3, r3, #16
    6c8e:	7363      	strb	r3, [r4, #13]
    6c90:	1b03      	subs	r3, r0, r4
    6c92:	4258      	negs	r0, r3
    6c94:	4158      	adcs	r0, r3
    6c96:	f7ff fe19 	bl	68cc <update_cache>
	__asm__ volatile(
    6c9a:	f386 8811 	msr	BASEPRI, r6
    6c9e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6ca2:	68ab      	ldr	r3, [r5, #8]
    6ca4:	42a3      	cmp	r3, r4
    6ca6:	d103      	bne.n	6cb0 <z_impl_k_thread_suspend+0x5c>
}
    6ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6cac:	f003 bd12 	b.w	a6d4 <z_reschedule_unlocked>
}
    6cb0:	bd70      	pop	{r4, r5, r6, pc}
    6cb2:	bf00      	nop
    6cb4:	20001624 	.word	0x20001624

00006cb8 <k_sched_lock>:
	__asm__ volatile(
    6cb8:	f04f 0320 	mov.w	r3, #32
    6cbc:	f3ef 8111 	mrs	r1, BASEPRI
    6cc0:	f383 8812 	msr	BASEPRI_MAX, r3
    6cc4:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6cc8:	4b04      	ldr	r3, [pc, #16]	; (6cdc <k_sched_lock+0x24>)
    6cca:	689a      	ldr	r2, [r3, #8]
    6ccc:	7bd3      	ldrb	r3, [r2, #15]
    6cce:	3b01      	subs	r3, #1
    6cd0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6cd2:	f381 8811 	msr	BASEPRI, r1
    6cd6:	f3bf 8f6f 	isb	sy
}
    6cda:	4770      	bx	lr
    6cdc:	20001624 	.word	0x20001624

00006ce0 <k_sched_unlock>:
{
    6ce0:	b510      	push	{r4, lr}
	__asm__ volatile(
    6ce2:	f04f 0320 	mov.w	r3, #32
    6ce6:	f3ef 8411 	mrs	r4, BASEPRI
    6cea:	f383 8812 	msr	BASEPRI_MAX, r3
    6cee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    6cf2:	4b08      	ldr	r3, [pc, #32]	; (6d14 <k_sched_unlock+0x34>)
    6cf4:	689a      	ldr	r2, [r3, #8]
    6cf6:	7bd3      	ldrb	r3, [r2, #15]
    6cf8:	3301      	adds	r3, #1
    6cfa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6cfc:	2000      	movs	r0, #0
    6cfe:	f7ff fde5 	bl	68cc <update_cache>
	__asm__ volatile(
    6d02:	f384 8811 	msr	BASEPRI, r4
    6d06:	f3bf 8f6f 	isb	sy
}
    6d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6d0e:	f003 bce1 	b.w	a6d4 <z_reschedule_unlocked>
    6d12:	bf00      	nop
    6d14:	20001624 	.word	0x20001624

00006d18 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6d18:	4b04      	ldr	r3, [pc, #16]	; (6d2c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6d1a:	2100      	movs	r1, #0
    6d1c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6d20:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6d24:	4608      	mov	r0, r1
    6d26:	f7ff be8d 	b.w	6a44 <k_sched_time_slice_set>
    6d2a:	bf00      	nop
    6d2c:	20001624 	.word	0x20001624

00006d30 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    6d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    6d32:	f04f 0320 	mov.w	r3, #32
    6d36:	f3ef 8511 	mrs	r5, BASEPRI
    6d3a:	f383 8812 	msr	BASEPRI_MAX, r3
    6d3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6d42:	4919      	ldr	r1, [pc, #100]	; (6da8 <z_impl_k_yield+0x78>)
    6d44:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6d46:	7b43      	ldrb	r3, [r0, #13]
    6d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d4c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6d4e:	f003 fc10 	bl	a572 <sys_dlist_remove>
	}
	queue_thread(_current);
    6d52:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6d54:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    6d56:	4608      	mov	r0, r1
    6d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6d5c:	735a      	strb	r2, [r3, #13]
    6d5e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    6d62:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d64:	4282      	cmp	r2, r0
    6d66:	bf08      	it	eq
    6d68:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6d6a:	b922      	cbnz	r2, 6d76 <z_impl_k_yield+0x46>
	node->prev = tail;
    6d6c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    6d70:	6023      	str	r3, [r4, #0]
	list->tail = node;
    6d72:	624b      	str	r3, [r1, #36]	; 0x24
}
    6d74:	e00c      	b.n	6d90 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    6d76:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    6d7a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    6d7e:	42be      	cmp	r6, r7
    6d80:	d00e      	beq.n	6da0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6d82:	42b7      	cmp	r7, r6
    6d84:	dd0c      	ble.n	6da0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    6d86:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6d88:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    6d8c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6d8e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6d90:	2001      	movs	r0, #1
    6d92:	f7ff fd9b 	bl	68cc <update_cache>
    6d96:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    6d98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6d9c:	f7fc bf66 	b.w	3c6c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6da0:	42a2      	cmp	r2, r4
    6da2:	d0e3      	beq.n	6d6c <z_impl_k_yield+0x3c>
    6da4:	6812      	ldr	r2, [r2, #0]
    6da6:	e7e0      	b.n	6d6a <z_impl_k_yield+0x3a>
    6da8:	20001624 	.word	0x20001624

00006dac <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6dac:	ea50 0301 	orrs.w	r3, r0, r1
{
    6db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6db4:	4605      	mov	r5, r0
    6db6:	460e      	mov	r6, r1
	if (ticks == 0) {
    6db8:	d103      	bne.n	6dc2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    6dba:	f7ff ffb9 	bl	6d30 <z_impl_k_yield>
		k_yield();
		return 0;
    6dbe:	2000      	movs	r0, #0
    6dc0:	e02c      	b.n	6e1c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    6dc2:	1c83      	adds	r3, r0, #2
    6dc4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    6dc8:	db2a      	blt.n	6e20 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6dca:	f003 fcf3 	bl	a7b4 <sys_clock_tick_get_32>
    6dce:	182c      	adds	r4, r5, r0
    6dd0:	f04f 0320 	mov.w	r3, #32
    6dd4:	f3ef 8811 	mrs	r8, BASEPRI
    6dd8:	f383 8812 	msr	BASEPRI_MAX, r3
    6ddc:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6de0:	4f11      	ldr	r7, [pc, #68]	; (6e28 <z_tick_sleep+0x7c>)
    6de2:	4b12      	ldr	r3, [pc, #72]	; (6e2c <z_tick_sleep+0x80>)
    6de4:	68b8      	ldr	r0, [r7, #8]
    6de6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6de8:	f7ff fdfc 	bl	69e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6dec:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6dee:	4910      	ldr	r1, [pc, #64]	; (6e30 <z_tick_sleep+0x84>)
    6df0:	462a      	mov	r2, r5
    6df2:	4633      	mov	r3, r6
    6df4:	3018      	adds	r0, #24
    6df6:	f000 f91b 	bl	7030 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6dfa:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6dfc:	7b53      	ldrb	r3, [r2, #13]
    6dfe:	f043 0310 	orr.w	r3, r3, #16
    6e02:	7353      	strb	r3, [r2, #13]
    6e04:	4640      	mov	r0, r8
    6e06:	f7fc ff31 	bl	3c6c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6e0a:	f003 fcd3 	bl	a7b4 <sys_clock_tick_get_32>
    6e0e:	1a20      	subs	r0, r4, r0
    6e10:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6e14:	2801      	cmp	r0, #1
    6e16:	f173 0300 	sbcs.w	r3, r3, #0
    6e1a:	dbd0      	blt.n	6dbe <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    6e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6e20:	f06f 0401 	mvn.w	r4, #1
    6e24:	1a24      	subs	r4, r4, r0
    6e26:	e7d3      	b.n	6dd0 <z_tick_sleep+0x24>
    6e28:	20001624 	.word	0x20001624
    6e2c:	20001650 	.word	0x20001650
    6e30:	0000a5a9 	.word	0x0000a5a9

00006e34 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6e34:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    6e38:	bf08      	it	eq
    6e3a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    6e3e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6e40:	d106      	bne.n	6e50 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    6e42:	4b08      	ldr	r3, [pc, #32]	; (6e64 <z_impl_k_sleep+0x30>)
    6e44:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6e46:	f7ff ff05 	bl	6c54 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6e4e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6e50:	f7ff ffac 	bl	6dac <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    6e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6e58:	fb80 0303 	smull	r0, r3, r0, r3
    6e5c:	0bc0      	lsrs	r0, r0, #15
    6e5e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    6e62:	e7f4      	b.n	6e4e <z_impl_k_sleep+0x1a>
    6e64:	20001624 	.word	0x20001624

00006e68 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6e68:	4b01      	ldr	r3, [pc, #4]	; (6e70 <z_impl_z_current_get+0x8>)
    6e6a:	6898      	ldr	r0, [r3, #8]
    6e6c:	4770      	bx	lr
    6e6e:	bf00      	nop
    6e70:	20001624 	.word	0x20001624

00006e74 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e78:	4604      	mov	r4, r0
    6e7a:	f04f 0320 	mov.w	r3, #32
    6e7e:	f3ef 8611 	mrs	r6, BASEPRI
    6e82:	f383 8812 	msr	BASEPRI_MAX, r3
    6e86:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    6e8a:	7b03      	ldrb	r3, [r0, #12]
    6e8c:	07d9      	lsls	r1, r3, #31
    6e8e:	d50b      	bpl.n	6ea8 <z_thread_abort+0x34>
	__asm__ volatile(
    6e90:	f386 8811 	msr	BASEPRI, r6
    6e94:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    6e98:	4040      	eors	r0, r0
    6e9a:	f380 8811 	msr	BASEPRI, r0
    6e9e:	f04f 0004 	mov.w	r0, #4
    6ea2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6ea8:	7b43      	ldrb	r3, [r0, #13]
    6eaa:	071a      	lsls	r2, r3, #28
    6eac:	d504      	bpl.n	6eb8 <z_thread_abort+0x44>
    6eae:	f386 8811 	msr	BASEPRI, r6
    6eb2:	f3bf 8f6f 	isb	sy
    6eb6:	e7f5      	b.n	6ea4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6eb8:	f023 0220 	bic.w	r2, r3, #32
    6ebc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6ec0:	09d2      	lsrs	r2, r2, #7
    6ec2:	d123      	bne.n	6f0c <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6ec4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    6ec6:	68a3      	ldr	r3, [r4, #8]
    6ec8:	b113      	cbz	r3, 6ed0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    6eca:	4620      	mov	r0, r4
    6ecc:	f003 fb59 	bl	a582 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6ed0:	f104 0018 	add.w	r0, r4, #24
    6ed4:	f003 fc2c 	bl	a730 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6ed8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6edc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6ee0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ee2:	42bd      	cmp	r5, r7
    6ee4:	d000      	beq.n	6ee8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6ee6:	b9cd      	cbnz	r5, 6f1c <z_thread_abort+0xa8>
		update_cache(1);
    6ee8:	2001      	movs	r0, #1
    6eea:	f7ff fcef 	bl	68cc <update_cache>
		z_thread_monitor_exit(thread);
    6eee:	4620      	mov	r0, r4
    6ef0:	f7ff fa48 	bl	6384 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    6ef4:	4b10      	ldr	r3, [pc, #64]	; (6f38 <z_thread_abort+0xc4>)
    6ef6:	689b      	ldr	r3, [r3, #8]
    6ef8:	42a3      	cmp	r3, r4
    6efa:	d1d8      	bne.n	6eae <z_thread_abort+0x3a>
    6efc:	f3ef 8305 	mrs	r3, IPSR
    6f00:	2b00      	cmp	r3, #0
    6f02:	d1d4      	bne.n	6eae <z_thread_abort+0x3a>
    6f04:	4630      	mov	r0, r6
    6f06:	f7fc feb1 	bl	3c6c <arch_swap>
	return ret;
    6f0a:	e7d0      	b.n	6eae <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6f0c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6f10:	f043 0308 	orr.w	r3, r3, #8
    6f14:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6f16:	f003 fb2c 	bl	a572 <sys_dlist_remove>
}
    6f1a:	e7d4      	b.n	6ec6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    6f1c:	4628      	mov	r0, r5
    6f1e:	f003 fb30 	bl	a582 <unpend_thread_no_timeout>
    6f22:	f105 0018 	add.w	r0, r5, #24
    6f26:	f003 fc03 	bl	a730 <z_abort_timeout>
    6f2a:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    6f2e:	4628      	mov	r0, r5
    6f30:	f7ff fd24 	bl	697c <ready_thread>
    6f34:	e7d4      	b.n	6ee0 <z_thread_abort+0x6c>
    6f36:	bf00      	nop
    6f38:	20001624 	.word	0x20001624

00006f3c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6f3c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6f3e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6f42:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6f44:	e9cd 6700 	strd	r6, r7, [sp]
    6f48:	f7ff fdf0 	bl	6b2c <z_pend_curr>

	if (data != NULL) {
    6f4c:	b11c      	cbz	r4, 6f56 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6f4e:	4b03      	ldr	r3, [pc, #12]	; (6f5c <z_sched_wait+0x20>)
    6f50:	689b      	ldr	r3, [r3, #8]
    6f52:	695b      	ldr	r3, [r3, #20]
    6f54:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6f56:	b002      	add	sp, #8
    6f58:	bdd0      	pop	{r4, r6, r7, pc}
    6f5a:	bf00      	nop
    6f5c:	20001624 	.word	0x20001624

00006f60 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6f60:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6f62:	4806      	ldr	r0, [pc, #24]	; (6f7c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6f64:	4a06      	ldr	r2, [pc, #24]	; (6f80 <z_data_copy+0x20>)
    6f66:	4907      	ldr	r1, [pc, #28]	; (6f84 <z_data_copy+0x24>)
    6f68:	1a12      	subs	r2, r2, r0
    6f6a:	f003 fa81 	bl	a470 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6f72:	4a05      	ldr	r2, [pc, #20]	; (6f88 <z_data_copy+0x28>)
    6f74:	4905      	ldr	r1, [pc, #20]	; (6f8c <z_data_copy+0x2c>)
    6f76:	4806      	ldr	r0, [pc, #24]	; (6f90 <z_data_copy+0x30>)
    6f78:	f003 ba7a 	b.w	a470 <z_early_memcpy>
    6f7c:	20000000 	.word	0x20000000
    6f80:	20000384 	.word	0x20000384
    6f84:	0000d5f4 	.word	0x0000d5f4
    6f88:	00000000 	.word	0x00000000
    6f8c:	0000d5f4 	.word	0x0000d5f4
    6f90:	20000000 	.word	0x20000000

00006f94 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6f94:	4b03      	ldr	r3, [pc, #12]	; (6fa4 <elapsed+0x10>)
    6f96:	681b      	ldr	r3, [r3, #0]
    6f98:	b90b      	cbnz	r3, 6f9e <elapsed+0xa>
    6f9a:	f7fe ba05 	b.w	53a8 <sys_clock_elapsed>
}
    6f9e:	2000      	movs	r0, #0
    6fa0:	4770      	bx	lr
    6fa2:	bf00      	nop
    6fa4:	2000165c 	.word	0x2000165c

00006fa8 <next_timeout>:

static int32_t next_timeout(void)
{
    6fa8:	b510      	push	{r4, lr}
	return list->head == list;
    6faa:	4b11      	ldr	r3, [pc, #68]	; (6ff0 <next_timeout+0x48>)
    6fac:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fae:	429c      	cmp	r4, r3
    6fb0:	d10a      	bne.n	6fc8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6fb2:	f7ff ffef 	bl	6f94 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    6fb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6fba:	4b0e      	ldr	r3, [pc, #56]	; (6ff4 <next_timeout+0x4c>)
    6fbc:	691b      	ldr	r3, [r3, #16]
    6fbe:	b113      	cbz	r3, 6fc6 <next_timeout+0x1e>
    6fc0:	4298      	cmp	r0, r3
    6fc2:	bfa8      	it	ge
    6fc4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6fc6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    6fc8:	f7ff ffe4 	bl	6f94 <elapsed>
	if ((to == NULL) ||
    6fcc:	2c00      	cmp	r4, #0
    6fce:	d0f2      	beq.n	6fb6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6fd0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6fd4:	1a1b      	subs	r3, r3, r0
    6fd6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    6fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6fde:	f172 0100 	sbcs.w	r1, r2, #0
    6fe2:	dae8      	bge.n	6fb6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    6fe4:	2a00      	cmp	r2, #0
    6fe6:	bfac      	ite	ge
    6fe8:	4618      	movge	r0, r3
    6fea:	2000      	movlt	r0, #0
    6fec:	e7e5      	b.n	6fba <next_timeout+0x12>
    6fee:	bf00      	nop
    6ff0:	20000204 	.word	0x20000204
    6ff4:	20001624 	.word	0x20001624

00006ff8 <remove_timeout>:
{
    6ff8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6ffa:	b170      	cbz	r0, 701a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6ffc:	4b0b      	ldr	r3, [pc, #44]	; (702c <remove_timeout+0x34>)
    6ffe:	685b      	ldr	r3, [r3, #4]
    7000:	4298      	cmp	r0, r3
    7002:	d00a      	beq.n	701a <remove_timeout+0x22>
    7004:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    7006:	b143      	cbz	r3, 701a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7008:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    700c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7010:	1912      	adds	r2, r2, r4
    7012:	eb41 0105 	adc.w	r1, r1, r5
    7016:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    701a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    701e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7020:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7022:	2300      	movs	r3, #0
	node->prev = NULL;
    7024:	e9c0 3300 	strd	r3, r3, [r0]
}
    7028:	bd30      	pop	{r4, r5, pc}
    702a:	bf00      	nop
    702c:	20000204 	.word	0x20000204

00007030 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7034:	bf08      	it	eq
    7036:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    703a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    703c:	4604      	mov	r4, r0
    703e:	461d      	mov	r5, r3
    7040:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7042:	d061      	beq.n	7108 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7044:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    7046:	f04f 0320 	mov.w	r3, #32
    704a:	f3ef 8711 	mrs	r7, BASEPRI
    704e:	f383 8812 	msr	BASEPRI_MAX, r3
    7052:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7056:	3201      	adds	r2, #1
    7058:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    705c:	da24      	bge.n	70a8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    705e:	4930      	ldr	r1, [pc, #192]	; (7120 <z_add_timeout+0xf0>)
    7060:	e9d1 2000 	ldrd	r2, r0, [r1]
    7064:	f06f 0301 	mvn.w	r3, #1
    7068:	1a9b      	subs	r3, r3, r2
    706a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    706e:	eb62 0000 	sbc.w	r0, r2, r0
    7072:	1b9e      	subs	r6, r3, r6
    7074:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    7078:	2e01      	cmp	r6, #1
    707a:	f170 0300 	sbcs.w	r3, r0, #0
    707e:	da01      	bge.n	7084 <z_add_timeout+0x54>
    7080:	2601      	movs	r6, #1
    7082:	2000      	movs	r0, #0
    7084:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    7088:	4e26      	ldr	r6, [pc, #152]	; (7124 <z_add_timeout+0xf4>)
    708a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    708e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7090:	45b4      	cmp	ip, r6
    7092:	bf08      	it	eq
    7094:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    7098:	f1bc 0f00 	cmp.w	ip, #0
    709c:	d10d      	bne.n	70ba <z_add_timeout+0x8a>
	node->prev = tail;
    709e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    70a2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    70a4:	6074      	str	r4, [r6, #4]
}
    70a6:	e01c      	b.n	70e2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    70a8:	f7ff ff74 	bl	6f94 <elapsed>
    70ac:	3601      	adds	r6, #1
    70ae:	f145 0500 	adc.w	r5, r5, #0
    70b2:	1836      	adds	r6, r6, r0
    70b4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    70b8:	e7e4      	b.n	7084 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    70ba:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    70be:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    70c2:	4293      	cmp	r3, r2
    70c4:	eb71 0e00 	sbcs.w	lr, r1, r0
    70c8:	da1f      	bge.n	710a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    70ca:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    70cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    70d0:	eb60 0001 	sbc.w	r0, r0, r1
    70d4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    70d8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    70dc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    70de:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    70e2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70e4:	42b3      	cmp	r3, r6
    70e6:	d00b      	beq.n	7100 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    70e8:	429c      	cmp	r4, r3
    70ea:	d109      	bne.n	7100 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    70ec:	f7ff ff5c 	bl	6fa8 <next_timeout>

			if (next_time == 0 ||
    70f0:	b118      	cbz	r0, 70fa <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    70f2:	4b0d      	ldr	r3, [pc, #52]	; (7128 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    70f4:	691b      	ldr	r3, [r3, #16]
    70f6:	4283      	cmp	r3, r0
    70f8:	d002      	beq.n	7100 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    70fa:	2100      	movs	r1, #0
    70fc:	f7fe f892 	bl	5224 <sys_clock_set_timeout>
	__asm__ volatile(
    7100:	f387 8811 	msr	BASEPRI, r7
    7104:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    710a:	1a9b      	subs	r3, r3, r2
    710c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    7110:	45ac      	cmp	ip, r5
    7112:	e9c4 3104 	strd	r3, r1, [r4, #16]
    7116:	d0c2      	beq.n	709e <z_add_timeout+0x6e>
    7118:	f8dc c000 	ldr.w	ip, [ip]
    711c:	e7bc      	b.n	7098 <z_add_timeout+0x68>
    711e:	bf00      	nop
    7120:	20000698 	.word	0x20000698
    7124:	20000204 	.word	0x20000204
    7128:	20001624 	.word	0x20001624

0000712c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7130:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7132:	f7ff fcb9 	bl	6aa8 <z_time_slice>
	__asm__ volatile(
    7136:	f04f 0320 	mov.w	r3, #32
    713a:	f3ef 8611 	mrs	r6, BASEPRI
    713e:	f383 8812 	msr	BASEPRI_MAX, r3
    7142:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    7146:	4f23      	ldr	r7, [pc, #140]	; (71d4 <sys_clock_announce+0xa8>)
	return list->head == list;
    7148:	f8df 808c 	ldr.w	r8, [pc, #140]	; 71d8 <sys_clock_announce+0xac>
    714c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    7150:	4a22      	ldr	r2, [pc, #136]	; (71dc <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    7152:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7154:	4540      	cmp	r0, r8
		curr_tick += dt;
    7156:	e9d2 3e00 	ldrd	r3, lr, [r2]
    715a:	ea4f 71e4 	mov.w	r1, r4, asr #31
    715e:	d00b      	beq.n	7178 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7160:	b150      	cbz	r0, 7178 <sys_clock_announce+0x4c>
    7162:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    7166:	42ac      	cmp	r4, r5
    7168:	eb71 090c 	sbcs.w	r9, r1, ip
    716c:	da16      	bge.n	719c <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    716e:	1b2d      	subs	r5, r5, r4
    7170:	eb6c 0c01 	sbc.w	ip, ip, r1
    7174:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    7178:	18e3      	adds	r3, r4, r3
    717a:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    717e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7180:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    7184:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7186:	f7ff ff0f 	bl	6fa8 <next_timeout>
    718a:	4621      	mov	r1, r4
    718c:	f7fe f84a 	bl	5224 <sys_clock_set_timeout>
	__asm__ volatile(
    7190:	f386 8811 	msr	BASEPRI, r6
    7194:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    719c:	18eb      	adds	r3, r5, r3
    719e:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    71a2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    71a6:	2200      	movs	r2, #0
    71a8:	2300      	movs	r3, #0
    71aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    71ae:	f7ff ff23 	bl	6ff8 <remove_timeout>
    71b2:	f386 8811 	msr	BASEPRI, r6
    71b6:	f3bf 8f6f 	isb	sy
		t->fn(t);
    71ba:	6883      	ldr	r3, [r0, #8]
    71bc:	4798      	blx	r3
	__asm__ volatile(
    71be:	f04f 0320 	mov.w	r3, #32
    71c2:	f3ef 8611 	mrs	r6, BASEPRI
    71c6:	f383 8812 	msr	BASEPRI_MAX, r3
    71ca:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    71ce:	683c      	ldr	r4, [r7, #0]
    71d0:	1b64      	subs	r4, r4, r5
    71d2:	e7bb      	b.n	714c <sys_clock_announce+0x20>
    71d4:	2000165c 	.word	0x2000165c
    71d8:	20000204 	.word	0x20000204
    71dc:	20000698 	.word	0x20000698

000071e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    71e0:	b510      	push	{r4, lr}
    71e2:	f04f 0320 	mov.w	r3, #32
    71e6:	f3ef 8411 	mrs	r4, BASEPRI
    71ea:	f383 8812 	msr	BASEPRI_MAX, r3
    71ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    71f2:	f7ff fecf 	bl	6f94 <elapsed>
    71f6:	4a06      	ldr	r2, [pc, #24]	; (7210 <sys_clock_tick_get+0x30>)
    71f8:	4603      	mov	r3, r0
    71fa:	e9d2 0100 	ldrd	r0, r1, [r2]
    71fe:	1818      	adds	r0, r3, r0
    7200:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    7204:	f384 8811 	msr	BASEPRI, r4
    7208:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    720c:	bd10      	pop	{r4, pc}
    720e:	bf00      	nop
    7210:	20000698 	.word	0x20000698

00007214 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    7214:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7218:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    721a:	4b29      	ldr	r3, [pc, #164]	; (72c0 <z_impl_k_poll+0xac>)
    721c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    721e:	2301      	movs	r3, #1
    7220:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    7224:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    7228:	ea52 0305 	orrs.w	r3, r2, r5
{
    722c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    722e:	bf0c      	ite	eq
    7230:	2301      	moveq	r3, #1
    7232:	2300      	movne	r3, #0
    7234:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    7238:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    723a:	f003 faf6 	bl	a82a <register_events>
    723e:	4681      	mov	r9, r0
	__asm__ volatile(
    7240:	f04f 0320 	mov.w	r3, #32
    7244:	f3ef 8a11 	mrs	sl, BASEPRI
    7248:	f383 8812 	msr	BASEPRI_MAX, r3
    724c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    7250:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    7254:	b964      	cbnz	r4, 7270 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    7256:	4601      	mov	r1, r0
    7258:	4652      	mov	r2, sl
    725a:	4640      	mov	r0, r8
    725c:	f003 fbb6 	bl	a9cc <clear_event_registrations>
	__asm__ volatile(
    7260:	f38a 8811 	msr	BASEPRI, sl
    7264:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    7268:	4620      	mov	r0, r4
    726a:	b002      	add	sp, #8
    726c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    7270:	2300      	movs	r3, #0
    7272:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7276:	ea56 0305 	orrs.w	r3, r6, r5
    727a:	d106      	bne.n	728a <z_impl_k_poll+0x76>
    727c:	f38a 8811 	msr	BASEPRI, sl
    7280:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    7284:	f06f 040a 	mvn.w	r4, #10
    7288:	e7ee      	b.n	7268 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    728a:	e9cd 6500 	strd	r6, r5, [sp]
    728e:	4a0d      	ldr	r2, [pc, #52]	; (72c4 <z_impl_k_poll+0xb0>)
    7290:	480d      	ldr	r0, [pc, #52]	; (72c8 <z_impl_k_poll+0xb4>)
    7292:	4651      	mov	r1, sl
    7294:	f7ff fc4a 	bl	6b2c <z_pend_curr>
    7298:	4604      	mov	r4, r0
	__asm__ volatile(
    729a:	f04f 0320 	mov.w	r3, #32
    729e:	f3ef 8511 	mrs	r5, BASEPRI
    72a2:	f383 8812 	msr	BASEPRI_MAX, r3
    72a6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    72aa:	462a      	mov	r2, r5
    72ac:	4649      	mov	r1, r9
    72ae:	4640      	mov	r0, r8
    72b0:	f003 fb8c 	bl	a9cc <clear_event_registrations>
	__asm__ volatile(
    72b4:	f385 8811 	msr	BASEPRI, r5
    72b8:	f3bf 8f6f 	isb	sy
	return swap_rc;
    72bc:	e7d4      	b.n	7268 <z_impl_k_poll+0x54>
    72be:	bf00      	nop
    72c0:	20001624 	.word	0x20001624
    72c4:	2000020c 	.word	0x2000020c
    72c8:	20001ce4 	.word	0x20001ce4

000072cc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    72cc:	b538      	push	{r3, r4, r5, lr}
    72ce:	4603      	mov	r3, r0
	__asm__ volatile(
    72d0:	f04f 0220 	mov.w	r2, #32
    72d4:	f3ef 8511 	mrs	r5, BASEPRI
    72d8:	f382 8812 	msr	BASEPRI_MAX, r2
    72dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    72e0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    72e2:	2101      	movs	r1, #1
    72e4:	6081      	str	r1, [r0, #8]
	return list->head == list;
    72e6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    72e8:	4283      	cmp	r3, r0
    72ea:	d106      	bne.n	72fa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    72ec:	f385 8811 	msr	BASEPRI, r5
    72f0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    72f4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    72f6:	4620      	mov	r0, r4
    72f8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    72fa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    72fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7300:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7302:	2300      	movs	r3, #0
	node->prev = NULL;
    7304:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7308:	f003 fb06 	bl	a918 <signal_poll_event>
	z_reschedule(&lock, key);
    730c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    730e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    7310:	4801      	ldr	r0, [pc, #4]	; (7318 <z_impl_k_poll_signal_raise+0x4c>)
    7312:	f7ff fc6f 	bl	6bf4 <z_reschedule>
	return rc;
    7316:	e7ee      	b.n	72f6 <z_impl_k_poll_signal_raise+0x2a>
    7318:	20001ce4 	.word	0x20001ce4

0000731c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    731c:	4b01      	ldr	r3, [pc, #4]	; (7324 <k_thread_system_pool_assign+0x8>)
    731e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
}
    7322:	4770      	bx	lr
    7324:	200002e4 	.word	0x200002e4

00007328 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    7328:	4801      	ldr	r0, [pc, #4]	; (7330 <boot_banner+0x8>)
    732a:	f001 bb29 	b.w	8980 <printk>
    732e:	bf00      	nop
    7330:	0000d487 	.word	0x0000d487

00007334 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    7334:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7336:	4c06      	ldr	r4, [pc, #24]	; (7350 <statics_init+0x1c>)
    7338:	4d06      	ldr	r5, [pc, #24]	; (7354 <statics_init+0x20>)
    733a:	42ac      	cmp	r4, r5
    733c:	d301      	bcc.n	7342 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    733e:	2000      	movs	r0, #0
    7340:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    7342:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    7346:	4620      	mov	r0, r4
    7348:	f003 fb99 	bl	aa7e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    734c:	3414      	adds	r4, #20
    734e:	e7f4      	b.n	733a <statics_init+0x6>
    7350:	200002e4 	.word	0x200002e4
    7354:	200002f8 	.word	0x200002f8

00007358 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    7358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    735a:	4b09      	ldr	r3, [pc, #36]	; (7380 <k_sys_work_q_init+0x28>)
    735c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    735e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    7360:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    7362:	9300      	str	r3, [sp, #0]
    7364:	4907      	ldr	r1, [pc, #28]	; (7384 <k_sys_work_q_init+0x2c>)
    7366:	4808      	ldr	r0, [pc, #32]	; (7388 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    7368:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    736c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7370:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7374:	f000 f900 	bl	7578 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    7378:	4620      	mov	r0, r4
    737a:	b004      	add	sp, #16
    737c:	bd10      	pop	{r4, pc}
    737e:	bf00      	nop
    7380:	0000d4b5 	.word	0x0000d4b5
    7384:	20003b80 	.word	0x20003b80
    7388:	200006a0 	.word	0x200006a0

0000738c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    7390:	4e4a      	ldr	r6, [pc, #296]	; (74bc <work_queue_main+0x130>)
    7392:	b085      	sub	sp, #20
    7394:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    7396:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    739a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    739e:	f04f 0320 	mov.w	r3, #32
    73a2:	f3ef 8711 	mrs	r7, BASEPRI
    73a6:	f383 8812 	msr	BASEPRI_MAX, r3
    73aa:	f3bf 8f6f 	isb	sy
    73ae:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    73b2:	b98d      	cbnz	r5, 73d8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    73b4:	2102      	movs	r1, #2
    73b6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    73ba:	f003 fb68 	bl	aa8e <flag_test_and_clear>
    73be:	2800      	cmp	r0, #0
    73c0:	d143      	bne.n	744a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    73c2:	2300      	movs	r3, #0
    73c4:	e9cd 8900 	strd	r8, r9, [sp]
    73c8:	9302      	str	r3, [sp, #8]
    73ca:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    73ce:	4639      	mov	r1, r7
    73d0:	483b      	ldr	r0, [pc, #236]	; (74c0 <work_queue_main+0x134>)
    73d2:	f7ff fdb3 	bl	6f3c <z_sched_wait>
			continue;
    73d6:	e7e2      	b.n	739e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    73d8:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    73dc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    73de:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    73e2:	4295      	cmp	r5, r2
	list->tail = node;
    73e4:	bf08      	it	eq
    73e6:	f8c4 30bc 	streq.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    73ea:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    73ee:	f043 0302 	orr.w	r3, r3, #2
    73f2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    73f6:	68eb      	ldr	r3, [r5, #12]
    73f8:	f023 0304 	bic.w	r3, r3, #4
    73fc:	f043 0301 	orr.w	r3, r3, #1
    7400:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    7402:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    7404:	f387 8811 	msr	BASEPRI, r7
    7408:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    740c:	4628      	mov	r0, r5
    740e:	4798      	blx	r3
	__asm__ volatile(
    7410:	f04f 0320 	mov.w	r3, #32
    7414:	f3ef 8b11 	mrs	fp, BASEPRI
    7418:	f383 8812 	msr	BASEPRI_MAX, r3
    741c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7420:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7422:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7424:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7428:	d419      	bmi.n	745e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    742a:	60ea      	str	r2, [r5, #12]
    742c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    7430:	f023 0302 	bic.w	r3, r3, #2
    7434:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    7438:	f38b 8811 	msr	BASEPRI, fp
    743c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    7440:	05db      	lsls	r3, r3, #23
    7442:	d4ac      	bmi.n	739e <work_queue_main+0x12>
	z_impl_k_yield();
    7444:	f7ff fc74 	bl	6d30 <z_impl_k_yield>
}
    7448:	e7a9      	b.n	739e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    744a:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    744e:	2200      	movs	r2, #0
    7450:	2101      	movs	r1, #1
    7452:	4628      	mov	r0, r5
    7454:	f003 f948 	bl	a6e8 <z_sched_wake>
    7458:	2800      	cmp	r0, #0
    745a:	d1f8      	bne.n	744e <work_queue_main+0xc2>
    745c:	e7b1      	b.n	73c2 <work_queue_main+0x36>
	return list->head;
    745e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    7460:	f023 0303 	bic.w	r3, r3, #3
    7464:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7466:	2800      	cmp	r0, #0
    7468:	d0e0      	beq.n	742c <work_queue_main+0xa0>
	return node->next;
    746a:	2700      	movs	r7, #0
    746c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    7470:	463b      	mov	r3, r7
    7472:	2800      	cmp	r0, #0
    7474:	d0da      	beq.n	742c <work_queue_main+0xa0>
		if (wc->work == work) {
    7476:	6842      	ldr	r2, [r0, #4]
    7478:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    747a:	4601      	mov	r1, r0
		if (wc->work == work) {
    747c:	d10c      	bne.n	7498 <work_queue_main+0x10c>
	return node->next;
    747e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    7480:	b99f      	cbnz	r7, 74aa <work_queue_main+0x11e>
    7482:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    7484:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    7486:	4282      	cmp	r2, r0
    7488:	d100      	bne.n	748c <work_queue_main+0x100>
	list->tail = node;
    748a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    748c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    7490:	f7ff f9ba 	bl	6808 <z_impl_k_sem_give>
}
    7494:	4639      	mov	r1, r7
    7496:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7498:	f1ba 0f00 	cmp.w	sl, #0
    749c:	d00b      	beq.n	74b6 <work_queue_main+0x12a>
	return node->next;
    749e:	f8da 2000 	ldr.w	r2, [sl]
    74a2:	4650      	mov	r0, sl
    74a4:	460f      	mov	r7, r1
    74a6:	4692      	mov	sl, r2
    74a8:	e7e3      	b.n	7472 <work_queue_main+0xe6>
	parent->next = child;
    74aa:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    74ac:	6872      	ldr	r2, [r6, #4]
    74ae:	4282      	cmp	r2, r0
	list->tail = node;
    74b0:	bf08      	it	eq
    74b2:	6077      	streq	r7, [r6, #4]
}
    74b4:	e7ea      	b.n	748c <work_queue_main+0x100>
    74b6:	4652      	mov	r2, sl
    74b8:	e7f3      	b.n	74a2 <work_queue_main+0x116>
    74ba:	bf00      	nop
    74bc:	20001660 	.word	0x20001660
    74c0:	20001ce4 	.word	0x20001ce4

000074c4 <submit_to_queue_locked>:
{
    74c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    74c6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    74c8:	079a      	lsls	r2, r3, #30
{
    74ca:	4604      	mov	r4, r0
    74cc:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    74ce:	f3c3 0640 	ubfx	r6, r3, #1, #1
    74d2:	d42c      	bmi.n	752e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    74d4:	075b      	lsls	r3, r3, #29
    74d6:	d41a      	bmi.n	750e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    74d8:	680b      	ldr	r3, [r1, #0]
    74da:	b90b      	cbnz	r3, 74e0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    74dc:	6883      	ldr	r3, [r0, #8]
    74de:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    74e0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    74e2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    74e4:	bf44      	itt	mi
    74e6:	68a3      	ldrmi	r3, [r4, #8]
    74e8:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    74ea:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    74ec:	bf4c      	ite	mi
    74ee:	2602      	movmi	r6, #2
		ret = 1;
    74f0:	2601      	movpl	r6, #1
	if (queue == NULL) {
    74f2:	2d00      	cmp	r5, #0
    74f4:	d03a      	beq.n	756c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    74f6:	4b1f      	ldr	r3, [pc, #124]	; (7574 <submit_to_queue_locked+0xb0>)
    74f8:	689b      	ldr	r3, [r3, #8]
    74fa:	42ab      	cmp	r3, r5
    74fc:	d00a      	beq.n	7514 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    74fe:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7502:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7504:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7508:	d414      	bmi.n	7534 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    750a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    750e:	2300      	movs	r3, #0
    7510:	603b      	str	r3, [r7, #0]
	return ret;
    7512:	e025      	b.n	7560 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7514:	f002 fffc 	bl	a510 <k_is_in_isr>
    7518:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    751c:	2800      	cmp	r0, #0
    751e:	d1f0      	bne.n	7502 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7520:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7522:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7526:	d5f0      	bpl.n	750a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    7528:	b152      	cbz	r2, 7540 <submit_to_queue_locked+0x7c>
    752a:	075b      	lsls	r3, r3, #29
    752c:	d408      	bmi.n	7540 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    752e:	f06f 060f 	mvn.w	r6, #15
    7532:	e7ec      	b.n	750e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    7534:	2a00      	cmp	r2, #0
    7536:	d1fa      	bne.n	752e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    7538:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    753c:	2b00      	cmp	r3, #0
    753e:	d1f6      	bne.n	752e <submit_to_queue_locked+0x6a>
	parent->next = child;
    7540:	2300      	movs	r3, #0
    7542:	6023      	str	r3, [r4, #0]
	return list->tail;
    7544:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    7548:	b963      	cbnz	r3, 7564 <submit_to_queue_locked+0xa0>
	list->head = node;
    754a:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    754e:	4628      	mov	r0, r5
    7550:	f003 faa8 	bl	aaa4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    7554:	68e3      	ldr	r3, [r4, #12]
    7556:	f043 0304 	orr.w	r3, r3, #4
    755a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    755c:	683b      	ldr	r3, [r7, #0]
    755e:	60a3      	str	r3, [r4, #8]
}
    7560:	4630      	mov	r0, r6
    7562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7564:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7566:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    756a:	e7f0      	b.n	754e <submit_to_queue_locked+0x8a>
		return -EINVAL;
    756c:	f06f 0615 	mvn.w	r6, #21
    7570:	e7cd      	b.n	750e <submit_to_queue_locked+0x4a>
    7572:	bf00      	nop
    7574:	20001624 	.word	0x20001624

00007578 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    7578:	b5f0      	push	{r4, r5, r6, r7, lr}
    757a:	b089      	sub	sp, #36	; 0x24
    757c:	4604      	mov	r4, r0
	list->head = NULL;
    757e:	2000      	movs	r0, #0
	list->tail = NULL;
    7580:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    7584:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    7586:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    758a:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    758e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    7592:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    7596:	b31d      	cbz	r5, 75e0 <k_work_queue_start+0x68>
    7598:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    759a:	2800      	cmp	r0, #0
    759c:	f240 1001 	movw	r0, #257	; 0x101
    75a0:	bf08      	it	eq
    75a2:	2001      	moveq	r0, #1
	*flagp = flags;
    75a4:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    75a8:	2000      	movs	r0, #0
    75aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    75ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    75b2:	e9cd 3003 	strd	r3, r0, [sp, #12]
    75b6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    75ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
    75be:	4b09      	ldr	r3, [pc, #36]	; (75e4 <k_work_queue_start+0x6c>)
    75c0:	9400      	str	r4, [sp, #0]
    75c2:	4620      	mov	r0, r4
    75c4:	f7fe ffc0 	bl	6548 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    75c8:	b125      	cbz	r5, 75d4 <k_work_queue_start+0x5c>
    75ca:	6829      	ldr	r1, [r5, #0]
    75cc:	b111      	cbz	r1, 75d4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    75ce:	4620      	mov	r0, r4
    75d0:	f7fe fef6 	bl	63c0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    75d4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    75d6:	b009      	add	sp, #36	; 0x24
    75d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    75dc:	f002 bfa0 	b.w	a520 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    75e0:	2001      	movs	r0, #1
    75e2:	e7df      	b.n	75a4 <k_work_queue_start+0x2c>
    75e4:	0000738d 	.word	0x0000738d

000075e8 <malloc>:
    75e8:	4b02      	ldr	r3, [pc, #8]	; (75f4 <malloc+0xc>)
    75ea:	4601      	mov	r1, r0
    75ec:	6818      	ldr	r0, [r3, #0]
    75ee:	f000 b84d 	b.w	768c <_malloc_r>
    75f2:	bf00      	nop
    75f4:	20000214 	.word	0x20000214

000075f8 <_free_r>:
    75f8:	b538      	push	{r3, r4, r5, lr}
    75fa:	4605      	mov	r5, r0
    75fc:	2900      	cmp	r1, #0
    75fe:	d041      	beq.n	7684 <_free_r+0x8c>
    7600:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7604:	1f0c      	subs	r4, r1, #4
    7606:	2b00      	cmp	r3, #0
    7608:	bfb8      	it	lt
    760a:	18e4      	addlt	r4, r4, r3
    760c:	f000 fab8 	bl	7b80 <__malloc_lock>
    7610:	4a1d      	ldr	r2, [pc, #116]	; (7688 <_free_r+0x90>)
    7612:	6813      	ldr	r3, [r2, #0]
    7614:	b933      	cbnz	r3, 7624 <_free_r+0x2c>
    7616:	6063      	str	r3, [r4, #4]
    7618:	6014      	str	r4, [r2, #0]
    761a:	4628      	mov	r0, r5
    761c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7620:	f000 bab4 	b.w	7b8c <__malloc_unlock>
    7624:	42a3      	cmp	r3, r4
    7626:	d908      	bls.n	763a <_free_r+0x42>
    7628:	6820      	ldr	r0, [r4, #0]
    762a:	1821      	adds	r1, r4, r0
    762c:	428b      	cmp	r3, r1
    762e:	bf01      	itttt	eq
    7630:	6819      	ldreq	r1, [r3, #0]
    7632:	685b      	ldreq	r3, [r3, #4]
    7634:	1809      	addeq	r1, r1, r0
    7636:	6021      	streq	r1, [r4, #0]
    7638:	e7ed      	b.n	7616 <_free_r+0x1e>
    763a:	461a      	mov	r2, r3
    763c:	685b      	ldr	r3, [r3, #4]
    763e:	b10b      	cbz	r3, 7644 <_free_r+0x4c>
    7640:	42a3      	cmp	r3, r4
    7642:	d9fa      	bls.n	763a <_free_r+0x42>
    7644:	6811      	ldr	r1, [r2, #0]
    7646:	1850      	adds	r0, r2, r1
    7648:	42a0      	cmp	r0, r4
    764a:	d10b      	bne.n	7664 <_free_r+0x6c>
    764c:	6820      	ldr	r0, [r4, #0]
    764e:	4401      	add	r1, r0
    7650:	1850      	adds	r0, r2, r1
    7652:	4283      	cmp	r3, r0
    7654:	6011      	str	r1, [r2, #0]
    7656:	d1e0      	bne.n	761a <_free_r+0x22>
    7658:	6818      	ldr	r0, [r3, #0]
    765a:	685b      	ldr	r3, [r3, #4]
    765c:	6053      	str	r3, [r2, #4]
    765e:	4408      	add	r0, r1
    7660:	6010      	str	r0, [r2, #0]
    7662:	e7da      	b.n	761a <_free_r+0x22>
    7664:	d902      	bls.n	766c <_free_r+0x74>
    7666:	230c      	movs	r3, #12
    7668:	602b      	str	r3, [r5, #0]
    766a:	e7d6      	b.n	761a <_free_r+0x22>
    766c:	6820      	ldr	r0, [r4, #0]
    766e:	1821      	adds	r1, r4, r0
    7670:	428b      	cmp	r3, r1
    7672:	bf04      	itt	eq
    7674:	6819      	ldreq	r1, [r3, #0]
    7676:	685b      	ldreq	r3, [r3, #4]
    7678:	6063      	str	r3, [r4, #4]
    767a:	bf04      	itt	eq
    767c:	1809      	addeq	r1, r1, r0
    767e:	6021      	streq	r1, [r4, #0]
    7680:	6054      	str	r4, [r2, #4]
    7682:	e7ca      	b.n	761a <_free_r+0x22>
    7684:	bd38      	pop	{r3, r4, r5, pc}
    7686:	bf00      	nop
    7688:	2000166c 	.word	0x2000166c

0000768c <_malloc_r>:
    768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    768e:	1ccd      	adds	r5, r1, #3
    7690:	f025 0503 	bic.w	r5, r5, #3
    7694:	3508      	adds	r5, #8
    7696:	2d0c      	cmp	r5, #12
    7698:	bf38      	it	cc
    769a:	250c      	movcc	r5, #12
    769c:	2d00      	cmp	r5, #0
    769e:	4606      	mov	r6, r0
    76a0:	db01      	blt.n	76a6 <_malloc_r+0x1a>
    76a2:	42a9      	cmp	r1, r5
    76a4:	d903      	bls.n	76ae <_malloc_r+0x22>
    76a6:	230c      	movs	r3, #12
    76a8:	6033      	str	r3, [r6, #0]
    76aa:	2000      	movs	r0, #0
    76ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76ae:	f000 fa67 	bl	7b80 <__malloc_lock>
    76b2:	4921      	ldr	r1, [pc, #132]	; (7738 <_malloc_r+0xac>)
    76b4:	680a      	ldr	r2, [r1, #0]
    76b6:	4614      	mov	r4, r2
    76b8:	b99c      	cbnz	r4, 76e2 <_malloc_r+0x56>
    76ba:	4f20      	ldr	r7, [pc, #128]	; (773c <_malloc_r+0xb0>)
    76bc:	683b      	ldr	r3, [r7, #0]
    76be:	b923      	cbnz	r3, 76ca <_malloc_r+0x3e>
    76c0:	4621      	mov	r1, r4
    76c2:	4630      	mov	r0, r6
    76c4:	f000 f854 	bl	7770 <_sbrk_r>
    76c8:	6038      	str	r0, [r7, #0]
    76ca:	4629      	mov	r1, r5
    76cc:	4630      	mov	r0, r6
    76ce:	f000 f84f 	bl	7770 <_sbrk_r>
    76d2:	1c43      	adds	r3, r0, #1
    76d4:	d123      	bne.n	771e <_malloc_r+0x92>
    76d6:	230c      	movs	r3, #12
    76d8:	6033      	str	r3, [r6, #0]
    76da:	4630      	mov	r0, r6
    76dc:	f000 fa56 	bl	7b8c <__malloc_unlock>
    76e0:	e7e3      	b.n	76aa <_malloc_r+0x1e>
    76e2:	6823      	ldr	r3, [r4, #0]
    76e4:	1b5b      	subs	r3, r3, r5
    76e6:	d417      	bmi.n	7718 <_malloc_r+0x8c>
    76e8:	2b0b      	cmp	r3, #11
    76ea:	d903      	bls.n	76f4 <_malloc_r+0x68>
    76ec:	6023      	str	r3, [r4, #0]
    76ee:	441c      	add	r4, r3
    76f0:	6025      	str	r5, [r4, #0]
    76f2:	e004      	b.n	76fe <_malloc_r+0x72>
    76f4:	6863      	ldr	r3, [r4, #4]
    76f6:	42a2      	cmp	r2, r4
    76f8:	bf0c      	ite	eq
    76fa:	600b      	streq	r3, [r1, #0]
    76fc:	6053      	strne	r3, [r2, #4]
    76fe:	4630      	mov	r0, r6
    7700:	f000 fa44 	bl	7b8c <__malloc_unlock>
    7704:	f104 000b 	add.w	r0, r4, #11
    7708:	1d23      	adds	r3, r4, #4
    770a:	f020 0007 	bic.w	r0, r0, #7
    770e:	1ac2      	subs	r2, r0, r3
    7710:	bf1c      	itt	ne
    7712:	1a1b      	subne	r3, r3, r0
    7714:	50a3      	strne	r3, [r4, r2]
    7716:	e7c9      	b.n	76ac <_malloc_r+0x20>
    7718:	4622      	mov	r2, r4
    771a:	6864      	ldr	r4, [r4, #4]
    771c:	e7cc      	b.n	76b8 <_malloc_r+0x2c>
    771e:	1cc4      	adds	r4, r0, #3
    7720:	f024 0403 	bic.w	r4, r4, #3
    7724:	42a0      	cmp	r0, r4
    7726:	d0e3      	beq.n	76f0 <_malloc_r+0x64>
    7728:	1a21      	subs	r1, r4, r0
    772a:	4630      	mov	r0, r6
    772c:	f000 f820 	bl	7770 <_sbrk_r>
    7730:	3001      	adds	r0, #1
    7732:	d1dd      	bne.n	76f0 <_malloc_r+0x64>
    7734:	e7cf      	b.n	76d6 <_malloc_r+0x4a>
    7736:	bf00      	nop
    7738:	2000166c 	.word	0x2000166c
    773c:	20001668 	.word	0x20001668

00007740 <iprintf>:
    7740:	b40f      	push	{r0, r1, r2, r3}
    7742:	4b0a      	ldr	r3, [pc, #40]	; (776c <iprintf+0x2c>)
    7744:	b513      	push	{r0, r1, r4, lr}
    7746:	681c      	ldr	r4, [r3, #0]
    7748:	b124      	cbz	r4, 7754 <iprintf+0x14>
    774a:	69a3      	ldr	r3, [r4, #24]
    774c:	b913      	cbnz	r3, 7754 <iprintf+0x14>
    774e:	4620      	mov	r0, r4
    7750:	f000 f998 	bl	7a84 <__sinit>
    7754:	ab05      	add	r3, sp, #20
    7756:	9a04      	ldr	r2, [sp, #16]
    7758:	68a1      	ldr	r1, [r4, #8]
    775a:	9301      	str	r3, [sp, #4]
    775c:	4620      	mov	r0, r4
    775e:	f000 fb17 	bl	7d90 <_vfiprintf_r>
    7762:	b002      	add	sp, #8
    7764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7768:	b004      	add	sp, #16
    776a:	4770      	bx	lr
    776c:	20000214 	.word	0x20000214

00007770 <_sbrk_r>:
    7770:	b538      	push	{r3, r4, r5, lr}
    7772:	4d06      	ldr	r5, [pc, #24]	; (778c <_sbrk_r+0x1c>)
    7774:	2300      	movs	r3, #0
    7776:	4604      	mov	r4, r0
    7778:	4608      	mov	r0, r1
    777a:	602b      	str	r3, [r5, #0]
    777c:	f7fc fde6 	bl	434c <_sbrk>
    7780:	1c43      	adds	r3, r0, #1
    7782:	d102      	bne.n	778a <_sbrk_r+0x1a>
    7784:	682b      	ldr	r3, [r5, #0]
    7786:	b103      	cbz	r3, 778a <_sbrk_r+0x1a>
    7788:	6023      	str	r3, [r4, #0]
    778a:	bd38      	pop	{r3, r4, r5, pc}
    778c:	20001670 	.word	0x20001670

00007790 <sniprintf>:
    7790:	b40c      	push	{r2, r3}
    7792:	b530      	push	{r4, r5, lr}
    7794:	4b17      	ldr	r3, [pc, #92]	; (77f4 <sniprintf+0x64>)
    7796:	1e0c      	subs	r4, r1, #0
    7798:	681d      	ldr	r5, [r3, #0]
    779a:	b09d      	sub	sp, #116	; 0x74
    779c:	da08      	bge.n	77b0 <sniprintf+0x20>
    779e:	238b      	movs	r3, #139	; 0x8b
    77a0:	602b      	str	r3, [r5, #0]
    77a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    77a6:	b01d      	add	sp, #116	; 0x74
    77a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    77ac:	b002      	add	sp, #8
    77ae:	4770      	bx	lr
    77b0:	f44f 7302 	mov.w	r3, #520	; 0x208
    77b4:	f8ad 3014 	strh.w	r3, [sp, #20]
    77b8:	bf14      	ite	ne
    77ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    77be:	4623      	moveq	r3, r4
    77c0:	9304      	str	r3, [sp, #16]
    77c2:	9307      	str	r3, [sp, #28]
    77c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    77c8:	9002      	str	r0, [sp, #8]
    77ca:	9006      	str	r0, [sp, #24]
    77cc:	f8ad 3016 	strh.w	r3, [sp, #22]
    77d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
    77d2:	ab21      	add	r3, sp, #132	; 0x84
    77d4:	a902      	add	r1, sp, #8
    77d6:	4628      	mov	r0, r5
    77d8:	9301      	str	r3, [sp, #4]
    77da:	f000 f9dd 	bl	7b98 <_svfiprintf_r>
    77de:	1c43      	adds	r3, r0, #1
    77e0:	bfbc      	itt	lt
    77e2:	238b      	movlt	r3, #139	; 0x8b
    77e4:	602b      	strlt	r3, [r5, #0]
    77e6:	2c00      	cmp	r4, #0
    77e8:	d0dd      	beq.n	77a6 <sniprintf+0x16>
    77ea:	9b02      	ldr	r3, [sp, #8]
    77ec:	2200      	movs	r2, #0
    77ee:	701a      	strb	r2, [r3, #0]
    77f0:	e7d9      	b.n	77a6 <sniprintf+0x16>
    77f2:	bf00      	nop
    77f4:	20000214 	.word	0x20000214

000077f8 <_strtol_l.constprop.0>:
    77f8:	2b24      	cmp	r3, #36	; 0x24
    77fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77fe:	4686      	mov	lr, r0
    7800:	4690      	mov	r8, r2
    7802:	d801      	bhi.n	7808 <_strtol_l.constprop.0+0x10>
    7804:	2b01      	cmp	r3, #1
    7806:	d106      	bne.n	7816 <_strtol_l.constprop.0+0x1e>
    7808:	f002 fa7e 	bl	9d08 <__errno>
    780c:	2316      	movs	r3, #22
    780e:	6003      	str	r3, [r0, #0]
    7810:	2000      	movs	r0, #0
    7812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7816:	4836      	ldr	r0, [pc, #216]	; (78f0 <_strtol_l.constprop.0+0xf8>)
    7818:	460d      	mov	r5, r1
    781a:	462a      	mov	r2, r5
    781c:	f815 4b01 	ldrb.w	r4, [r5], #1
    7820:	5d06      	ldrb	r6, [r0, r4]
    7822:	f016 0608 	ands.w	r6, r6, #8
    7826:	d1f8      	bne.n	781a <_strtol_l.constprop.0+0x22>
    7828:	2c2d      	cmp	r4, #45	; 0x2d
    782a:	d124      	bne.n	7876 <_strtol_l.constprop.0+0x7e>
    782c:	782c      	ldrb	r4, [r5, #0]
    782e:	2601      	movs	r6, #1
    7830:	1c95      	adds	r5, r2, #2
    7832:	bb2b      	cbnz	r3, 7880 <_strtol_l.constprop.0+0x88>
    7834:	2c30      	cmp	r4, #48	; 0x30
    7836:	d030      	beq.n	789a <_strtol_l.constprop.0+0xa2>
    7838:	230a      	movs	r3, #10
    783a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
    783e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    7842:	2200      	movs	r2, #0
    7844:	fbbc f9f3 	udiv	r9, ip, r3
    7848:	4610      	mov	r0, r2
    784a:	fb03 ca19 	mls	sl, r3, r9, ip
    784e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
    7852:	2f09      	cmp	r7, #9
    7854:	d828      	bhi.n	78a8 <_strtol_l.constprop.0+0xb0>
    7856:	463c      	mov	r4, r7
    7858:	42a3      	cmp	r3, r4
    785a:	dd34      	ble.n	78c6 <_strtol_l.constprop.0+0xce>
    785c:	1c57      	adds	r7, r2, #1
    785e:	d007      	beq.n	7870 <_strtol_l.constprop.0+0x78>
    7860:	4581      	cmp	r9, r0
    7862:	d32d      	bcc.n	78c0 <_strtol_l.constprop.0+0xc8>
    7864:	d101      	bne.n	786a <_strtol_l.constprop.0+0x72>
    7866:	45a2      	cmp	sl, r4
    7868:	db2a      	blt.n	78c0 <_strtol_l.constprop.0+0xc8>
    786a:	fb00 4003 	mla	r0, r0, r3, r4
    786e:	2201      	movs	r2, #1
    7870:	f815 4b01 	ldrb.w	r4, [r5], #1
    7874:	e7eb      	b.n	784e <_strtol_l.constprop.0+0x56>
    7876:	2c2b      	cmp	r4, #43	; 0x2b
    7878:	bf04      	itt	eq
    787a:	782c      	ldrbeq	r4, [r5, #0]
    787c:	1c95      	addeq	r5, r2, #2
    787e:	e7d8      	b.n	7832 <_strtol_l.constprop.0+0x3a>
    7880:	2b10      	cmp	r3, #16
    7882:	d1da      	bne.n	783a <_strtol_l.constprop.0+0x42>
    7884:	2c30      	cmp	r4, #48	; 0x30
    7886:	d1d8      	bne.n	783a <_strtol_l.constprop.0+0x42>
    7888:	782a      	ldrb	r2, [r5, #0]
    788a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    788e:	2a58      	cmp	r2, #88	; 0x58
    7890:	d1d3      	bne.n	783a <_strtol_l.constprop.0+0x42>
    7892:	786c      	ldrb	r4, [r5, #1]
    7894:	2310      	movs	r3, #16
    7896:	3502      	adds	r5, #2
    7898:	e7cf      	b.n	783a <_strtol_l.constprop.0+0x42>
    789a:	782b      	ldrb	r3, [r5, #0]
    789c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    78a0:	2b58      	cmp	r3, #88	; 0x58
    78a2:	d0f6      	beq.n	7892 <_strtol_l.constprop.0+0x9a>
    78a4:	2308      	movs	r3, #8
    78a6:	e7c8      	b.n	783a <_strtol_l.constprop.0+0x42>
    78a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
    78ac:	2f19      	cmp	r7, #25
    78ae:	d801      	bhi.n	78b4 <_strtol_l.constprop.0+0xbc>
    78b0:	3c37      	subs	r4, #55	; 0x37
    78b2:	e7d1      	b.n	7858 <_strtol_l.constprop.0+0x60>
    78b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
    78b8:	2f19      	cmp	r7, #25
    78ba:	d804      	bhi.n	78c6 <_strtol_l.constprop.0+0xce>
    78bc:	3c57      	subs	r4, #87	; 0x57
    78be:	e7cb      	b.n	7858 <_strtol_l.constprop.0+0x60>
    78c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    78c4:	e7d4      	b.n	7870 <_strtol_l.constprop.0+0x78>
    78c6:	1c53      	adds	r3, r2, #1
    78c8:	d108      	bne.n	78dc <_strtol_l.constprop.0+0xe4>
    78ca:	2322      	movs	r3, #34	; 0x22
    78cc:	f8ce 3000 	str.w	r3, [lr]
    78d0:	4660      	mov	r0, ip
    78d2:	f1b8 0f00 	cmp.w	r8, #0
    78d6:	d09c      	beq.n	7812 <_strtol_l.constprop.0+0x1a>
    78d8:	1e69      	subs	r1, r5, #1
    78da:	e006      	b.n	78ea <_strtol_l.constprop.0+0xf2>
    78dc:	b106      	cbz	r6, 78e0 <_strtol_l.constprop.0+0xe8>
    78de:	4240      	negs	r0, r0
    78e0:	f1b8 0f00 	cmp.w	r8, #0
    78e4:	d095      	beq.n	7812 <_strtol_l.constprop.0+0x1a>
    78e6:	2a00      	cmp	r2, #0
    78e8:	d1f6      	bne.n	78d8 <_strtol_l.constprop.0+0xe0>
    78ea:	f8c8 1000 	str.w	r1, [r8]
    78ee:	e790      	b.n	7812 <_strtol_l.constprop.0+0x1a>
    78f0:	0000d4bf 	.word	0x0000d4bf

000078f4 <strtol>:
    78f4:	4613      	mov	r3, r2
    78f6:	460a      	mov	r2, r1
    78f8:	4601      	mov	r1, r0
    78fa:	4802      	ldr	r0, [pc, #8]	; (7904 <strtol+0x10>)
    78fc:	6800      	ldr	r0, [r0, #0]
    78fe:	f7ff bf7b 	b.w	77f8 <_strtol_l.constprop.0>
    7902:	bf00      	nop
    7904:	20000214 	.word	0x20000214

00007908 <_strtoul_l.constprop.0>:
    7908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    790c:	4e36      	ldr	r6, [pc, #216]	; (79e8 <_strtoul_l.constprop.0+0xe0>)
    790e:	4686      	mov	lr, r0
    7910:	460d      	mov	r5, r1
    7912:	4628      	mov	r0, r5
    7914:	f815 4b01 	ldrb.w	r4, [r5], #1
    7918:	5d37      	ldrb	r7, [r6, r4]
    791a:	f017 0708 	ands.w	r7, r7, #8
    791e:	d1f8      	bne.n	7912 <_strtoul_l.constprop.0+0xa>
    7920:	2c2d      	cmp	r4, #45	; 0x2d
    7922:	d126      	bne.n	7972 <_strtoul_l.constprop.0+0x6a>
    7924:	782c      	ldrb	r4, [r5, #0]
    7926:	2701      	movs	r7, #1
    7928:	1c85      	adds	r5, r0, #2
    792a:	bb3b      	cbnz	r3, 797c <_strtoul_l.constprop.0+0x74>
    792c:	2c30      	cmp	r4, #48	; 0x30
    792e:	d032      	beq.n	7996 <_strtoul_l.constprop.0+0x8e>
    7930:	230a      	movs	r3, #10
    7932:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    7936:	2600      	movs	r6, #0
    7938:	fbb8 f8f3 	udiv	r8, r8, r3
    793c:	fb03 f908 	mul.w	r9, r3, r8
    7940:	ea6f 0909 	mvn.w	r9, r9
    7944:	4630      	mov	r0, r6
    7946:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    794a:	f1bc 0f09 	cmp.w	ip, #9
    794e:	d829      	bhi.n	79a4 <_strtoul_l.constprop.0+0x9c>
    7950:	4664      	mov	r4, ip
    7952:	42a3      	cmp	r3, r4
    7954:	dd37      	ble.n	79c6 <_strtoul_l.constprop.0+0xbe>
    7956:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    795a:	d007      	beq.n	796c <_strtoul_l.constprop.0+0x64>
    795c:	4580      	cmp	r8, r0
    795e:	d32f      	bcc.n	79c0 <_strtoul_l.constprop.0+0xb8>
    7960:	d101      	bne.n	7966 <_strtoul_l.constprop.0+0x5e>
    7962:	45a1      	cmp	r9, r4
    7964:	db2c      	blt.n	79c0 <_strtoul_l.constprop.0+0xb8>
    7966:	fb00 4003 	mla	r0, r0, r3, r4
    796a:	2601      	movs	r6, #1
    796c:	f815 4b01 	ldrb.w	r4, [r5], #1
    7970:	e7e9      	b.n	7946 <_strtoul_l.constprop.0+0x3e>
    7972:	2c2b      	cmp	r4, #43	; 0x2b
    7974:	bf04      	itt	eq
    7976:	782c      	ldrbeq	r4, [r5, #0]
    7978:	1c85      	addeq	r5, r0, #2
    797a:	e7d6      	b.n	792a <_strtoul_l.constprop.0+0x22>
    797c:	2b10      	cmp	r3, #16
    797e:	d1d8      	bne.n	7932 <_strtoul_l.constprop.0+0x2a>
    7980:	2c30      	cmp	r4, #48	; 0x30
    7982:	d1d6      	bne.n	7932 <_strtoul_l.constprop.0+0x2a>
    7984:	7828      	ldrb	r0, [r5, #0]
    7986:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    798a:	2858      	cmp	r0, #88	; 0x58
    798c:	d1d1      	bne.n	7932 <_strtoul_l.constprop.0+0x2a>
    798e:	786c      	ldrb	r4, [r5, #1]
    7990:	2310      	movs	r3, #16
    7992:	3502      	adds	r5, #2
    7994:	e7cd      	b.n	7932 <_strtoul_l.constprop.0+0x2a>
    7996:	782b      	ldrb	r3, [r5, #0]
    7998:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    799c:	2b58      	cmp	r3, #88	; 0x58
    799e:	d0f6      	beq.n	798e <_strtoul_l.constprop.0+0x86>
    79a0:	2308      	movs	r3, #8
    79a2:	e7c6      	b.n	7932 <_strtoul_l.constprop.0+0x2a>
    79a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    79a8:	f1bc 0f19 	cmp.w	ip, #25
    79ac:	d801      	bhi.n	79b2 <_strtoul_l.constprop.0+0xaa>
    79ae:	3c37      	subs	r4, #55	; 0x37
    79b0:	e7cf      	b.n	7952 <_strtoul_l.constprop.0+0x4a>
    79b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    79b6:	f1bc 0f19 	cmp.w	ip, #25
    79ba:	d804      	bhi.n	79c6 <_strtoul_l.constprop.0+0xbe>
    79bc:	3c57      	subs	r4, #87	; 0x57
    79be:	e7c8      	b.n	7952 <_strtoul_l.constprop.0+0x4a>
    79c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    79c4:	e7d2      	b.n	796c <_strtoul_l.constprop.0+0x64>
    79c6:	1c73      	adds	r3, r6, #1
    79c8:	d106      	bne.n	79d8 <_strtoul_l.constprop.0+0xd0>
    79ca:	2322      	movs	r3, #34	; 0x22
    79cc:	f8ce 3000 	str.w	r3, [lr]
    79d0:	4630      	mov	r0, r6
    79d2:	b932      	cbnz	r2, 79e2 <_strtoul_l.constprop.0+0xda>
    79d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    79d8:	b107      	cbz	r7, 79dc <_strtoul_l.constprop.0+0xd4>
    79da:	4240      	negs	r0, r0
    79dc:	2a00      	cmp	r2, #0
    79de:	d0f9      	beq.n	79d4 <_strtoul_l.constprop.0+0xcc>
    79e0:	b106      	cbz	r6, 79e4 <_strtoul_l.constprop.0+0xdc>
    79e2:	1e69      	subs	r1, r5, #1
    79e4:	6011      	str	r1, [r2, #0]
    79e6:	e7f5      	b.n	79d4 <_strtoul_l.constprop.0+0xcc>
    79e8:	0000d4bf 	.word	0x0000d4bf

000079ec <strtoul>:
    79ec:	4613      	mov	r3, r2
    79ee:	460a      	mov	r2, r1
    79f0:	4601      	mov	r1, r0
    79f2:	4802      	ldr	r0, [pc, #8]	; (79fc <strtoul+0x10>)
    79f4:	6800      	ldr	r0, [r0, #0]
    79f6:	f7ff bf87 	b.w	7908 <_strtoul_l.constprop.0>
    79fa:	bf00      	nop
    79fc:	20000214 	.word	0x20000214

00007a00 <std>:
    7a00:	2300      	movs	r3, #0
    7a02:	b510      	push	{r4, lr}
    7a04:	4604      	mov	r4, r0
    7a06:	e9c0 3300 	strd	r3, r3, [r0]
    7a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    7a0e:	6083      	str	r3, [r0, #8]
    7a10:	8181      	strh	r1, [r0, #12]
    7a12:	6643      	str	r3, [r0, #100]	; 0x64
    7a14:	81c2      	strh	r2, [r0, #14]
    7a16:	6183      	str	r3, [r0, #24]
    7a18:	4619      	mov	r1, r3
    7a1a:	2208      	movs	r2, #8
    7a1c:	305c      	adds	r0, #92	; 0x5c
    7a1e:	f003 f895 	bl	ab4c <memset>
    7a22:	4b05      	ldr	r3, [pc, #20]	; (7a38 <std+0x38>)
    7a24:	6263      	str	r3, [r4, #36]	; 0x24
    7a26:	4b05      	ldr	r3, [pc, #20]	; (7a3c <std+0x3c>)
    7a28:	62a3      	str	r3, [r4, #40]	; 0x28
    7a2a:	4b05      	ldr	r3, [pc, #20]	; (7a40 <std+0x40>)
    7a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
    7a2e:	4b05      	ldr	r3, [pc, #20]	; (7a44 <std+0x44>)
    7a30:	6224      	str	r4, [r4, #32]
    7a32:	6323      	str	r3, [r4, #48]	; 0x30
    7a34:	bd10      	pop	{r4, pc}
    7a36:	bf00      	nop
    7a38:	0000ae6f 	.word	0x0000ae6f
    7a3c:	0000ae91 	.word	0x0000ae91
    7a40:	0000aec9 	.word	0x0000aec9
    7a44:	0000aeed 	.word	0x0000aeed

00007a48 <_cleanup_r>:
    7a48:	4901      	ldr	r1, [pc, #4]	; (7a50 <_cleanup_r+0x8>)
    7a4a:	f003 b902 	b.w	ac52 <_fwalk_reent>
    7a4e:	bf00      	nop
    7a50:	00008405 	.word	0x00008405

00007a54 <__sfp_lock_acquire>:
    7a54:	4801      	ldr	r0, [pc, #4]	; (7a5c <__sfp_lock_acquire+0x8>)
    7a56:	f002 b94f 	b.w	9cf8 <__retarget_lock_acquire_recursive>
    7a5a:	bf00      	nop
    7a5c:	2000030c 	.word	0x2000030c

00007a60 <__sfp_lock_release>:
    7a60:	4801      	ldr	r0, [pc, #4]	; (7a68 <__sfp_lock_release+0x8>)
    7a62:	f002 b94f 	b.w	9d04 <__retarget_lock_release_recursive>
    7a66:	bf00      	nop
    7a68:	2000030c 	.word	0x2000030c

00007a6c <__sinit_lock_acquire>:
    7a6c:	4801      	ldr	r0, [pc, #4]	; (7a74 <__sinit_lock_acquire+0x8>)
    7a6e:	f002 b943 	b.w	9cf8 <__retarget_lock_acquire_recursive>
    7a72:	bf00      	nop
    7a74:	20000320 	.word	0x20000320

00007a78 <__sinit_lock_release>:
    7a78:	4801      	ldr	r0, [pc, #4]	; (7a80 <__sinit_lock_release+0x8>)
    7a7a:	f002 b943 	b.w	9d04 <__retarget_lock_release_recursive>
    7a7e:	bf00      	nop
    7a80:	20000320 	.word	0x20000320

00007a84 <__sinit>:
    7a84:	b510      	push	{r4, lr}
    7a86:	4604      	mov	r4, r0
    7a88:	f7ff fff0 	bl	7a6c <__sinit_lock_acquire>
    7a8c:	69a3      	ldr	r3, [r4, #24]
    7a8e:	b11b      	cbz	r3, 7a98 <__sinit+0x14>
    7a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a94:	f7ff bff0 	b.w	7a78 <__sinit_lock_release>
    7a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    7a9c:	6523      	str	r3, [r4, #80]	; 0x50
    7a9e:	4b13      	ldr	r3, [pc, #76]	; (7aec <__sinit+0x68>)
    7aa0:	4a13      	ldr	r2, [pc, #76]	; (7af0 <__sinit+0x6c>)
    7aa2:	681b      	ldr	r3, [r3, #0]
    7aa4:	62a2      	str	r2, [r4, #40]	; 0x28
    7aa6:	42a3      	cmp	r3, r4
    7aa8:	bf04      	itt	eq
    7aaa:	2301      	moveq	r3, #1
    7aac:	61a3      	streq	r3, [r4, #24]
    7aae:	4620      	mov	r0, r4
    7ab0:	f000 f820 	bl	7af4 <__sfp>
    7ab4:	6060      	str	r0, [r4, #4]
    7ab6:	4620      	mov	r0, r4
    7ab8:	f000 f81c 	bl	7af4 <__sfp>
    7abc:	60a0      	str	r0, [r4, #8]
    7abe:	4620      	mov	r0, r4
    7ac0:	f000 f818 	bl	7af4 <__sfp>
    7ac4:	2200      	movs	r2, #0
    7ac6:	60e0      	str	r0, [r4, #12]
    7ac8:	2104      	movs	r1, #4
    7aca:	6860      	ldr	r0, [r4, #4]
    7acc:	f7ff ff98 	bl	7a00 <std>
    7ad0:	68a0      	ldr	r0, [r4, #8]
    7ad2:	2201      	movs	r2, #1
    7ad4:	2109      	movs	r1, #9
    7ad6:	f7ff ff93 	bl	7a00 <std>
    7ada:	68e0      	ldr	r0, [r4, #12]
    7adc:	2202      	movs	r2, #2
    7ade:	2112      	movs	r1, #18
    7ae0:	f7ff ff8e 	bl	7a00 <std>
    7ae4:	2301      	movs	r3, #1
    7ae6:	61a3      	str	r3, [r4, #24]
    7ae8:	e7d2      	b.n	7a90 <__sinit+0xc>
    7aea:	bf00      	nop
    7aec:	0000c2d0 	.word	0x0000c2d0
    7af0:	00007a49 	.word	0x00007a49

00007af4 <__sfp>:
    7af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7af6:	4607      	mov	r7, r0
    7af8:	f7ff ffac 	bl	7a54 <__sfp_lock_acquire>
    7afc:	4b1e      	ldr	r3, [pc, #120]	; (7b78 <__sfp+0x84>)
    7afe:	681e      	ldr	r6, [r3, #0]
    7b00:	69b3      	ldr	r3, [r6, #24]
    7b02:	b913      	cbnz	r3, 7b0a <__sfp+0x16>
    7b04:	4630      	mov	r0, r6
    7b06:	f7ff ffbd 	bl	7a84 <__sinit>
    7b0a:	3648      	adds	r6, #72	; 0x48
    7b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    7b10:	3b01      	subs	r3, #1
    7b12:	d503      	bpl.n	7b1c <__sfp+0x28>
    7b14:	6833      	ldr	r3, [r6, #0]
    7b16:	b30b      	cbz	r3, 7b5c <__sfp+0x68>
    7b18:	6836      	ldr	r6, [r6, #0]
    7b1a:	e7f7      	b.n	7b0c <__sfp+0x18>
    7b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    7b20:	b9d5      	cbnz	r5, 7b58 <__sfp+0x64>
    7b22:	4b16      	ldr	r3, [pc, #88]	; (7b7c <__sfp+0x88>)
    7b24:	60e3      	str	r3, [r4, #12]
    7b26:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7b2a:	6665      	str	r5, [r4, #100]	; 0x64
    7b2c:	f002 f8da 	bl	9ce4 <__retarget_lock_init_recursive>
    7b30:	f7ff ff96 	bl	7a60 <__sfp_lock_release>
    7b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
    7b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
    7b3c:	6025      	str	r5, [r4, #0]
    7b3e:	61a5      	str	r5, [r4, #24]
    7b40:	2208      	movs	r2, #8
    7b42:	4629      	mov	r1, r5
    7b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7b48:	f003 f800 	bl	ab4c <memset>
    7b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    7b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    7b54:	4620      	mov	r0, r4
    7b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b58:	3468      	adds	r4, #104	; 0x68
    7b5a:	e7d9      	b.n	7b10 <__sfp+0x1c>
    7b5c:	2104      	movs	r1, #4
    7b5e:	4638      	mov	r0, r7
    7b60:	f003 f861 	bl	ac26 <__sfmoreglue>
    7b64:	4604      	mov	r4, r0
    7b66:	6030      	str	r0, [r6, #0]
    7b68:	2800      	cmp	r0, #0
    7b6a:	d1d5      	bne.n	7b18 <__sfp+0x24>
    7b6c:	f7ff ff78 	bl	7a60 <__sfp_lock_release>
    7b70:	230c      	movs	r3, #12
    7b72:	603b      	str	r3, [r7, #0]
    7b74:	e7ee      	b.n	7b54 <__sfp+0x60>
    7b76:	bf00      	nop
    7b78:	0000c2d0 	.word	0x0000c2d0
    7b7c:	ffff0001 	.word	0xffff0001

00007b80 <__malloc_lock>:
    7b80:	4801      	ldr	r0, [pc, #4]	; (7b88 <__malloc_lock+0x8>)
    7b82:	f002 b8b9 	b.w	9cf8 <__retarget_lock_acquire_recursive>
    7b86:	bf00      	nop
    7b88:	200002f8 	.word	0x200002f8

00007b8c <__malloc_unlock>:
    7b8c:	4801      	ldr	r0, [pc, #4]	; (7b94 <__malloc_unlock+0x8>)
    7b8e:	f002 b8b9 	b.w	9d04 <__retarget_lock_release_recursive>
    7b92:	bf00      	nop
    7b94:	200002f8 	.word	0x200002f8

00007b98 <_svfiprintf_r>:
    7b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b9c:	4698      	mov	r8, r3
    7b9e:	898b      	ldrh	r3, [r1, #12]
    7ba0:	061b      	lsls	r3, r3, #24
    7ba2:	b09d      	sub	sp, #116	; 0x74
    7ba4:	4607      	mov	r7, r0
    7ba6:	460d      	mov	r5, r1
    7ba8:	4614      	mov	r4, r2
    7baa:	d510      	bpl.n	7bce <_svfiprintf_r+0x36>
    7bac:	690b      	ldr	r3, [r1, #16]
    7bae:	b973      	cbnz	r3, 7bce <_svfiprintf_r+0x36>
    7bb0:	2140      	movs	r1, #64	; 0x40
    7bb2:	f7ff fd6b 	bl	768c <_malloc_r>
    7bb6:	6028      	str	r0, [r5, #0]
    7bb8:	6128      	str	r0, [r5, #16]
    7bba:	b930      	cbnz	r0, 7bca <_svfiprintf_r+0x32>
    7bbc:	230c      	movs	r3, #12
    7bbe:	603b      	str	r3, [r7, #0]
    7bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7bc4:	b01d      	add	sp, #116	; 0x74
    7bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bca:	2340      	movs	r3, #64	; 0x40
    7bcc:	616b      	str	r3, [r5, #20]
    7bce:	2300      	movs	r3, #0
    7bd0:	9309      	str	r3, [sp, #36]	; 0x24
    7bd2:	2320      	movs	r3, #32
    7bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    7bd8:	f8cd 800c 	str.w	r8, [sp, #12]
    7bdc:	2330      	movs	r3, #48	; 0x30
    7bde:	f8df 819c 	ldr.w	r8, [pc, #412]	; 7d7c <_svfiprintf_r+0x1e4>
    7be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7be6:	f04f 0901 	mov.w	r9, #1
    7bea:	4623      	mov	r3, r4
    7bec:	469a      	mov	sl, r3
    7bee:	f813 2b01 	ldrb.w	r2, [r3], #1
    7bf2:	b10a      	cbz	r2, 7bf8 <_svfiprintf_r+0x60>
    7bf4:	2a25      	cmp	r2, #37	; 0x25
    7bf6:	d1f9      	bne.n	7bec <_svfiprintf_r+0x54>
    7bf8:	ebba 0b04 	subs.w	fp, sl, r4
    7bfc:	d00b      	beq.n	7c16 <_svfiprintf_r+0x7e>
    7bfe:	465b      	mov	r3, fp
    7c00:	4622      	mov	r2, r4
    7c02:	4629      	mov	r1, r5
    7c04:	4638      	mov	r0, r7
    7c06:	f003 f843 	bl	ac90 <__ssputs_r>
    7c0a:	3001      	adds	r0, #1
    7c0c:	f000 80a7 	beq.w	7d5e <_svfiprintf_r+0x1c6>
    7c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c12:	445a      	add	r2, fp
    7c14:	9209      	str	r2, [sp, #36]	; 0x24
    7c16:	f89a 3000 	ldrb.w	r3, [sl]
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	f000 809f 	beq.w	7d5e <_svfiprintf_r+0x1c6>
    7c20:	2300      	movs	r3, #0
    7c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
    7c2a:	f10a 0a01 	add.w	sl, sl, #1
    7c2e:	9304      	str	r3, [sp, #16]
    7c30:	9307      	str	r3, [sp, #28]
    7c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    7c36:	931a      	str	r3, [sp, #104]	; 0x68
    7c38:	4654      	mov	r4, sl
    7c3a:	2205      	movs	r2, #5
    7c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
    7c40:	484e      	ldr	r0, [pc, #312]	; (7d7c <_svfiprintf_r+0x1e4>)
    7c42:	f7f8 fa5d 	bl	100 <memchr>
    7c46:	9a04      	ldr	r2, [sp, #16]
    7c48:	b9d8      	cbnz	r0, 7c82 <_svfiprintf_r+0xea>
    7c4a:	06d0      	lsls	r0, r2, #27
    7c4c:	bf44      	itt	mi
    7c4e:	2320      	movmi	r3, #32
    7c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    7c54:	0711      	lsls	r1, r2, #28
    7c56:	bf44      	itt	mi
    7c58:	232b      	movmi	r3, #43	; 0x2b
    7c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    7c5e:	f89a 3000 	ldrb.w	r3, [sl]
    7c62:	2b2a      	cmp	r3, #42	; 0x2a
    7c64:	d015      	beq.n	7c92 <_svfiprintf_r+0xfa>
    7c66:	9a07      	ldr	r2, [sp, #28]
    7c68:	4654      	mov	r4, sl
    7c6a:	2000      	movs	r0, #0
    7c6c:	f04f 0c0a 	mov.w	ip, #10
    7c70:	4621      	mov	r1, r4
    7c72:	f811 3b01 	ldrb.w	r3, [r1], #1
    7c76:	3b30      	subs	r3, #48	; 0x30
    7c78:	2b09      	cmp	r3, #9
    7c7a:	d94b      	bls.n	7d14 <_svfiprintf_r+0x17c>
    7c7c:	b1b0      	cbz	r0, 7cac <_svfiprintf_r+0x114>
    7c7e:	9207      	str	r2, [sp, #28]
    7c80:	e014      	b.n	7cac <_svfiprintf_r+0x114>
    7c82:	eba0 0308 	sub.w	r3, r0, r8
    7c86:	fa09 f303 	lsl.w	r3, r9, r3
    7c8a:	4313      	orrs	r3, r2
    7c8c:	9304      	str	r3, [sp, #16]
    7c8e:	46a2      	mov	sl, r4
    7c90:	e7d2      	b.n	7c38 <_svfiprintf_r+0xa0>
    7c92:	9b03      	ldr	r3, [sp, #12]
    7c94:	1d19      	adds	r1, r3, #4
    7c96:	681b      	ldr	r3, [r3, #0]
    7c98:	9103      	str	r1, [sp, #12]
    7c9a:	2b00      	cmp	r3, #0
    7c9c:	bfbb      	ittet	lt
    7c9e:	425b      	neglt	r3, r3
    7ca0:	f042 0202 	orrlt.w	r2, r2, #2
    7ca4:	9307      	strge	r3, [sp, #28]
    7ca6:	9307      	strlt	r3, [sp, #28]
    7ca8:	bfb8      	it	lt
    7caa:	9204      	strlt	r2, [sp, #16]
    7cac:	7823      	ldrb	r3, [r4, #0]
    7cae:	2b2e      	cmp	r3, #46	; 0x2e
    7cb0:	d10a      	bne.n	7cc8 <_svfiprintf_r+0x130>
    7cb2:	7863      	ldrb	r3, [r4, #1]
    7cb4:	2b2a      	cmp	r3, #42	; 0x2a
    7cb6:	d132      	bne.n	7d1e <_svfiprintf_r+0x186>
    7cb8:	9b03      	ldr	r3, [sp, #12]
    7cba:	1d1a      	adds	r2, r3, #4
    7cbc:	681b      	ldr	r3, [r3, #0]
    7cbe:	9203      	str	r2, [sp, #12]
    7cc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    7cc4:	3402      	adds	r4, #2
    7cc6:	9305      	str	r3, [sp, #20]
    7cc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 7d80 <_svfiprintf_r+0x1e8>
    7ccc:	7821      	ldrb	r1, [r4, #0]
    7cce:	2203      	movs	r2, #3
    7cd0:	4650      	mov	r0, sl
    7cd2:	f7f8 fa15 	bl	100 <memchr>
    7cd6:	b138      	cbz	r0, 7ce8 <_svfiprintf_r+0x150>
    7cd8:	9b04      	ldr	r3, [sp, #16]
    7cda:	eba0 000a 	sub.w	r0, r0, sl
    7cde:	2240      	movs	r2, #64	; 0x40
    7ce0:	4082      	lsls	r2, r0
    7ce2:	4313      	orrs	r3, r2
    7ce4:	3401      	adds	r4, #1
    7ce6:	9304      	str	r3, [sp, #16]
    7ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
    7cec:	4825      	ldr	r0, [pc, #148]	; (7d84 <_svfiprintf_r+0x1ec>)
    7cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7cf2:	2206      	movs	r2, #6
    7cf4:	f7f8 fa04 	bl	100 <memchr>
    7cf8:	2800      	cmp	r0, #0
    7cfa:	d036      	beq.n	7d6a <_svfiprintf_r+0x1d2>
    7cfc:	4b22      	ldr	r3, [pc, #136]	; (7d88 <_svfiprintf_r+0x1f0>)
    7cfe:	bb1b      	cbnz	r3, 7d48 <_svfiprintf_r+0x1b0>
    7d00:	9b03      	ldr	r3, [sp, #12]
    7d02:	3307      	adds	r3, #7
    7d04:	f023 0307 	bic.w	r3, r3, #7
    7d08:	3308      	adds	r3, #8
    7d0a:	9303      	str	r3, [sp, #12]
    7d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d0e:	4433      	add	r3, r6
    7d10:	9309      	str	r3, [sp, #36]	; 0x24
    7d12:	e76a      	b.n	7bea <_svfiprintf_r+0x52>
    7d14:	fb0c 3202 	mla	r2, ip, r2, r3
    7d18:	460c      	mov	r4, r1
    7d1a:	2001      	movs	r0, #1
    7d1c:	e7a8      	b.n	7c70 <_svfiprintf_r+0xd8>
    7d1e:	2300      	movs	r3, #0
    7d20:	3401      	adds	r4, #1
    7d22:	9305      	str	r3, [sp, #20]
    7d24:	4619      	mov	r1, r3
    7d26:	f04f 0c0a 	mov.w	ip, #10
    7d2a:	4620      	mov	r0, r4
    7d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
    7d30:	3a30      	subs	r2, #48	; 0x30
    7d32:	2a09      	cmp	r2, #9
    7d34:	d903      	bls.n	7d3e <_svfiprintf_r+0x1a6>
    7d36:	2b00      	cmp	r3, #0
    7d38:	d0c6      	beq.n	7cc8 <_svfiprintf_r+0x130>
    7d3a:	9105      	str	r1, [sp, #20]
    7d3c:	e7c4      	b.n	7cc8 <_svfiprintf_r+0x130>
    7d3e:	fb0c 2101 	mla	r1, ip, r1, r2
    7d42:	4604      	mov	r4, r0
    7d44:	2301      	movs	r3, #1
    7d46:	e7f0      	b.n	7d2a <_svfiprintf_r+0x192>
    7d48:	ab03      	add	r3, sp, #12
    7d4a:	9300      	str	r3, [sp, #0]
    7d4c:	462a      	mov	r2, r5
    7d4e:	4b0f      	ldr	r3, [pc, #60]	; (7d8c <_svfiprintf_r+0x1f4>)
    7d50:	a904      	add	r1, sp, #16
    7d52:	4638      	mov	r0, r7
    7d54:	f3af 8000 	nop.w
    7d58:	1c42      	adds	r2, r0, #1
    7d5a:	4606      	mov	r6, r0
    7d5c:	d1d6      	bne.n	7d0c <_svfiprintf_r+0x174>
    7d5e:	89ab      	ldrh	r3, [r5, #12]
    7d60:	065b      	lsls	r3, r3, #25
    7d62:	f53f af2d 	bmi.w	7bc0 <_svfiprintf_r+0x28>
    7d66:	9809      	ldr	r0, [sp, #36]	; 0x24
    7d68:	e72c      	b.n	7bc4 <_svfiprintf_r+0x2c>
    7d6a:	ab03      	add	r3, sp, #12
    7d6c:	9300      	str	r3, [sp, #0]
    7d6e:	462a      	mov	r2, r5
    7d70:	4b06      	ldr	r3, [pc, #24]	; (7d8c <_svfiprintf_r+0x1f4>)
    7d72:	a904      	add	r1, sp, #16
    7d74:	4638      	mov	r0, r7
    7d76:	f000 f937 	bl	7fe8 <_printf_i>
    7d7a:	e7ed      	b.n	7d58 <_svfiprintf_r+0x1c0>
    7d7c:	0000d5bf 	.word	0x0000d5bf
    7d80:	0000d5c5 	.word	0x0000d5c5
    7d84:	0000d5c9 	.word	0x0000d5c9
    7d88:	00000000 	.word	0x00000000
    7d8c:	0000ac91 	.word	0x0000ac91

00007d90 <_vfiprintf_r>:
    7d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d94:	460d      	mov	r5, r1
    7d96:	b09d      	sub	sp, #116	; 0x74
    7d98:	4614      	mov	r4, r2
    7d9a:	4698      	mov	r8, r3
    7d9c:	4606      	mov	r6, r0
    7d9e:	b118      	cbz	r0, 7da8 <_vfiprintf_r+0x18>
    7da0:	6983      	ldr	r3, [r0, #24]
    7da2:	b90b      	cbnz	r3, 7da8 <_vfiprintf_r+0x18>
    7da4:	f7ff fe6e 	bl	7a84 <__sinit>
    7da8:	4b87      	ldr	r3, [pc, #540]	; (7fc8 <_vfiprintf_r+0x238>)
    7daa:	429d      	cmp	r5, r3
    7dac:	d11b      	bne.n	7de6 <_vfiprintf_r+0x56>
    7dae:	6875      	ldr	r5, [r6, #4]
    7db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    7db2:	07d9      	lsls	r1, r3, #31
    7db4:	d405      	bmi.n	7dc2 <_vfiprintf_r+0x32>
    7db6:	89ab      	ldrh	r3, [r5, #12]
    7db8:	059a      	lsls	r2, r3, #22
    7dba:	d402      	bmi.n	7dc2 <_vfiprintf_r+0x32>
    7dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    7dbe:	f001 ff9b 	bl	9cf8 <__retarget_lock_acquire_recursive>
    7dc2:	89ab      	ldrh	r3, [r5, #12]
    7dc4:	071b      	lsls	r3, r3, #28
    7dc6:	d501      	bpl.n	7dcc <_vfiprintf_r+0x3c>
    7dc8:	692b      	ldr	r3, [r5, #16]
    7dca:	b9eb      	cbnz	r3, 7e08 <_vfiprintf_r+0x78>
    7dcc:	4629      	mov	r1, r5
    7dce:	4630      	mov	r0, r6
    7dd0:	f000 fa9c 	bl	830c <__swsetup_r>
    7dd4:	b1c0      	cbz	r0, 7e08 <_vfiprintf_r+0x78>
    7dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    7dd8:	07dc      	lsls	r4, r3, #31
    7dda:	d50e      	bpl.n	7dfa <_vfiprintf_r+0x6a>
    7ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7de0:	b01d      	add	sp, #116	; 0x74
    7de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7de6:	4b79      	ldr	r3, [pc, #484]	; (7fcc <_vfiprintf_r+0x23c>)
    7de8:	429d      	cmp	r5, r3
    7dea:	d101      	bne.n	7df0 <_vfiprintf_r+0x60>
    7dec:	68b5      	ldr	r5, [r6, #8]
    7dee:	e7df      	b.n	7db0 <_vfiprintf_r+0x20>
    7df0:	4b77      	ldr	r3, [pc, #476]	; (7fd0 <_vfiprintf_r+0x240>)
    7df2:	429d      	cmp	r5, r3
    7df4:	bf08      	it	eq
    7df6:	68f5      	ldreq	r5, [r6, #12]
    7df8:	e7da      	b.n	7db0 <_vfiprintf_r+0x20>
    7dfa:	89ab      	ldrh	r3, [r5, #12]
    7dfc:	0598      	lsls	r0, r3, #22
    7dfe:	d4ed      	bmi.n	7ddc <_vfiprintf_r+0x4c>
    7e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
    7e02:	f001 ff7f 	bl	9d04 <__retarget_lock_release_recursive>
    7e06:	e7e9      	b.n	7ddc <_vfiprintf_r+0x4c>
    7e08:	2300      	movs	r3, #0
    7e0a:	9309      	str	r3, [sp, #36]	; 0x24
    7e0c:	2320      	movs	r3, #32
    7e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    7e12:	f8cd 800c 	str.w	r8, [sp, #12]
    7e16:	2330      	movs	r3, #48	; 0x30
    7e18:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 7fd4 <_vfiprintf_r+0x244>
    7e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7e20:	f04f 0901 	mov.w	r9, #1
    7e24:	4623      	mov	r3, r4
    7e26:	469a      	mov	sl, r3
    7e28:	f813 2b01 	ldrb.w	r2, [r3], #1
    7e2c:	b10a      	cbz	r2, 7e32 <_vfiprintf_r+0xa2>
    7e2e:	2a25      	cmp	r2, #37	; 0x25
    7e30:	d1f9      	bne.n	7e26 <_vfiprintf_r+0x96>
    7e32:	ebba 0b04 	subs.w	fp, sl, r4
    7e36:	d00b      	beq.n	7e50 <_vfiprintf_r+0xc0>
    7e38:	465b      	mov	r3, fp
    7e3a:	4622      	mov	r2, r4
    7e3c:	4629      	mov	r1, r5
    7e3e:	4630      	mov	r0, r6
    7e40:	f002 ff96 	bl	ad70 <__sfputs_r>
    7e44:	3001      	adds	r0, #1
    7e46:	f000 80a6 	beq.w	7f96 <_vfiprintf_r+0x206>
    7e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e4c:	445a      	add	r2, fp
    7e4e:	9209      	str	r2, [sp, #36]	; 0x24
    7e50:	f89a 3000 	ldrb.w	r3, [sl]
    7e54:	2b00      	cmp	r3, #0
    7e56:	f000 809e 	beq.w	7f96 <_vfiprintf_r+0x206>
    7e5a:	2300      	movs	r3, #0
    7e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
    7e64:	f10a 0a01 	add.w	sl, sl, #1
    7e68:	9304      	str	r3, [sp, #16]
    7e6a:	9307      	str	r3, [sp, #28]
    7e6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    7e70:	931a      	str	r3, [sp, #104]	; 0x68
    7e72:	4654      	mov	r4, sl
    7e74:	4857      	ldr	r0, [pc, #348]	; (7fd4 <_vfiprintf_r+0x244>)
    7e76:	f814 1b01 	ldrb.w	r1, [r4], #1
    7e7a:	2205      	movs	r2, #5
    7e7c:	f7f8 f940 	bl	100 <memchr>
    7e80:	9b04      	ldr	r3, [sp, #16]
    7e82:	b9d0      	cbnz	r0, 7eba <_vfiprintf_r+0x12a>
    7e84:	06d9      	lsls	r1, r3, #27
    7e86:	bf44      	itt	mi
    7e88:	2220      	movmi	r2, #32
    7e8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7e8e:	071a      	lsls	r2, r3, #28
    7e90:	bf44      	itt	mi
    7e92:	222b      	movmi	r2, #43	; 0x2b
    7e94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7e98:	f89a 2000 	ldrb.w	r2, [sl]
    7e9c:	2a2a      	cmp	r2, #42	; 0x2a
    7e9e:	d014      	beq.n	7eca <_vfiprintf_r+0x13a>
    7ea0:	9a07      	ldr	r2, [sp, #28]
    7ea2:	4654      	mov	r4, sl
    7ea4:	2000      	movs	r0, #0
    7ea6:	f04f 0c0a 	mov.w	ip, #10
    7eaa:	4621      	mov	r1, r4
    7eac:	f811 3b01 	ldrb.w	r3, [r1], #1
    7eb0:	3b30      	subs	r3, #48	; 0x30
    7eb2:	2b09      	cmp	r3, #9
    7eb4:	d94a      	bls.n	7f4c <_vfiprintf_r+0x1bc>
    7eb6:	b970      	cbnz	r0, 7ed6 <_vfiprintf_r+0x146>
    7eb8:	e014      	b.n	7ee4 <_vfiprintf_r+0x154>
    7eba:	eba0 0008 	sub.w	r0, r0, r8
    7ebe:	fa09 f000 	lsl.w	r0, r9, r0
    7ec2:	4318      	orrs	r0, r3
    7ec4:	9004      	str	r0, [sp, #16]
    7ec6:	46a2      	mov	sl, r4
    7ec8:	e7d3      	b.n	7e72 <_vfiprintf_r+0xe2>
    7eca:	9a03      	ldr	r2, [sp, #12]
    7ecc:	1d11      	adds	r1, r2, #4
    7ece:	6812      	ldr	r2, [r2, #0]
    7ed0:	9103      	str	r1, [sp, #12]
    7ed2:	2a00      	cmp	r2, #0
    7ed4:	db01      	blt.n	7eda <_vfiprintf_r+0x14a>
    7ed6:	9207      	str	r2, [sp, #28]
    7ed8:	e004      	b.n	7ee4 <_vfiprintf_r+0x154>
    7eda:	4252      	negs	r2, r2
    7edc:	f043 0302 	orr.w	r3, r3, #2
    7ee0:	9207      	str	r2, [sp, #28]
    7ee2:	9304      	str	r3, [sp, #16]
    7ee4:	7823      	ldrb	r3, [r4, #0]
    7ee6:	2b2e      	cmp	r3, #46	; 0x2e
    7ee8:	d10a      	bne.n	7f00 <_vfiprintf_r+0x170>
    7eea:	7863      	ldrb	r3, [r4, #1]
    7eec:	2b2a      	cmp	r3, #42	; 0x2a
    7eee:	d132      	bne.n	7f56 <_vfiprintf_r+0x1c6>
    7ef0:	9b03      	ldr	r3, [sp, #12]
    7ef2:	1d1a      	adds	r2, r3, #4
    7ef4:	681b      	ldr	r3, [r3, #0]
    7ef6:	9203      	str	r2, [sp, #12]
    7ef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    7efc:	3402      	adds	r4, #2
    7efe:	9305      	str	r3, [sp, #20]
    7f00:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 7fd8 <_vfiprintf_r+0x248>
    7f04:	7821      	ldrb	r1, [r4, #0]
    7f06:	2203      	movs	r2, #3
    7f08:	4650      	mov	r0, sl
    7f0a:	f7f8 f8f9 	bl	100 <memchr>
    7f0e:	b138      	cbz	r0, 7f20 <_vfiprintf_r+0x190>
    7f10:	9b04      	ldr	r3, [sp, #16]
    7f12:	eba0 000a 	sub.w	r0, r0, sl
    7f16:	2240      	movs	r2, #64	; 0x40
    7f18:	4082      	lsls	r2, r0
    7f1a:	4313      	orrs	r3, r2
    7f1c:	3401      	adds	r4, #1
    7f1e:	9304      	str	r3, [sp, #16]
    7f20:	f814 1b01 	ldrb.w	r1, [r4], #1
    7f24:	482d      	ldr	r0, [pc, #180]	; (7fdc <_vfiprintf_r+0x24c>)
    7f26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7f2a:	2206      	movs	r2, #6
    7f2c:	f7f8 f8e8 	bl	100 <memchr>
    7f30:	2800      	cmp	r0, #0
    7f32:	d03f      	beq.n	7fb4 <_vfiprintf_r+0x224>
    7f34:	4b2a      	ldr	r3, [pc, #168]	; (7fe0 <_vfiprintf_r+0x250>)
    7f36:	bb1b      	cbnz	r3, 7f80 <_vfiprintf_r+0x1f0>
    7f38:	9b03      	ldr	r3, [sp, #12]
    7f3a:	3307      	adds	r3, #7
    7f3c:	f023 0307 	bic.w	r3, r3, #7
    7f40:	3308      	adds	r3, #8
    7f42:	9303      	str	r3, [sp, #12]
    7f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f46:	443b      	add	r3, r7
    7f48:	9309      	str	r3, [sp, #36]	; 0x24
    7f4a:	e76b      	b.n	7e24 <_vfiprintf_r+0x94>
    7f4c:	fb0c 3202 	mla	r2, ip, r2, r3
    7f50:	460c      	mov	r4, r1
    7f52:	2001      	movs	r0, #1
    7f54:	e7a9      	b.n	7eaa <_vfiprintf_r+0x11a>
    7f56:	2300      	movs	r3, #0
    7f58:	3401      	adds	r4, #1
    7f5a:	9305      	str	r3, [sp, #20]
    7f5c:	4619      	mov	r1, r3
    7f5e:	f04f 0c0a 	mov.w	ip, #10
    7f62:	4620      	mov	r0, r4
    7f64:	f810 2b01 	ldrb.w	r2, [r0], #1
    7f68:	3a30      	subs	r2, #48	; 0x30
    7f6a:	2a09      	cmp	r2, #9
    7f6c:	d903      	bls.n	7f76 <_vfiprintf_r+0x1e6>
    7f6e:	2b00      	cmp	r3, #0
    7f70:	d0c6      	beq.n	7f00 <_vfiprintf_r+0x170>
    7f72:	9105      	str	r1, [sp, #20]
    7f74:	e7c4      	b.n	7f00 <_vfiprintf_r+0x170>
    7f76:	fb0c 2101 	mla	r1, ip, r1, r2
    7f7a:	4604      	mov	r4, r0
    7f7c:	2301      	movs	r3, #1
    7f7e:	e7f0      	b.n	7f62 <_vfiprintf_r+0x1d2>
    7f80:	ab03      	add	r3, sp, #12
    7f82:	9300      	str	r3, [sp, #0]
    7f84:	462a      	mov	r2, r5
    7f86:	4b17      	ldr	r3, [pc, #92]	; (7fe4 <_vfiprintf_r+0x254>)
    7f88:	a904      	add	r1, sp, #16
    7f8a:	4630      	mov	r0, r6
    7f8c:	f3af 8000 	nop.w
    7f90:	4607      	mov	r7, r0
    7f92:	1c78      	adds	r0, r7, #1
    7f94:	d1d6      	bne.n	7f44 <_vfiprintf_r+0x1b4>
    7f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    7f98:	07d9      	lsls	r1, r3, #31
    7f9a:	d405      	bmi.n	7fa8 <_vfiprintf_r+0x218>
    7f9c:	89ab      	ldrh	r3, [r5, #12]
    7f9e:	059a      	lsls	r2, r3, #22
    7fa0:	d402      	bmi.n	7fa8 <_vfiprintf_r+0x218>
    7fa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    7fa4:	f001 feae 	bl	9d04 <__retarget_lock_release_recursive>
    7fa8:	89ab      	ldrh	r3, [r5, #12]
    7faa:	065b      	lsls	r3, r3, #25
    7fac:	f53f af16 	bmi.w	7ddc <_vfiprintf_r+0x4c>
    7fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    7fb2:	e715      	b.n	7de0 <_vfiprintf_r+0x50>
    7fb4:	ab03      	add	r3, sp, #12
    7fb6:	9300      	str	r3, [sp, #0]
    7fb8:	462a      	mov	r2, r5
    7fba:	4b0a      	ldr	r3, [pc, #40]	; (7fe4 <_vfiprintf_r+0x254>)
    7fbc:	a904      	add	r1, sp, #16
    7fbe:	4630      	mov	r0, r6
    7fc0:	f000 f812 	bl	7fe8 <_printf_i>
    7fc4:	e7e4      	b.n	7f90 <_vfiprintf_r+0x200>
    7fc6:	bf00      	nop
    7fc8:	0000c314 	.word	0x0000c314
    7fcc:	0000c2f4 	.word	0x0000c2f4
    7fd0:	0000c2d4 	.word	0x0000c2d4
    7fd4:	0000d5bf 	.word	0x0000d5bf
    7fd8:	0000d5c5 	.word	0x0000d5c5
    7fdc:	0000d5c9 	.word	0x0000d5c9
    7fe0:	00000000 	.word	0x00000000
    7fe4:	0000ad71 	.word	0x0000ad71

00007fe8 <_printf_i>:
    7fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7fec:	7e0f      	ldrb	r7, [r1, #24]
    7fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7ff0:	2f78      	cmp	r7, #120	; 0x78
    7ff2:	4691      	mov	r9, r2
    7ff4:	4680      	mov	r8, r0
    7ff6:	460c      	mov	r4, r1
    7ff8:	469a      	mov	sl, r3
    7ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
    7ffe:	d807      	bhi.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    8000:	2f62      	cmp	r7, #98	; 0x62
    8002:	d80a      	bhi.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    8004:	2f00      	cmp	r7, #0
    8006:	f000 80e0 	beq.w	81ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ca>
    800a:	2f58      	cmp	r7, #88	; 0x58
    800c:	f000 80bb 	beq.w	8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8010:	f104 0642 	add.w	r6, r4, #66	; 0x42
    8014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    8018:	e03a      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    801a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    801e:	2b15      	cmp	r3, #21
    8020:	d8f6      	bhi.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    8022:	a101      	add	r1, pc, #4	; (adr r1, 8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    8024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    8028:	00008081 	.word	0x00008081
    802c:	00008095 	.word	0x00008095
    8030:	00008011 	.word	0x00008011
    8034:	00008011 	.word	0x00008011
    8038:	00008011 	.word	0x00008011
    803c:	00008011 	.word	0x00008011
    8040:	00008095 	.word	0x00008095
    8044:	00008011 	.word	0x00008011
    8048:	00008011 	.word	0x00008011
    804c:	00008011 	.word	0x00008011
    8050:	00008011 	.word	0x00008011
    8054:	000081b1 	.word	0x000081b1
    8058:	00008125 	.word	0x00008125
    805c:	00008167 	.word	0x00008167
    8060:	00008011 	.word	0x00008011
    8064:	00008011 	.word	0x00008011
    8068:	000081d3 	.word	0x000081d3
    806c:	00008011 	.word	0x00008011
    8070:	00008125 	.word	0x00008125
    8074:	00008011 	.word	0x00008011
    8078:	00008011 	.word	0x00008011
    807c:	0000816f 	.word	0x0000816f
    8080:	682b      	ldr	r3, [r5, #0]
    8082:	1d1a      	adds	r2, r3, #4
    8084:	681b      	ldr	r3, [r3, #0]
    8086:	602a      	str	r2, [r5, #0]
    8088:	f104 0642 	add.w	r6, r4, #66	; 0x42
    808c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    8090:	2301      	movs	r3, #1
    8092:	e0ab      	b.n	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    8094:	6823      	ldr	r3, [r4, #0]
    8096:	6829      	ldr	r1, [r5, #0]
    8098:	061f      	lsls	r7, r3, #24
    809a:	f101 0004 	add.w	r0, r1, #4
    809e:	6028      	str	r0, [r5, #0]
    80a0:	d501      	bpl.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
    80a2:	680d      	ldr	r5, [r1, #0]
    80a4:	e003      	b.n	80ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae>
    80a6:	065e      	lsls	r6, r3, #25
    80a8:	d5fb      	bpl.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
    80aa:	f9b1 5000 	ldrsh.w	r5, [r1]
    80ae:	6861      	ldr	r1, [r4, #4]
    80b0:	2d00      	cmp	r5, #0
    80b2:	da7a      	bge.n	81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    80b4:	202d      	movs	r0, #45	; 0x2d
    80b6:	2900      	cmp	r1, #0
    80b8:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    80bc:	60a1      	str	r1, [r4, #8]
    80be:	da2d      	bge.n	811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    80c0:	485e      	ldr	r0, [pc, #376]	; (823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>)
    80c2:	426d      	negs	r5, r5
    80c4:	230a      	movs	r3, #10
    80c6:	4616      	mov	r6, r2
    80c8:	fbb5 f1f3 	udiv	r1, r5, r3
    80cc:	fb03 5711 	mls	r7, r3, r1, r5
    80d0:	5dc7      	ldrb	r7, [r0, r7]
    80d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
    80d6:	462f      	mov	r7, r5
    80d8:	42bb      	cmp	r3, r7
    80da:	460d      	mov	r5, r1
    80dc:	d9f4      	bls.n	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    80de:	2b08      	cmp	r3, #8
    80e0:	d10b      	bne.n	80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    80e2:	6823      	ldr	r3, [r4, #0]
    80e4:	07df      	lsls	r7, r3, #31
    80e6:	d508      	bpl.n	80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    80e8:	6923      	ldr	r3, [r4, #16]
    80ea:	6861      	ldr	r1, [r4, #4]
    80ec:	4299      	cmp	r1, r3
    80ee:	bfde      	ittt	le
    80f0:	2330      	movle	r3, #48	; 0x30
    80f2:	f806 3c01 	strble.w	r3, [r6, #-1]
    80f6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
    80fa:	1b92      	subs	r2, r2, r6
    80fc:	6122      	str	r2, [r4, #16]
    80fe:	f8cd a000 	str.w	sl, [sp]
    8102:	464b      	mov	r3, r9
    8104:	aa03      	add	r2, sp, #12
    8106:	4621      	mov	r1, r4
    8108:	4640      	mov	r0, r8
    810a:	f002 fe43 	bl	ad94 <_printf_common>
    810e:	3001      	adds	r0, #1
    8110:	d171      	bne.n	81f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    8112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8116:	b004      	add	sp, #16
    8118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    811c:	f023 0304 	bic.w	r3, r3, #4
    8120:	6023      	str	r3, [r4, #0]
    8122:	e7cd      	b.n	80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>
    8124:	682b      	ldr	r3, [r5, #0]
    8126:	6820      	ldr	r0, [r4, #0]
    8128:	1d19      	adds	r1, r3, #4
    812a:	6029      	str	r1, [r5, #0]
    812c:	0605      	lsls	r5, r0, #24
    812e:	d501      	bpl.n	8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>
    8130:	681d      	ldr	r5, [r3, #0]
    8132:	e002      	b.n	813a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a>
    8134:	0641      	lsls	r1, r0, #25
    8136:	d5fb      	bpl.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8138:	881d      	ldrh	r5, [r3, #0]
    813a:	4840      	ldr	r0, [pc, #256]	; (823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>)
    813c:	2f6f      	cmp	r7, #111	; 0x6f
    813e:	bf14      	ite	ne
    8140:	230a      	movne	r3, #10
    8142:	2308      	moveq	r3, #8
    8144:	2100      	movs	r1, #0
    8146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    814a:	6866      	ldr	r6, [r4, #4]
    814c:	60a6      	str	r6, [r4, #8]
    814e:	2e00      	cmp	r6, #0
    8150:	dbb9      	blt.n	80c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6>
    8152:	6821      	ldr	r1, [r4, #0]
    8154:	f021 0104 	bic.w	r1, r1, #4
    8158:	6021      	str	r1, [r4, #0]
    815a:	2d00      	cmp	r5, #0
    815c:	d1b3      	bne.n	80c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6>
    815e:	2e00      	cmp	r6, #0
    8160:	d1b1      	bne.n	80c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6>
    8162:	4616      	mov	r6, r2
    8164:	e7bb      	b.n	80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
    8166:	6823      	ldr	r3, [r4, #0]
    8168:	f043 0320 	orr.w	r3, r3, #32
    816c:	6023      	str	r3, [r4, #0]
    816e:	4834      	ldr	r0, [pc, #208]	; (8240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>)
    8170:	2778      	movs	r7, #120	; 0x78
    8172:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    8176:	6829      	ldr	r1, [r5, #0]
    8178:	6823      	ldr	r3, [r4, #0]
    817a:	1d0e      	adds	r6, r1, #4
    817c:	602e      	str	r6, [r5, #0]
    817e:	061e      	lsls	r6, r3, #24
    8180:	d503      	bpl.n	818a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    8182:	680d      	ldr	r5, [r1, #0]
    8184:	e004      	b.n	8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>
    8186:	482d      	ldr	r0, [pc, #180]	; (823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>)
    8188:	e7f3      	b.n	8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    818a:	065d      	lsls	r5, r3, #25
    818c:	d5f9      	bpl.n	8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    818e:	880d      	ldrh	r5, [r1, #0]
    8190:	07d9      	lsls	r1, r3, #31
    8192:	bf44      	itt	mi
    8194:	f043 0320 	orrmi.w	r3, r3, #32
    8198:	6023      	strmi	r3, [r4, #0]
    819a:	b10d      	cbz	r5, 81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    819c:	2310      	movs	r3, #16
    819e:	e7d1      	b.n	8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    81a0:	6823      	ldr	r3, [r4, #0]
    81a2:	f023 0320 	bic.w	r3, r3, #32
    81a6:	6023      	str	r3, [r4, #0]
    81a8:	e7f8      	b.n	819c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c>
    81aa:	4824      	ldr	r0, [pc, #144]	; (823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>)
    81ac:	230a      	movs	r3, #10
    81ae:	e7cc      	b.n	814a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a>
    81b0:	682b      	ldr	r3, [r5, #0]
    81b2:	6826      	ldr	r6, [r4, #0]
    81b4:	6961      	ldr	r1, [r4, #20]
    81b6:	1d18      	adds	r0, r3, #4
    81b8:	6028      	str	r0, [r5, #0]
    81ba:	0635      	lsls	r5, r6, #24
    81bc:	681b      	ldr	r3, [r3, #0]
    81be:	d501      	bpl.n	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    81c0:	6019      	str	r1, [r3, #0]
    81c2:	e002      	b.n	81ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ca>
    81c4:	0670      	lsls	r0, r6, #25
    81c6:	d5fb      	bpl.n	81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    81c8:	8019      	strh	r1, [r3, #0]
    81ca:	2300      	movs	r3, #0
    81cc:	6123      	str	r3, [r4, #16]
    81ce:	4616      	mov	r6, r2
    81d0:	e795      	b.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    81d2:	682b      	ldr	r3, [r5, #0]
    81d4:	1d1a      	adds	r2, r3, #4
    81d6:	602a      	str	r2, [r5, #0]
    81d8:	681e      	ldr	r6, [r3, #0]
    81da:	6862      	ldr	r2, [r4, #4]
    81dc:	2100      	movs	r1, #0
    81de:	4630      	mov	r0, r6
    81e0:	f7f7 ff8e 	bl	100 <memchr>
    81e4:	b108      	cbz	r0, 81ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ea>
    81e6:	1b80      	subs	r0, r0, r6
    81e8:	6060      	str	r0, [r4, #4]
    81ea:	6863      	ldr	r3, [r4, #4]
    81ec:	6123      	str	r3, [r4, #16]
    81ee:	2300      	movs	r3, #0
    81f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    81f4:	e783      	b.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    81f6:	6923      	ldr	r3, [r4, #16]
    81f8:	4632      	mov	r2, r6
    81fa:	4649      	mov	r1, r9
    81fc:	4640      	mov	r0, r8
    81fe:	47d0      	blx	sl
    8200:	3001      	adds	r0, #1
    8202:	d086      	beq.n	8112 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x112>
    8204:	6823      	ldr	r3, [r4, #0]
    8206:	079b      	lsls	r3, r3, #30
    8208:	d414      	bmi.n	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    820a:	68e0      	ldr	r0, [r4, #12]
    820c:	9b03      	ldr	r3, [sp, #12]
    820e:	4298      	cmp	r0, r3
    8210:	bfb8      	it	lt
    8212:	4618      	movlt	r0, r3
    8214:	e77f      	b.n	8116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    8216:	2301      	movs	r3, #1
    8218:	4632      	mov	r2, r6
    821a:	4649      	mov	r1, r9
    821c:	4640      	mov	r0, r8
    821e:	47d0      	blx	sl
    8220:	3001      	adds	r0, #1
    8222:	f43f af76 	beq.w	8112 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x112>
    8226:	3501      	adds	r5, #1
    8228:	68e3      	ldr	r3, [r4, #12]
    822a:	9903      	ldr	r1, [sp, #12]
    822c:	1a5b      	subs	r3, r3, r1
    822e:	42ab      	cmp	r3, r5
    8230:	dcf1      	bgt.n	8216 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x216>
    8232:	e7ea      	b.n	820a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20a>
    8234:	2500      	movs	r5, #0
    8236:	f104 0619 	add.w	r6, r4, #25
    823a:	e7f5      	b.n	8228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    823c:	0000d5d0 	.word	0x0000d5d0
    8240:	0000d5e1 	.word	0x0000d5e1

00008244 <__swbuf_r>:
    8244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8246:	460e      	mov	r6, r1
    8248:	4614      	mov	r4, r2
    824a:	4605      	mov	r5, r0
    824c:	b118      	cbz	r0, 8256 <__swbuf_r+0x12>
    824e:	6983      	ldr	r3, [r0, #24]
    8250:	b90b      	cbnz	r3, 8256 <__swbuf_r+0x12>
    8252:	f7ff fc17 	bl	7a84 <__sinit>
    8256:	4b21      	ldr	r3, [pc, #132]	; (82dc <__swbuf_r+0x98>)
    8258:	429c      	cmp	r4, r3
    825a:	d110      	bne.n	827e <__swbuf_r+0x3a>
    825c:	686c      	ldr	r4, [r5, #4]
    825e:	69a3      	ldr	r3, [r4, #24]
    8260:	60a3      	str	r3, [r4, #8]
    8262:	89a3      	ldrh	r3, [r4, #12]
    8264:	071a      	lsls	r2, r3, #28
    8266:	d501      	bpl.n	826c <__swbuf_r+0x28>
    8268:	6923      	ldr	r3, [r4, #16]
    826a:	b993      	cbnz	r3, 8292 <__swbuf_r+0x4e>
    826c:	4621      	mov	r1, r4
    826e:	4628      	mov	r0, r5
    8270:	f000 f84c 	bl	830c <__swsetup_r>
    8274:	b168      	cbz	r0, 8292 <__swbuf_r+0x4e>
    8276:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    827a:	4638      	mov	r0, r7
    827c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    827e:	4b18      	ldr	r3, [pc, #96]	; (82e0 <__swbuf_r+0x9c>)
    8280:	429c      	cmp	r4, r3
    8282:	d101      	bne.n	8288 <__swbuf_r+0x44>
    8284:	68ac      	ldr	r4, [r5, #8]
    8286:	e7ea      	b.n	825e <__swbuf_r+0x1a>
    8288:	4b16      	ldr	r3, [pc, #88]	; (82e4 <__swbuf_r+0xa0>)
    828a:	429c      	cmp	r4, r3
    828c:	bf08      	it	eq
    828e:	68ec      	ldreq	r4, [r5, #12]
    8290:	e7e5      	b.n	825e <__swbuf_r+0x1a>
    8292:	6923      	ldr	r3, [r4, #16]
    8294:	6820      	ldr	r0, [r4, #0]
    8296:	1ac0      	subs	r0, r0, r3
    8298:	6963      	ldr	r3, [r4, #20]
    829a:	b2f6      	uxtb	r6, r6
    829c:	4283      	cmp	r3, r0
    829e:	4637      	mov	r7, r6
    82a0:	dc05      	bgt.n	82ae <__swbuf_r+0x6a>
    82a2:	4621      	mov	r1, r4
    82a4:	4628      	mov	r0, r5
    82a6:	f000 f8ad 	bl	8404 <_fflush_r>
    82aa:	2800      	cmp	r0, #0
    82ac:	d1e3      	bne.n	8276 <__swbuf_r+0x32>
    82ae:	68a3      	ldr	r3, [r4, #8]
    82b0:	3b01      	subs	r3, #1
    82b2:	60a3      	str	r3, [r4, #8]
    82b4:	6823      	ldr	r3, [r4, #0]
    82b6:	1c5a      	adds	r2, r3, #1
    82b8:	6022      	str	r2, [r4, #0]
    82ba:	701e      	strb	r6, [r3, #0]
    82bc:	6963      	ldr	r3, [r4, #20]
    82be:	3001      	adds	r0, #1
    82c0:	4283      	cmp	r3, r0
    82c2:	d004      	beq.n	82ce <__swbuf_r+0x8a>
    82c4:	89a3      	ldrh	r3, [r4, #12]
    82c6:	07db      	lsls	r3, r3, #31
    82c8:	d5d7      	bpl.n	827a <__swbuf_r+0x36>
    82ca:	2e0a      	cmp	r6, #10
    82cc:	d1d5      	bne.n	827a <__swbuf_r+0x36>
    82ce:	4621      	mov	r1, r4
    82d0:	4628      	mov	r0, r5
    82d2:	f000 f897 	bl	8404 <_fflush_r>
    82d6:	2800      	cmp	r0, #0
    82d8:	d0cf      	beq.n	827a <__swbuf_r+0x36>
    82da:	e7cc      	b.n	8276 <__swbuf_r+0x32>
    82dc:	0000c314 	.word	0x0000c314
    82e0:	0000c2f4 	.word	0x0000c2f4
    82e4:	0000c2d4 	.word	0x0000c2d4

000082e8 <_write_r>:
    82e8:	b538      	push	{r3, r4, r5, lr}
    82ea:	4d07      	ldr	r5, [pc, #28]	; (8308 <_write_r+0x20>)
    82ec:	4604      	mov	r4, r0
    82ee:	4608      	mov	r0, r1
    82f0:	4611      	mov	r1, r2
    82f2:	2200      	movs	r2, #0
    82f4:	602a      	str	r2, [r5, #0]
    82f6:	461a      	mov	r2, r3
    82f8:	f001 fce1 	bl	9cbe <_write>
    82fc:	1c43      	adds	r3, r0, #1
    82fe:	d102      	bne.n	8306 <_write_r+0x1e>
    8300:	682b      	ldr	r3, [r5, #0]
    8302:	b103      	cbz	r3, 8306 <_write_r+0x1e>
    8304:	6023      	str	r3, [r4, #0]
    8306:	bd38      	pop	{r3, r4, r5, pc}
    8308:	20001670 	.word	0x20001670

0000830c <__swsetup_r>:
    830c:	4b31      	ldr	r3, [pc, #196]	; (83d4 <__swsetup_r+0xc8>)
    830e:	b570      	push	{r4, r5, r6, lr}
    8310:	681d      	ldr	r5, [r3, #0]
    8312:	4606      	mov	r6, r0
    8314:	460c      	mov	r4, r1
    8316:	b125      	cbz	r5, 8322 <__swsetup_r+0x16>
    8318:	69ab      	ldr	r3, [r5, #24]
    831a:	b913      	cbnz	r3, 8322 <__swsetup_r+0x16>
    831c:	4628      	mov	r0, r5
    831e:	f7ff fbb1 	bl	7a84 <__sinit>
    8322:	4b2d      	ldr	r3, [pc, #180]	; (83d8 <__swsetup_r+0xcc>)
    8324:	429c      	cmp	r4, r3
    8326:	d10e      	bne.n	8346 <__swsetup_r+0x3a>
    8328:	686c      	ldr	r4, [r5, #4]
    832a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    832e:	071a      	lsls	r2, r3, #28
    8330:	d42c      	bmi.n	838c <__swsetup_r+0x80>
    8332:	06dd      	lsls	r5, r3, #27
    8334:	d411      	bmi.n	835a <__swsetup_r+0x4e>
    8336:	2209      	movs	r2, #9
    8338:	6032      	str	r2, [r6, #0]
    833a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    833e:	81a3      	strh	r3, [r4, #12]
    8340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8344:	e03d      	b.n	83c2 <__swsetup_r+0xb6>
    8346:	4b25      	ldr	r3, [pc, #148]	; (83dc <__swsetup_r+0xd0>)
    8348:	429c      	cmp	r4, r3
    834a:	d101      	bne.n	8350 <__swsetup_r+0x44>
    834c:	68ac      	ldr	r4, [r5, #8]
    834e:	e7ec      	b.n	832a <__swsetup_r+0x1e>
    8350:	4b23      	ldr	r3, [pc, #140]	; (83e0 <__swsetup_r+0xd4>)
    8352:	429c      	cmp	r4, r3
    8354:	bf08      	it	eq
    8356:	68ec      	ldreq	r4, [r5, #12]
    8358:	e7e7      	b.n	832a <__swsetup_r+0x1e>
    835a:	0758      	lsls	r0, r3, #29
    835c:	d512      	bpl.n	8384 <__swsetup_r+0x78>
    835e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8360:	b141      	cbz	r1, 8374 <__swsetup_r+0x68>
    8362:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8366:	4299      	cmp	r1, r3
    8368:	d002      	beq.n	8370 <__swsetup_r+0x64>
    836a:	4630      	mov	r0, r6
    836c:	f7ff f944 	bl	75f8 <_free_r>
    8370:	2300      	movs	r3, #0
    8372:	6363      	str	r3, [r4, #52]	; 0x34
    8374:	89a3      	ldrh	r3, [r4, #12]
    8376:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    837a:	81a3      	strh	r3, [r4, #12]
    837c:	2300      	movs	r3, #0
    837e:	6063      	str	r3, [r4, #4]
    8380:	6923      	ldr	r3, [r4, #16]
    8382:	6023      	str	r3, [r4, #0]
    8384:	89a3      	ldrh	r3, [r4, #12]
    8386:	f043 0308 	orr.w	r3, r3, #8
    838a:	81a3      	strh	r3, [r4, #12]
    838c:	6923      	ldr	r3, [r4, #16]
    838e:	b94b      	cbnz	r3, 83a4 <__swsetup_r+0x98>
    8390:	89a3      	ldrh	r3, [r4, #12]
    8392:	f403 7320 	and.w	r3, r3, #640	; 0x280
    8396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    839a:	d003      	beq.n	83a4 <__swsetup_r+0x98>
    839c:	4621      	mov	r1, r4
    839e:	4630      	mov	r0, r6
    83a0:	f000 f87e 	bl	84a0 <__smakebuf_r>
    83a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    83a8:	f013 0201 	ands.w	r2, r3, #1
    83ac:	d00a      	beq.n	83c4 <__swsetup_r+0xb8>
    83ae:	2200      	movs	r2, #0
    83b0:	60a2      	str	r2, [r4, #8]
    83b2:	6962      	ldr	r2, [r4, #20]
    83b4:	4252      	negs	r2, r2
    83b6:	61a2      	str	r2, [r4, #24]
    83b8:	6922      	ldr	r2, [r4, #16]
    83ba:	b942      	cbnz	r2, 83ce <__swsetup_r+0xc2>
    83bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    83c0:	d1bb      	bne.n	833a <__swsetup_r+0x2e>
    83c2:	bd70      	pop	{r4, r5, r6, pc}
    83c4:	0799      	lsls	r1, r3, #30
    83c6:	bf58      	it	pl
    83c8:	6962      	ldrpl	r2, [r4, #20]
    83ca:	60a2      	str	r2, [r4, #8]
    83cc:	e7f4      	b.n	83b8 <__swsetup_r+0xac>
    83ce:	2000      	movs	r0, #0
    83d0:	e7f7      	b.n	83c2 <__swsetup_r+0xb6>
    83d2:	bf00      	nop
    83d4:	20000214 	.word	0x20000214
    83d8:	0000c314 	.word	0x0000c314
    83dc:	0000c2f4 	.word	0x0000c2f4
    83e0:	0000c2d4 	.word	0x0000c2d4

000083e4 <_close_r>:
    83e4:	b538      	push	{r3, r4, r5, lr}
    83e6:	4d06      	ldr	r5, [pc, #24]	; (8400 <_close_r+0x1c>)
    83e8:	2300      	movs	r3, #0
    83ea:	4604      	mov	r4, r0
    83ec:	4608      	mov	r0, r1
    83ee:	602b      	str	r3, [r5, #0]
    83f0:	f001 fc69 	bl	9cc6 <_close>
    83f4:	1c43      	adds	r3, r0, #1
    83f6:	d102      	bne.n	83fe <_close_r+0x1a>
    83f8:	682b      	ldr	r3, [r5, #0]
    83fa:	b103      	cbz	r3, 83fe <_close_r+0x1a>
    83fc:	6023      	str	r3, [r4, #0]
    83fe:	bd38      	pop	{r3, r4, r5, pc}
    8400:	20001670 	.word	0x20001670

00008404 <_fflush_r>:
    8404:	b538      	push	{r3, r4, r5, lr}
    8406:	690b      	ldr	r3, [r1, #16]
    8408:	4605      	mov	r5, r0
    840a:	460c      	mov	r4, r1
    840c:	b913      	cbnz	r3, 8414 <_fflush_r+0x10>
    840e:	2500      	movs	r5, #0
    8410:	4628      	mov	r0, r5
    8412:	bd38      	pop	{r3, r4, r5, pc}
    8414:	b118      	cbz	r0, 841e <_fflush_r+0x1a>
    8416:	6983      	ldr	r3, [r0, #24]
    8418:	b90b      	cbnz	r3, 841e <_fflush_r+0x1a>
    841a:	f7ff fb33 	bl	7a84 <__sinit>
    841e:	4b14      	ldr	r3, [pc, #80]	; (8470 <_fflush_r+0x6c>)
    8420:	429c      	cmp	r4, r3
    8422:	d11b      	bne.n	845c <_fflush_r+0x58>
    8424:	686c      	ldr	r4, [r5, #4]
    8426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    842a:	2b00      	cmp	r3, #0
    842c:	d0ef      	beq.n	840e <_fflush_r+0xa>
    842e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8430:	07d0      	lsls	r0, r2, #31
    8432:	d404      	bmi.n	843e <_fflush_r+0x3a>
    8434:	0599      	lsls	r1, r3, #22
    8436:	d402      	bmi.n	843e <_fflush_r+0x3a>
    8438:	6da0      	ldr	r0, [r4, #88]	; 0x58
    843a:	f001 fc5d 	bl	9cf8 <__retarget_lock_acquire_recursive>
    843e:	4628      	mov	r0, r5
    8440:	4621      	mov	r1, r4
    8442:	f002 fd57 	bl	aef4 <__sflush_r>
    8446:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8448:	07da      	lsls	r2, r3, #31
    844a:	4605      	mov	r5, r0
    844c:	d4e0      	bmi.n	8410 <_fflush_r+0xc>
    844e:	89a3      	ldrh	r3, [r4, #12]
    8450:	059b      	lsls	r3, r3, #22
    8452:	d4dd      	bmi.n	8410 <_fflush_r+0xc>
    8454:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8456:	f001 fc55 	bl	9d04 <__retarget_lock_release_recursive>
    845a:	e7d9      	b.n	8410 <_fflush_r+0xc>
    845c:	4b05      	ldr	r3, [pc, #20]	; (8474 <_fflush_r+0x70>)
    845e:	429c      	cmp	r4, r3
    8460:	d101      	bne.n	8466 <_fflush_r+0x62>
    8462:	68ac      	ldr	r4, [r5, #8]
    8464:	e7df      	b.n	8426 <_fflush_r+0x22>
    8466:	4b04      	ldr	r3, [pc, #16]	; (8478 <_fflush_r+0x74>)
    8468:	429c      	cmp	r4, r3
    846a:	bf08      	it	eq
    846c:	68ec      	ldreq	r4, [r5, #12]
    846e:	e7da      	b.n	8426 <_fflush_r+0x22>
    8470:	0000c314 	.word	0x0000c314
    8474:	0000c2f4 	.word	0x0000c2f4
    8478:	0000c2d4 	.word	0x0000c2d4

0000847c <_lseek_r>:
    847c:	b538      	push	{r3, r4, r5, lr}
    847e:	4d07      	ldr	r5, [pc, #28]	; (849c <_lseek_r+0x20>)
    8480:	4604      	mov	r4, r0
    8482:	4608      	mov	r0, r1
    8484:	4611      	mov	r1, r2
    8486:	2200      	movs	r2, #0
    8488:	602a      	str	r2, [r5, #0]
    848a:	461a      	mov	r2, r3
    848c:	f001 fc1e 	bl	9ccc <_lseek>
    8490:	1c43      	adds	r3, r0, #1
    8492:	d102      	bne.n	849a <_lseek_r+0x1e>
    8494:	682b      	ldr	r3, [r5, #0]
    8496:	b103      	cbz	r3, 849a <_lseek_r+0x1e>
    8498:	6023      	str	r3, [r4, #0]
    849a:	bd38      	pop	{r3, r4, r5, pc}
    849c:	20001670 	.word	0x20001670

000084a0 <__smakebuf_r>:
    84a0:	898b      	ldrh	r3, [r1, #12]
    84a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    84a4:	079d      	lsls	r5, r3, #30
    84a6:	4606      	mov	r6, r0
    84a8:	460c      	mov	r4, r1
    84aa:	d507      	bpl.n	84bc <__smakebuf_r+0x1c>
    84ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
    84b0:	6023      	str	r3, [r4, #0]
    84b2:	6123      	str	r3, [r4, #16]
    84b4:	2301      	movs	r3, #1
    84b6:	6163      	str	r3, [r4, #20]
    84b8:	b003      	add	sp, #12
    84ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84bc:	ab01      	add	r3, sp, #4
    84be:	466a      	mov	r2, sp
    84c0:	f002 fd98 	bl	aff4 <__swhatbuf_r>
    84c4:	9f00      	ldr	r7, [sp, #0]
    84c6:	4605      	mov	r5, r0
    84c8:	4639      	mov	r1, r7
    84ca:	4630      	mov	r0, r6
    84cc:	f7ff f8de 	bl	768c <_malloc_r>
    84d0:	b948      	cbnz	r0, 84e6 <__smakebuf_r+0x46>
    84d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    84d6:	059a      	lsls	r2, r3, #22
    84d8:	d4ee      	bmi.n	84b8 <__smakebuf_r+0x18>
    84da:	f023 0303 	bic.w	r3, r3, #3
    84de:	f043 0302 	orr.w	r3, r3, #2
    84e2:	81a3      	strh	r3, [r4, #12]
    84e4:	e7e2      	b.n	84ac <__smakebuf_r+0xc>
    84e6:	4b0d      	ldr	r3, [pc, #52]	; (851c <__smakebuf_r+0x7c>)
    84e8:	62b3      	str	r3, [r6, #40]	; 0x28
    84ea:	89a3      	ldrh	r3, [r4, #12]
    84ec:	6020      	str	r0, [r4, #0]
    84ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    84f2:	81a3      	strh	r3, [r4, #12]
    84f4:	9b01      	ldr	r3, [sp, #4]
    84f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
    84fa:	b15b      	cbz	r3, 8514 <__smakebuf_r+0x74>
    84fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    8500:	4630      	mov	r0, r6
    8502:	f000 f831 	bl	8568 <_isatty_r>
    8506:	b128      	cbz	r0, 8514 <__smakebuf_r+0x74>
    8508:	89a3      	ldrh	r3, [r4, #12]
    850a:	f023 0303 	bic.w	r3, r3, #3
    850e:	f043 0301 	orr.w	r3, r3, #1
    8512:	81a3      	strh	r3, [r4, #12]
    8514:	89a3      	ldrh	r3, [r4, #12]
    8516:	431d      	orrs	r5, r3
    8518:	81a5      	strh	r5, [r4, #12]
    851a:	e7cd      	b.n	84b8 <__smakebuf_r+0x18>
    851c:	00007a49 	.word	0x00007a49

00008520 <_read_r>:
    8520:	b538      	push	{r3, r4, r5, lr}
    8522:	4d07      	ldr	r5, [pc, #28]	; (8540 <_read_r+0x20>)
    8524:	4604      	mov	r4, r0
    8526:	4608      	mov	r0, r1
    8528:	4611      	mov	r1, r2
    852a:	2200      	movs	r2, #0
    852c:	602a      	str	r2, [r5, #0]
    852e:	461a      	mov	r2, r3
    8530:	f001 fbc1 	bl	9cb6 <_read>
    8534:	1c43      	adds	r3, r0, #1
    8536:	d102      	bne.n	853e <_read_r+0x1e>
    8538:	682b      	ldr	r3, [r5, #0]
    853a:	b103      	cbz	r3, 853e <_read_r+0x1e>
    853c:	6023      	str	r3, [r4, #0]
    853e:	bd38      	pop	{r3, r4, r5, pc}
    8540:	20001670 	.word	0x20001670

00008544 <_fstat_r>:
    8544:	b538      	push	{r3, r4, r5, lr}
    8546:	4d07      	ldr	r5, [pc, #28]	; (8564 <_fstat_r+0x20>)
    8548:	2300      	movs	r3, #0
    854a:	4604      	mov	r4, r0
    854c:	4608      	mov	r0, r1
    854e:	4611      	mov	r1, r2
    8550:	602b      	str	r3, [r5, #0]
    8552:	f001 fbc2 	bl	9cda <_fstat>
    8556:	1c43      	adds	r3, r0, #1
    8558:	d102      	bne.n	8560 <_fstat_r+0x1c>
    855a:	682b      	ldr	r3, [r5, #0]
    855c:	b103      	cbz	r3, 8560 <_fstat_r+0x1c>
    855e:	6023      	str	r3, [r4, #0]
    8560:	bd38      	pop	{r3, r4, r5, pc}
    8562:	bf00      	nop
    8564:	20001670 	.word	0x20001670

00008568 <_isatty_r>:
    8568:	b538      	push	{r3, r4, r5, lr}
    856a:	4d06      	ldr	r5, [pc, #24]	; (8584 <_isatty_r+0x1c>)
    856c:	2300      	movs	r3, #0
    856e:	4604      	mov	r4, r0
    8570:	4608      	mov	r0, r1
    8572:	602b      	str	r3, [r5, #0]
    8574:	f001 fbac 	bl	9cd0 <_isatty>
    8578:	1c43      	adds	r3, r0, #1
    857a:	d102      	bne.n	8582 <_isatty_r+0x1a>
    857c:	682b      	ldr	r3, [r5, #0]
    857e:	b103      	cbz	r3, 8582 <_isatty_r+0x1a>
    8580:	6023      	str	r3, [r4, #0]
    8582:	bd38      	pop	{r3, r4, r5, pc}
    8584:	20001670 	.word	0x20001670

00008588 <nrf_cc3xx_platform_init_no_rng>:
    8588:	b510      	push	{r4, lr}
    858a:	4c0a      	ldr	r4, [pc, #40]	; (85b4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    858c:	6823      	ldr	r3, [r4, #0]
    858e:	b11b      	cbz	r3, 8598 <nrf_cc3xx_platform_init_no_rng+0x10>
    8590:	2301      	movs	r3, #1
    8592:	6023      	str	r3, [r4, #0]
    8594:	2000      	movs	r0, #0
    8596:	bd10      	pop	{r4, pc}
    8598:	f000 f8e6 	bl	8768 <CC_LibInitNoRng>
    859c:	2800      	cmp	r0, #0
    859e:	d0f7      	beq.n	8590 <nrf_cc3xx_platform_init_no_rng+0x8>
    85a0:	3801      	subs	r0, #1
    85a2:	2806      	cmp	r0, #6
    85a4:	d803      	bhi.n	85ae <nrf_cc3xx_platform_init_no_rng+0x26>
    85a6:	4b04      	ldr	r3, [pc, #16]	; (85b8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    85a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    85ac:	bd10      	pop	{r4, pc}
    85ae:	4803      	ldr	r0, [pc, #12]	; (85bc <nrf_cc3xx_platform_init_no_rng+0x34>)
    85b0:	bd10      	pop	{r4, pc}
    85b2:	bf00      	nop
    85b4:	20001674 	.word	0x20001674
    85b8:	0000c334 	.word	0x0000c334
    85bc:	ffff8ffe 	.word	0xffff8ffe

000085c0 <nrf_cc3xx_platform_abort>:
    85c0:	f3bf 8f4f 	dsb	sy
    85c4:	4905      	ldr	r1, [pc, #20]	; (85dc <nrf_cc3xx_platform_abort+0x1c>)
    85c6:	4b06      	ldr	r3, [pc, #24]	; (85e0 <nrf_cc3xx_platform_abort+0x20>)
    85c8:	68ca      	ldr	r2, [r1, #12]
    85ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    85ce:	4313      	orrs	r3, r2
    85d0:	60cb      	str	r3, [r1, #12]
    85d2:	f3bf 8f4f 	dsb	sy
    85d6:	bf00      	nop
    85d8:	e7fd      	b.n	85d6 <nrf_cc3xx_platform_abort+0x16>
    85da:	bf00      	nop
    85dc:	e000ed00 	.word	0xe000ed00
    85e0:	05fa0004 	.word	0x05fa0004

000085e4 <CC_PalAbort>:
    85e4:	b410      	push	{r4}
    85e6:	4b09      	ldr	r3, [pc, #36]	; (860c <CC_PalAbort+0x28>)
    85e8:	4909      	ldr	r1, [pc, #36]	; (8610 <CC_PalAbort+0x2c>)
    85ea:	4c0a      	ldr	r4, [pc, #40]	; (8614 <CC_PalAbort+0x30>)
    85ec:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    85f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    85f4:	6849      	ldr	r1, [r1, #4]
    85f6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    85fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    85fe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8602:	2300      	movs	r3, #0
    8604:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8608:	bc10      	pop	{r4}
    860a:	4708      	bx	r1
    860c:	5002b000 	.word	0x5002b000
    8610:	20000278 	.word	0x20000278
    8614:	5002a000 	.word	0x5002a000

00008618 <nrf_cc3xx_platform_set_abort>:
    8618:	e9d0 1200 	ldrd	r1, r2, [r0]
    861c:	4b01      	ldr	r3, [pc, #4]	; (8624 <nrf_cc3xx_platform_set_abort+0xc>)
    861e:	e9c3 1200 	strd	r1, r2, [r3]
    8622:	4770      	bx	lr
    8624:	20000278 	.word	0x20000278

00008628 <mutex_free>:
    8628:	b510      	push	{r4, lr}
    862a:	4604      	mov	r4, r0
    862c:	b150      	cbz	r0, 8644 <mutex_free+0x1c>
    862e:	6863      	ldr	r3, [r4, #4]
    8630:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8634:	d005      	beq.n	8642 <mutex_free+0x1a>
    8636:	4a06      	ldr	r2, [pc, #24]	; (8650 <mutex_free+0x28>)
    8638:	4293      	cmp	r3, r2
    863a:	d002      	beq.n	8642 <mutex_free+0x1a>
    863c:	2300      	movs	r3, #0
    863e:	6023      	str	r3, [r4, #0]
    8640:	6062      	str	r2, [r4, #4]
    8642:	bd10      	pop	{r4, pc}
    8644:	4b03      	ldr	r3, [pc, #12]	; (8654 <mutex_free+0x2c>)
    8646:	4804      	ldr	r0, [pc, #16]	; (8658 <mutex_free+0x30>)
    8648:	685b      	ldr	r3, [r3, #4]
    864a:	4798      	blx	r3
    864c:	e7ef      	b.n	862e <mutex_free+0x6>
    864e:	bf00      	nop
    8650:	a95c5f2c 	.word	0xa95c5f2c
    8654:	20000278 	.word	0x20000278
    8658:	0000c350 	.word	0x0000c350

0000865c <mutex_lock>:
    865c:	b1c8      	cbz	r0, 8692 <mutex_lock+0x36>
    865e:	6843      	ldr	r3, [r0, #4]
    8660:	4a0d      	ldr	r2, [pc, #52]	; (8698 <mutex_lock+0x3c>)
    8662:	4293      	cmp	r3, r2
    8664:	d013      	beq.n	868e <mutex_lock+0x32>
    8666:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    866a:	d00e      	beq.n	868a <mutex_lock+0x2e>
    866c:	2301      	movs	r3, #1
    866e:	e850 2f00 	ldrex	r2, [r0]
    8672:	4619      	mov	r1, r3
    8674:	e840 1c00 	strex	ip, r1, [r0]
    8678:	f09c 0f00 	teq	ip, #0
    867c:	d1f7      	bne.n	866e <mutex_lock+0x12>
    867e:	2a01      	cmp	r2, #1
    8680:	d0f5      	beq.n	866e <mutex_lock+0x12>
    8682:	f3bf 8f5f 	dmb	sy
    8686:	2000      	movs	r0, #0
    8688:	4770      	bx	lr
    868a:	4804      	ldr	r0, [pc, #16]	; (869c <mutex_lock+0x40>)
    868c:	4770      	bx	lr
    868e:	4804      	ldr	r0, [pc, #16]	; (86a0 <mutex_lock+0x44>)
    8690:	4770      	bx	lr
    8692:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8696:	4770      	bx	lr
    8698:	a95c5f2c 	.word	0xa95c5f2c
    869c:	ffff8fe9 	.word	0xffff8fe9
    86a0:	ffff8fea 	.word	0xffff8fea

000086a4 <mutex_unlock>:
    86a4:	b180      	cbz	r0, 86c8 <mutex_unlock+0x24>
    86a6:	6843      	ldr	r3, [r0, #4]
    86a8:	4a09      	ldr	r2, [pc, #36]	; (86d0 <mutex_unlock+0x2c>)
    86aa:	4293      	cmp	r3, r2
    86ac:	d00a      	beq.n	86c4 <mutex_unlock+0x20>
    86ae:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    86b2:	d005      	beq.n	86c0 <mutex_unlock+0x1c>
    86b4:	f3bf 8f5f 	dmb	sy
    86b8:	2300      	movs	r3, #0
    86ba:	6003      	str	r3, [r0, #0]
    86bc:	4618      	mov	r0, r3
    86be:	4770      	bx	lr
    86c0:	4804      	ldr	r0, [pc, #16]	; (86d4 <mutex_unlock+0x30>)
    86c2:	4770      	bx	lr
    86c4:	4804      	ldr	r0, [pc, #16]	; (86d8 <mutex_unlock+0x34>)
    86c6:	4770      	bx	lr
    86c8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    86cc:	4770      	bx	lr
    86ce:	bf00      	nop
    86d0:	a95c5f2c 	.word	0xa95c5f2c
    86d4:	ffff8fe9 	.word	0xffff8fe9
    86d8:	ffff8fea 	.word	0xffff8fea

000086dc <mutex_init>:
    86dc:	b510      	push	{r4, lr}
    86de:	4604      	mov	r4, r0
    86e0:	b120      	cbz	r0, 86ec <mutex_init+0x10>
    86e2:	4b04      	ldr	r3, [pc, #16]	; (86f4 <mutex_init+0x18>)
    86e4:	6063      	str	r3, [r4, #4]
    86e6:	2200      	movs	r2, #0
    86e8:	6022      	str	r2, [r4, #0]
    86ea:	bd10      	pop	{r4, pc}
    86ec:	4802      	ldr	r0, [pc, #8]	; (86f8 <mutex_init+0x1c>)
    86ee:	f7ff ff79 	bl	85e4 <CC_PalAbort>
    86f2:	e7f6      	b.n	86e2 <mutex_init+0x6>
    86f4:	3a00003a 	.word	0x3a00003a
    86f8:	0000c378 	.word	0x0000c378

000086fc <nrf_cc3xx_platform_set_mutexes>:
    86fc:	b570      	push	{r4, r5, r6, lr}
    86fe:	e9d0 2300 	ldrd	r2, r3, [r0]
    8702:	4c15      	ldr	r4, [pc, #84]	; (8758 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8704:	4d15      	ldr	r5, [pc, #84]	; (875c <nrf_cc3xx_platform_set_mutexes+0x60>)
    8706:	6063      	str	r3, [r4, #4]
    8708:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    870c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8710:	6022      	str	r2, [r4, #0]
    8712:	4b13      	ldr	r3, [pc, #76]	; (8760 <nrf_cc3xx_platform_set_mutexes+0x64>)
    8714:	6808      	ldr	r0, [r1, #0]
    8716:	6018      	str	r0, [r3, #0]
    8718:	6848      	ldr	r0, [r1, #4]
    871a:	6058      	str	r0, [r3, #4]
    871c:	6888      	ldr	r0, [r1, #8]
    871e:	6098      	str	r0, [r3, #8]
    8720:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    8724:	60d8      	str	r0, [r3, #12]
    8726:	6119      	str	r1, [r3, #16]
    8728:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    872c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8730:	d010      	beq.n	8754 <nrf_cc3xx_platform_set_mutexes+0x58>
    8732:	490c      	ldr	r1, [pc, #48]	; (8764 <nrf_cc3xx_platform_set_mutexes+0x68>)
    8734:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    8738:	2300      	movs	r3, #0
    873a:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    873e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8742:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    8746:	4790      	blx	r2
    8748:	6823      	ldr	r3, [r4, #0]
    874a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    874e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8752:	4718      	bx	r3
    8754:	bd70      	pop	{r4, r5, r6, pc}
    8756:	bf00      	nop
    8758:	20000288 	.word	0x20000288
    875c:	2000168c 	.word	0x2000168c
    8760:	20000298 	.word	0x20000298
    8764:	a95c5f2c 	.word	0xa95c5f2c

00008768 <CC_LibInitNoRng>:
    8768:	b538      	push	{r3, r4, r5, lr}
    876a:	f000 f82f 	bl	87cc <CC_HalInit>
    876e:	b120      	cbz	r0, 877a <CC_LibInitNoRng+0x12>
    8770:	2403      	movs	r4, #3
    8772:	f000 f863 	bl	883c <CC_PalTerminate>
    8776:	4620      	mov	r0, r4
    8778:	bd38      	pop	{r3, r4, r5, pc}
    877a:	f000 f831 	bl	87e0 <CC_PalInit>
    877e:	b998      	cbnz	r0, 87a8 <CC_LibInitNoRng+0x40>
    8780:	f000 f8ac 	bl	88dc <CC_PalPowerSaveModeSelect>
    8784:	b998      	cbnz	r0, 87ae <CC_LibInitNoRng+0x46>
    8786:	4d0f      	ldr	r5, [pc, #60]	; (87c4 <CC_LibInitNoRng+0x5c>)
    8788:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    878c:	0e1b      	lsrs	r3, r3, #24
    878e:	2bf0      	cmp	r3, #240	; 0xf0
    8790:	d108      	bne.n	87a4 <CC_LibInitNoRng+0x3c>
    8792:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8796:	4b0c      	ldr	r3, [pc, #48]	; (87c8 <CC_LibInitNoRng+0x60>)
    8798:	429a      	cmp	r2, r3
    879a:	d00a      	beq.n	87b2 <CC_LibInitNoRng+0x4a>
    879c:	2407      	movs	r4, #7
    879e:	f000 f817 	bl	87d0 <CC_HalTerminate>
    87a2:	e7e6      	b.n	8772 <CC_LibInitNoRng+0xa>
    87a4:	2406      	movs	r4, #6
    87a6:	e7fa      	b.n	879e <CC_LibInitNoRng+0x36>
    87a8:	2404      	movs	r4, #4
    87aa:	4620      	mov	r0, r4
    87ac:	bd38      	pop	{r3, r4, r5, pc}
    87ae:	2400      	movs	r4, #0
    87b0:	e7f5      	b.n	879e <CC_LibInitNoRng+0x36>
    87b2:	2001      	movs	r0, #1
    87b4:	f000 f892 	bl	88dc <CC_PalPowerSaveModeSelect>
    87b8:	4604      	mov	r4, r0
    87ba:	2800      	cmp	r0, #0
    87bc:	d1f7      	bne.n	87ae <CC_LibInitNoRng+0x46>
    87be:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    87c2:	e7d8      	b.n	8776 <CC_LibInitNoRng+0xe>
    87c4:	5002b000 	.word	0x5002b000
    87c8:	20e00000 	.word	0x20e00000

000087cc <CC_HalInit>:
    87cc:	2000      	movs	r0, #0
    87ce:	4770      	bx	lr

000087d0 <CC_HalTerminate>:
    87d0:	2000      	movs	r0, #0
    87d2:	4770      	bx	lr

000087d4 <CC_HalMaskInterrupt>:
    87d4:	4b01      	ldr	r3, [pc, #4]	; (87dc <CC_HalMaskInterrupt+0x8>)
    87d6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    87da:	4770      	bx	lr
    87dc:	5002b000 	.word	0x5002b000

000087e0 <CC_PalInit>:
    87e0:	b510      	push	{r4, lr}
    87e2:	4811      	ldr	r0, [pc, #68]	; (8828 <CC_PalInit+0x48>)
    87e4:	f000 f848 	bl	8878 <CC_PalMutexCreate>
    87e8:	b100      	cbz	r0, 87ec <CC_PalInit+0xc>
    87ea:	bd10      	pop	{r4, pc}
    87ec:	480f      	ldr	r0, [pc, #60]	; (882c <CC_PalInit+0x4c>)
    87ee:	f000 f843 	bl	8878 <CC_PalMutexCreate>
    87f2:	2800      	cmp	r0, #0
    87f4:	d1f9      	bne.n	87ea <CC_PalInit+0xa>
    87f6:	4c0e      	ldr	r4, [pc, #56]	; (8830 <CC_PalInit+0x50>)
    87f8:	4620      	mov	r0, r4
    87fa:	f000 f83d 	bl	8878 <CC_PalMutexCreate>
    87fe:	2800      	cmp	r0, #0
    8800:	d1f3      	bne.n	87ea <CC_PalInit+0xa>
    8802:	4b0c      	ldr	r3, [pc, #48]	; (8834 <CC_PalInit+0x54>)
    8804:	480c      	ldr	r0, [pc, #48]	; (8838 <CC_PalInit+0x58>)
    8806:	601c      	str	r4, [r3, #0]
    8808:	f000 f836 	bl	8878 <CC_PalMutexCreate>
    880c:	4601      	mov	r1, r0
    880e:	2800      	cmp	r0, #0
    8810:	d1eb      	bne.n	87ea <CC_PalInit+0xa>
    8812:	f000 f82d 	bl	8870 <CC_PalDmaInit>
    8816:	4604      	mov	r4, r0
    8818:	b108      	cbz	r0, 881e <CC_PalInit+0x3e>
    881a:	4620      	mov	r0, r4
    881c:	bd10      	pop	{r4, pc}
    881e:	f000 f83f 	bl	88a0 <CC_PalPowerSaveModeInit>
    8822:	4620      	mov	r0, r4
    8824:	e7fa      	b.n	881c <CC_PalInit+0x3c>
    8826:	bf00      	nop
    8828:	200002d0 	.word	0x200002d0
    882c:	200002c4 	.word	0x200002c4
    8830:	200002cc 	.word	0x200002cc
    8834:	200002d4 	.word	0x200002d4
    8838:	200002c8 	.word	0x200002c8

0000883c <CC_PalTerminate>:
    883c:	b508      	push	{r3, lr}
    883e:	4808      	ldr	r0, [pc, #32]	; (8860 <CC_PalTerminate+0x24>)
    8840:	f000 f824 	bl	888c <CC_PalMutexDestroy>
    8844:	4807      	ldr	r0, [pc, #28]	; (8864 <CC_PalTerminate+0x28>)
    8846:	f000 f821 	bl	888c <CC_PalMutexDestroy>
    884a:	4807      	ldr	r0, [pc, #28]	; (8868 <CC_PalTerminate+0x2c>)
    884c:	f000 f81e 	bl	888c <CC_PalMutexDestroy>
    8850:	4806      	ldr	r0, [pc, #24]	; (886c <CC_PalTerminate+0x30>)
    8852:	f000 f81b 	bl	888c <CC_PalMutexDestroy>
    8856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    885a:	f000 b80b 	b.w	8874 <CC_PalDmaTerminate>
    885e:	bf00      	nop
    8860:	200002d0 	.word	0x200002d0
    8864:	200002c4 	.word	0x200002c4
    8868:	200002cc 	.word	0x200002cc
    886c:	200002c8 	.word	0x200002c8

00008870 <CC_PalDmaInit>:
    8870:	2000      	movs	r0, #0
    8872:	4770      	bx	lr

00008874 <CC_PalDmaTerminate>:
    8874:	4770      	bx	lr
    8876:	bf00      	nop

00008878 <CC_PalMutexCreate>:
    8878:	b508      	push	{r3, lr}
    887a:	4b03      	ldr	r3, [pc, #12]	; (8888 <CC_PalMutexCreate+0x10>)
    887c:	6802      	ldr	r2, [r0, #0]
    887e:	681b      	ldr	r3, [r3, #0]
    8880:	6810      	ldr	r0, [r2, #0]
    8882:	4798      	blx	r3
    8884:	2000      	movs	r0, #0
    8886:	bd08      	pop	{r3, pc}
    8888:	20000288 	.word	0x20000288

0000888c <CC_PalMutexDestroy>:
    888c:	b508      	push	{r3, lr}
    888e:	4b03      	ldr	r3, [pc, #12]	; (889c <CC_PalMutexDestroy+0x10>)
    8890:	6802      	ldr	r2, [r0, #0]
    8892:	685b      	ldr	r3, [r3, #4]
    8894:	6810      	ldr	r0, [r2, #0]
    8896:	4798      	blx	r3
    8898:	2000      	movs	r0, #0
    889a:	bd08      	pop	{r3, pc}
    889c:	20000288 	.word	0x20000288

000088a0 <CC_PalPowerSaveModeInit>:
    88a0:	b570      	push	{r4, r5, r6, lr}
    88a2:	4c09      	ldr	r4, [pc, #36]	; (88c8 <CC_PalPowerSaveModeInit+0x28>)
    88a4:	4d09      	ldr	r5, [pc, #36]	; (88cc <CC_PalPowerSaveModeInit+0x2c>)
    88a6:	6920      	ldr	r0, [r4, #16]
    88a8:	68ab      	ldr	r3, [r5, #8]
    88aa:	4798      	blx	r3
    88ac:	b118      	cbz	r0, 88b6 <CC_PalPowerSaveModeInit+0x16>
    88ae:	4b08      	ldr	r3, [pc, #32]	; (88d0 <CC_PalPowerSaveModeInit+0x30>)
    88b0:	4808      	ldr	r0, [pc, #32]	; (88d4 <CC_PalPowerSaveModeInit+0x34>)
    88b2:	685b      	ldr	r3, [r3, #4]
    88b4:	4798      	blx	r3
    88b6:	4a08      	ldr	r2, [pc, #32]	; (88d8 <CC_PalPowerSaveModeInit+0x38>)
    88b8:	68eb      	ldr	r3, [r5, #12]
    88ba:	6920      	ldr	r0, [r4, #16]
    88bc:	2100      	movs	r1, #0
    88be:	6011      	str	r1, [r2, #0]
    88c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88c4:	4718      	bx	r3
    88c6:	bf00      	nop
    88c8:	20000298 	.word	0x20000298
    88cc:	20000288 	.word	0x20000288
    88d0:	20000278 	.word	0x20000278
    88d4:	0000c39c 	.word	0x0000c39c
    88d8:	20001688 	.word	0x20001688

000088dc <CC_PalPowerSaveModeSelect>:
    88dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88de:	4d1a      	ldr	r5, [pc, #104]	; (8948 <CC_PalPowerSaveModeSelect+0x6c>)
    88e0:	4e1a      	ldr	r6, [pc, #104]	; (894c <CC_PalPowerSaveModeSelect+0x70>)
    88e2:	4604      	mov	r4, r0
    88e4:	68b2      	ldr	r2, [r6, #8]
    88e6:	6928      	ldr	r0, [r5, #16]
    88e8:	4790      	blx	r2
    88ea:	b9e8      	cbnz	r0, 8928 <CC_PalPowerSaveModeSelect+0x4c>
    88ec:	4f18      	ldr	r7, [pc, #96]	; (8950 <CC_PalPowerSaveModeSelect+0x74>)
    88ee:	683b      	ldr	r3, [r7, #0]
    88f0:	b14c      	cbz	r4, 8906 <CC_PalPowerSaveModeSelect+0x2a>
    88f2:	b1a3      	cbz	r3, 891e <CC_PalPowerSaveModeSelect+0x42>
    88f4:	2b01      	cmp	r3, #1
    88f6:	d019      	beq.n	892c <CC_PalPowerSaveModeSelect+0x50>
    88f8:	3b01      	subs	r3, #1
    88fa:	603b      	str	r3, [r7, #0]
    88fc:	6928      	ldr	r0, [r5, #16]
    88fe:	68f3      	ldr	r3, [r6, #12]
    8900:	4798      	blx	r3
    8902:	2000      	movs	r0, #0
    8904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8906:	b943      	cbnz	r3, 891a <CC_PalPowerSaveModeSelect+0x3e>
    8908:	4a12      	ldr	r2, [pc, #72]	; (8954 <CC_PalPowerSaveModeSelect+0x78>)
    890a:	2101      	movs	r1, #1
    890c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    8910:	4911      	ldr	r1, [pc, #68]	; (8958 <CC_PalPowerSaveModeSelect+0x7c>)
    8912:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    8916:	2a00      	cmp	r2, #0
    8918:	d1fb      	bne.n	8912 <CC_PalPowerSaveModeSelect+0x36>
    891a:	3301      	adds	r3, #1
    891c:	603b      	str	r3, [r7, #0]
    891e:	68f3      	ldr	r3, [r6, #12]
    8920:	6928      	ldr	r0, [r5, #16]
    8922:	4798      	blx	r3
    8924:	2000      	movs	r0, #0
    8926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8928:	480c      	ldr	r0, [pc, #48]	; (895c <CC_PalPowerSaveModeSelect+0x80>)
    892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    892c:	4a0a      	ldr	r2, [pc, #40]	; (8958 <CC_PalPowerSaveModeSelect+0x7c>)
    892e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8932:	2b00      	cmp	r3, #0
    8934:	d1fb      	bne.n	892e <CC_PalPowerSaveModeSelect+0x52>
    8936:	4a07      	ldr	r2, [pc, #28]	; (8954 <CC_PalPowerSaveModeSelect+0x78>)
    8938:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    893c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8940:	f7ff ff48 	bl	87d4 <CC_HalMaskInterrupt>
    8944:	683b      	ldr	r3, [r7, #0]
    8946:	e7d7      	b.n	88f8 <CC_PalPowerSaveModeSelect+0x1c>
    8948:	20000298 	.word	0x20000298
    894c:	20000288 	.word	0x20000288
    8950:	20001688 	.word	0x20001688
    8954:	5002a000 	.word	0x5002a000
    8958:	5002b000 	.word	0x5002b000
    895c:	ffff8fe9 	.word	0xffff8fe9

00008960 <sys_clock_hw_cycles_per_sec>:
{
    8960:	b580      	push	{r7, lr}
    8962:	af00      	add	r7, sp, #0
	return sys_clock_hw_cycles_per_sec_runtime_get();
    8964:	f000 f803 	bl	896e <sys_clock_hw_cycles_per_sec_runtime_get>
    8968:	4603      	mov	r3, r0
}
    896a:	4618      	mov	r0, r3
    896c:	bd80      	pop	{r7, pc}

0000896e <sys_clock_hw_cycles_per_sec_runtime_get>:

extern int z_impl_sys_clock_hw_cycles_per_sec_runtime_get(void);

__pinned_func
static inline int sys_clock_hw_cycles_per_sec_runtime_get(void)
{
    896e:	b580      	push	{r7, lr}
    8970:	af00      	add	r7, sp, #0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke0(K_SYSCALL_SYS_CLOCK_HW_CYCLES_PER_SEC_RUNTIME_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_clock_hw_cycles_per_sec_runtime_get();
    8972:	f7f7 fd9d 	bl	4b0 <z_impl_sys_clock_hw_cycles_per_sec_runtime_get>
    8976:	4603      	mov	r3, r0
}
    8978:	4618      	mov	r0, r3
    897a:	bd80      	pop	{r7, pc}

0000897c <arch_printk_char_out>:
}
    897c:	2000      	movs	r0, #0
    897e:	4770      	bx	lr

00008980 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8980:	b40f      	push	{r0, r1, r2, r3}
    8982:	b507      	push	{r0, r1, r2, lr}
    8984:	a904      	add	r1, sp, #16
    8986:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    898a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    898c:	f7f7 ff5c 	bl	848 <vprintk>

	va_end(ap);
}
    8990:	b003      	add	sp, #12
    8992:	f85d eb04 	ldr.w	lr, [sp], #4
    8996:	b004      	add	sp, #16
    8998:	4770      	bx	lr

0000899a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    899a:	4604      	mov	r4, r0
    899c:	b508      	push	{r3, lr}
    899e:	4608      	mov	r0, r1
    89a0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    89a2:	461a      	mov	r2, r3
    89a4:	47a0      	blx	r4
	return z_impl_z_current_get();
    89a6:	f7fe fa5f 	bl	6e68 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    89aa:	f7fb fbbd 	bl	4128 <z_impl_k_thread_abort>

000089ae <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    89ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    89b2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    89b4:	0840      	lsrs	r0, r0, #1
    89b6:	4770      	bx	lr

000089b8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    89b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89ba:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    89bc:	f7ff fff7 	bl	89ae <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    89c0:	fab0 f080 	clz	r0, r0
    89c4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    89c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    89cc:	00ca      	lsls	r2, r1, #3
    89ce:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    89d2:	1d17      	adds	r7, r2, #4
{
    89d4:	460c      	mov	r4, r1
    89d6:	3206      	adds	r2, #6
    89d8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    89da:	b956      	cbnz	r6, 89f2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    89dc:	2101      	movs	r1, #1
    89de:	fa01 f000 	lsl.w	r0, r1, r0
    89e2:	68d9      	ldr	r1, [r3, #12]
    89e4:	4301      	orrs	r1, r0
    89e6:	60d9      	str	r1, [r3, #12]
		b->next = c;
    89e8:	f8cc 4010 	str.w	r4, [ip, #16]
    89ec:	53dd      	strh	r5, [r3, r7]
    89ee:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    89f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    89f2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    89f4:	3104      	adds	r1, #4
    89f6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    89f8:	53d8      	strh	r0, [r3, r7]
    89fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    89fe:	529e      	strh	r6, [r3, r2]
    8a00:	80c5      	strh	r5, [r0, #6]
    8a02:	525d      	strh	r5, [r3, r1]
    8a04:	e7f4      	b.n	89f0 <free_list_add+0x38>

00008a06 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    8a06:	3a04      	subs	r2, #4
{
    8a08:	b4f0      	push	{r4, r5, r6, r7}
    8a0a:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    8a0c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    8a0e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    8a10:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    8a14:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    8a18:	1a0e      	subs	r6, r1, r0
    8a1a:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    8a1c:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    8a1e:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    8a22:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    8a24:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    8a28:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    8a2a:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    8a2c:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    8a2e:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8a32:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    8a34:	f1c2 0220 	rsb	r2, r2, #32
    8a38:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    8a3a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    8a3e:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    8a42:	4294      	cmp	r4, r2
    8a44:	d1fb      	bne.n	8a3e <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8a46:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8a48:	f042 0201 	orr.w	r2, r2, #1
    8a4c:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    8a4e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    8a52:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8a54:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    8a56:	8007      	strh	r7, [r0, #0]
    8a58:	8065      	strh	r5, [r4, #2]
    8a5a:	1984      	adds	r4, r0, r6
    8a5c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    8a60:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    8a64:	8067      	strh	r7, [r4, #2]
    8a66:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8a68:	885a      	ldrh	r2, [r3, #2]
    8a6a:	f042 0201 	orr.w	r2, r2, #1
    8a6e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    8a70:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    8a72:	f7ff bfa1 	b.w	89b8 <free_list_add>

00008a76 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8a76:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    8a78:	f013 0307 	ands.w	r3, r3, #7
    8a7c:	d105      	bne.n	8a8a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8a7e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8a80:	2b00      	cmp	r3, #0
    8a82:	bf0c      	ite	eq
    8a84:	2000      	moveq	r0, #0
    8a86:	2003      	movne	r0, #3
    8a88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8a8a:	2b02      	cmp	r3, #2
    8a8c:	d105      	bne.n	8a9a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8a8e:	8b40      	ldrh	r0, [r0, #26]
    8a90:	fab0 f080 	clz	r0, r0
    8a94:	0940      	lsrs	r0, r0, #5
    8a96:	0080      	lsls	r0, r0, #2
    8a98:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8a9a:	2b01      	cmp	r3, #1
    8a9c:	d105      	bne.n	8aaa <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8a9e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8aa0:	2b00      	cmp	r3, #0
    8aa2:	bf0c      	ite	eq
    8aa4:	2000      	moveq	r0, #0
    8aa6:	2005      	movne	r0, #5
    8aa8:	4770      	bx	lr
	int evt = EVT_NOP;
    8aaa:	2000      	movs	r0, #0
}
    8aac:	4770      	bx	lr

00008aae <validate_args>:
{
    8aae:	b510      	push	{r4, lr}
    8ab0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8ab2:	b100      	cbz	r0, 8ab6 <validate_args+0x8>
    8ab4:	b911      	cbnz	r1, 8abc <validate_args+0xe>
		return -EINVAL;
    8ab6:	f06f 0015 	mvn.w	r0, #21
}
    8aba:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    8abc:	1d08      	adds	r0, r1, #4
    8abe:	f000 f895 	bl	8bec <sys_notify_validate>
	if ((rv == 0)
    8ac2:	2800      	cmp	r0, #0
    8ac4:	d1f9      	bne.n	8aba <validate_args+0xc>
	    && ((cli->notify.flags
    8ac6:	68a3      	ldr	r3, [r4, #8]
    8ac8:	2b03      	cmp	r3, #3
    8aca:	d9f6      	bls.n	8aba <validate_args+0xc>
    8acc:	e7f3      	b.n	8ab6 <validate_args+0x8>

00008ace <notify_one>:
{
    8ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ad2:	460d      	mov	r5, r1
    8ad4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ad6:	4619      	mov	r1, r3
    8ad8:	1d28      	adds	r0, r5, #4
{
    8ada:	4690      	mov	r8, r2
    8adc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ade:	f000 f899 	bl	8c14 <sys_notify_finalize>
	if (cb) {
    8ae2:	4604      	mov	r4, r0
    8ae4:	b138      	cbz	r0, 8af6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8ae6:	4633      	mov	r3, r6
    8ae8:	4642      	mov	r2, r8
    8aea:	4629      	mov	r1, r5
    8aec:	4638      	mov	r0, r7
    8aee:	46a4      	mov	ip, r4
}
    8af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8af4:	4760      	bx	ip
}
    8af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008afa <transition_complete>:
{
    8afa:	b410      	push	{r4}
	__asm__ volatile(
    8afc:	f04f 0420 	mov.w	r4, #32
    8b00:	f3ef 8211 	mrs	r2, BASEPRI
    8b04:	f384 8812 	msr	BASEPRI_MAX, r4
    8b08:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    8b0c:	6141      	str	r1, [r0, #20]
}
    8b0e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    8b10:	2101      	movs	r1, #1
    8b12:	f7f7 bea7 	b.w	864 <process_event>

00008b16 <onoff_manager_init>:
{
    8b16:	b538      	push	{r3, r4, r5, lr}
    8b18:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8b1a:	4605      	mov	r5, r0
    8b1c:	b158      	cbz	r0, 8b36 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8b1e:	b151      	cbz	r1, 8b36 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8b20:	680b      	ldr	r3, [r1, #0]
    8b22:	b143      	cbz	r3, 8b36 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8b24:	684b      	ldr	r3, [r1, #4]
    8b26:	b133      	cbz	r3, 8b36 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8b28:	221c      	movs	r2, #28
    8b2a:	2100      	movs	r1, #0
    8b2c:	f002 f80e 	bl	ab4c <memset>
    8b30:	612c      	str	r4, [r5, #16]
	return 0;
    8b32:	2000      	movs	r0, #0
}
    8b34:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8b36:	f06f 0015 	mvn.w	r0, #21
    8b3a:	e7fb      	b.n	8b34 <onoff_manager_init+0x1e>

00008b3c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    8b3c:	b570      	push	{r4, r5, r6, lr}
    8b3e:	4605      	mov	r5, r0
    8b40:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    8b42:	f7ff ffb4 	bl	8aae <validate_args>

	if (rv < 0) {
    8b46:	1e04      	subs	r4, r0, #0
    8b48:	db15      	blt.n	8b76 <onoff_request+0x3a>
    8b4a:	f04f 0320 	mov.w	r3, #32
    8b4e:	f3ef 8211 	mrs	r2, BASEPRI
    8b52:	f383 8812 	msr	BASEPRI_MAX, r3
    8b56:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    8b5a:	8b6b      	ldrh	r3, [r5, #26]
    8b5c:	8b2c      	ldrh	r4, [r5, #24]
    8b5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b62:	428b      	cmp	r3, r1
    8b64:	f004 0407 	and.w	r4, r4, #7
    8b68:	d107      	bne.n	8b7a <onoff_request+0x3e>
	__asm__ volatile(
    8b6a:	f382 8811 	msr	BASEPRI, r2
    8b6e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    8b72:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    8b76:	4620      	mov	r0, r4
    8b78:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    8b7a:	2c02      	cmp	r4, #2
    8b7c:	d10c      	bne.n	8b98 <onoff_request+0x5c>
		mgr->refs += 1U;
    8b7e:	3301      	adds	r3, #1
    8b80:	836b      	strh	r3, [r5, #26]
    8b82:	f382 8811 	msr	BASEPRI, r2
    8b86:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    8b8a:	2300      	movs	r3, #0
    8b8c:	4622      	mov	r2, r4
    8b8e:	4631      	mov	r1, r6
    8b90:	4628      	mov	r0, r5
    8b92:	f7ff ff9c 	bl	8ace <notify_one>
    8b96:	e7ee      	b.n	8b76 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    8b98:	2c06      	cmp	r4, #6
    8b9a:	d814      	bhi.n	8bc6 <onoff_request+0x8a>
    8b9c:	e8df f004 	tbb	[pc, r4]
    8ba0:	13131304 	.word	0x13131304
    8ba4:	1a04      	.short	0x1a04
    8ba6:	04          	.byte	0x04
    8ba7:	00          	.byte	0x00
	parent->next = child;
    8ba8:	2300      	movs	r3, #0
    8baa:	6033      	str	r3, [r6, #0]
	return list->tail;
    8bac:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    8bae:	b93b      	cbnz	r3, 8bc0 <onoff_request+0x84>
	list->head = node;
    8bb0:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    8bb4:	b9ac      	cbnz	r4, 8be2 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    8bb6:	2102      	movs	r1, #2
    8bb8:	4628      	mov	r0, r5
    8bba:	f7f7 fe53 	bl	864 <process_event>
    8bbe:	e7da      	b.n	8b76 <onoff_request+0x3a>
	parent->next = child;
    8bc0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    8bc2:	606e      	str	r6, [r5, #4]
}
    8bc4:	e7f6      	b.n	8bb4 <onoff_request+0x78>
    8bc6:	f382 8811 	msr	BASEPRI, r2
    8bca:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    8bce:	f06f 0404 	mvn.w	r4, #4
    8bd2:	e7d0      	b.n	8b76 <onoff_request+0x3a>
    8bd4:	f382 8811 	msr	BASEPRI, r2
    8bd8:	f3bf 8f6f 	isb	sy
    8bdc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8be0:	e7c9      	b.n	8b76 <onoff_request+0x3a>
    8be2:	f382 8811 	msr	BASEPRI, r2
    8be6:	f3bf 8f6f 	isb	sy
		if (notify) {
    8bea:	e7c4      	b.n	8b76 <onoff_request+0x3a>

00008bec <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    8bec:	4603      	mov	r3, r0
    8bee:	b140      	cbz	r0, 8c02 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8bf0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8bf2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    8bf6:	2a02      	cmp	r2, #2
    8bf8:	d006      	beq.n	8c08 <sys_notify_validate+0x1c>
    8bfa:	2a03      	cmp	r2, #3
    8bfc:	d004      	beq.n	8c08 <sys_notify_validate+0x1c>
    8bfe:	2a01      	cmp	r2, #1
    8c00:	d005      	beq.n	8c0e <sys_notify_validate+0x22>
    8c02:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    8c06:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    8c08:	681a      	ldr	r2, [r3, #0]
    8c0a:	2a00      	cmp	r2, #0
    8c0c:	d0f9      	beq.n	8c02 <sys_notify_validate+0x16>
		notify->result = 0;
    8c0e:	2000      	movs	r0, #0
    8c10:	6098      	str	r0, [r3, #8]
    8c12:	4770      	bx	lr

00008c14 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    8c14:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8c16:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    8c18:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    8c1a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    8c1e:	2a02      	cmp	r2, #2
{
    8c20:	4603      	mov	r3, r0
	switch (method) {
    8c22:	f04f 0400 	mov.w	r4, #0
    8c26:	d007      	beq.n	8c38 <sys_notify_finalize+0x24>
    8c28:	2a03      	cmp	r2, #3
    8c2a:	d002      	beq.n	8c32 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8c2c:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
    8c2e:	2000      	movs	r0, #0
    8c30:	e001      	b.n	8c36 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
    8c32:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8c34:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    8c36:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    8c38:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8c3a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    8c3c:	2800      	cmp	r0, #0
    8c3e:	d0f6      	beq.n	8c2e <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8c40:	f7fe fb44 	bl	72cc <z_impl_k_poll_signal_raise>
    8c44:	e7f3      	b.n	8c2e <sys_notify_finalize+0x1a>

00008c46 <outs>:
{
    8c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c4a:	4607      	mov	r7, r0
    8c4c:	4688      	mov	r8, r1
    8c4e:	4615      	mov	r5, r2
    8c50:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8c52:	4614      	mov	r4, r2
    8c54:	42b4      	cmp	r4, r6
    8c56:	d305      	bcc.n	8c64 <outs+0x1e>
    8c58:	b10e      	cbz	r6, 8c5e <outs+0x18>
	return (int)count;
    8c5a:	1b60      	subs	r0, r4, r5
    8c5c:	e008      	b.n	8c70 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8c5e:	7823      	ldrb	r3, [r4, #0]
    8c60:	2b00      	cmp	r3, #0
    8c62:	d0fa      	beq.n	8c5a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    8c64:	f814 0b01 	ldrb.w	r0, [r4], #1
    8c68:	4641      	mov	r1, r8
    8c6a:	47b8      	blx	r7
		if (rc < 0) {
    8c6c:	2800      	cmp	r0, #0
    8c6e:	daf1      	bge.n	8c54 <outs+0xe>
}
    8c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008c74 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    8c74:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    8c76:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    8c78:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    8c7a:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    8c7c:	1baf      	subs	r7, r5, r6
{
    8c7e:	4604      	mov	r4, r0
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    8c80:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    8c82:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    8c84:	bf98      	it	ls
    8c86:	1aff      	subls	r7, r7, r3
    8c88:	eba5 0000 	sub.w	r0, r5, r0
{
    8c8c:	4694      	mov	ip, r2
		base += buf->size;
    8c8e:	bf98      	it	ls
    8c90:	18f6      	addls	r6, r6, r3
    8c92:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    8c94:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    8c96:	6823      	ldr	r3, [r4, #0]
    8c98:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    8c9a:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    8c9c:	442b      	add	r3, r5
	size = MIN(size, free_space);
    8c9e:	bf28      	it	cs
    8ca0:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    8ca2:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    8ca4:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    8ca6:	4290      	cmp	r0, r2
    8ca8:	bf28      	it	cs
    8caa:	4610      	movcs	r0, r2
	buf->put_head += size;
    8cac:	4403      	add	r3, r0
    8cae:	6063      	str	r3, [r4, #4]

	return size;
}
    8cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008cb2 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    8cb2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    8cb6:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    8cb8:	428a      	cmp	r2, r1
    8cba:	d30c      	bcc.n	8cd6 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    8cbc:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    8cbe:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    8cc0:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    8cc2:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    8cc6:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    8cc8:	428a      	cmp	r2, r1
    8cca:	d901      	bls.n	8cd0 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    8ccc:	2000      	movs	r0, #0
    8cce:	4770      	bx	lr
		buf->put_base += buf->size;
    8cd0:	4413      	add	r3, r2
    8cd2:	60c3      	str	r3, [r0, #12]
    8cd4:	e7fa      	b.n	8ccc <ring_buf_put_finish+0x1a>
		return -EINVAL;
    8cd6:	f06f 0015 	mvn.w	r0, #21
}
    8cda:	4770      	bx	lr

00008cdc <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    8cdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8ce0:	4680      	mov	r8, r0
    8ce2:	460e      	mov	r6, r1
    8ce4:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    8ce6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    8ce8:	462a      	mov	r2, r5
    8cea:	a901      	add	r1, sp, #4
    8cec:	4640      	mov	r0, r8
    8cee:	f7ff ffc1 	bl	8c74 <ring_buf_put_claim>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8cf2:	4631      	mov	r1, r6
    8cf4:	4604      	mov	r4, r0
    8cf6:	4602      	mov	r2, r0
    8cf8:	9801      	ldr	r0, [sp, #4]
    8cfa:	f001 feff 	bl	aafc <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    8cfe:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    8d00:	4427      	add	r7, r4
		data += partial_size;
    8d02:	4426      	add	r6, r4
	} while (size && partial_size);
    8d04:	d001      	beq.n	8d0a <ring_buf_put+0x2e>
    8d06:	2c00      	cmp	r4, #0
    8d08:	d1ee      	bne.n	8ce8 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    8d0a:	4639      	mov	r1, r7
    8d0c:	4640      	mov	r0, r8
    8d0e:	f7ff ffd0 	bl	8cb2 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    8d12:	4638      	mov	r0, r7
    8d14:	b002      	add	sp, #8
    8d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008d1a <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    8d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d1c:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    8d1e:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    8d20:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    8d22:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    8d24:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    8d26:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    8d28:	42b8      	cmp	r0, r7
{
    8d2a:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    8d2c:	bf98      	it	ls
    8d2e:	1836      	addls	r6, r6, r0
    8d30:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    8d34:	6823      	ldr	r3, [r4, #0]
    8d36:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    8d3a:	bf98      	it	ls
    8d3c:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    8d3e:	442b      	add	r3, r5
	size = MIN(size, available_size);
    8d40:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    8d42:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    8d46:	bf28      	it	cs
    8d48:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    8d4a:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    8d4c:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    8d4e:	4290      	cmp	r0, r2
    8d50:	bf28      	it	cs
    8d52:	4610      	movcs	r0, r2
	buf->get_head += size;
    8d54:	4403      	add	r3, r0
    8d56:	6123      	str	r3, [r4, #16]

	return size;
}
    8d58:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008d5a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    8d5a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    8d5e:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    8d60:	428a      	cmp	r2, r1
    8d62:	d30c      	bcc.n	8d7e <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    8d64:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    8d66:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    8d6a:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    8d6e:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    8d70:	428a      	cmp	r2, r1
    8d72:	d901      	bls.n	8d78 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    8d74:	2000      	movs	r0, #0
    8d76:	4770      	bx	lr
		buf->get_base += buf->size;
    8d78:	4413      	add	r3, r2
    8d7a:	6183      	str	r3, [r0, #24]
    8d7c:	e7fa      	b.n	8d74 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    8d7e:	f06f 0015 	mvn.w	r0, #21
}
    8d82:	4770      	bx	lr

00008d84 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    8d84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8d88:	4680      	mov	r8, r0
    8d8a:	460d      	mov	r5, r1
    8d8c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    8d8e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    8d90:	4632      	mov	r2, r6
    8d92:	a901      	add	r1, sp, #4
    8d94:	4640      	mov	r0, r8
    8d96:	f7ff ffc0 	bl	8d1a <ring_buf_get_claim>
    8d9a:	4604      	mov	r4, r0
		if (data) {
    8d9c:	b12d      	cbz	r5, 8daa <ring_buf_get+0x26>
    8d9e:	4602      	mov	r2, r0
    8da0:	9901      	ldr	r1, [sp, #4]
    8da2:	4628      	mov	r0, r5
    8da4:	f001 feaa 	bl	aafc <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
    8da8:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    8daa:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    8dac:	4427      	add	r7, r4
	} while (size && partial_size);
    8dae:	d001      	beq.n	8db4 <ring_buf_get+0x30>
    8db0:	2c00      	cmp	r4, #0
    8db2:	d1ed      	bne.n	8d90 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    8db4:	4639      	mov	r1, r7
    8db6:	4640      	mov	r0, r8
    8db8:	f7ff ffcf 	bl	8d5a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    8dbc:	4638      	mov	r0, r7
    8dbe:	b002      	add	sp, #8
    8dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008dc4 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    8dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dc8:	b087      	sub	sp, #28
    8dca:	4614      	mov	r4, r2
    8dcc:	9101      	str	r1, [sp, #4]
    8dce:	9303      	str	r3, [sp, #12]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    8dd0:	4605      	mov	r5, r0
    8dd2:	b918      	cbnz	r0, 8ddc <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    8dd4:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    8dd6:	b007      	add	sp, #28
    8dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    8ddc:	9b01      	ldr	r3, [sp, #4]
    8dde:	2b00      	cmp	r3, #0
    8de0:	d0f8      	beq.n	8dd4 <fnmatchx+0x10>
    if (recursion-- == 0)
    8de2:	9b03      	ldr	r3, [sp, #12]
    8de4:	2b00      	cmp	r3, #0
    8de6:	f000 810f 	beq.w	9008 <fnmatchx+0x244>
    8dea:	9a01      	ldr	r2, [sp, #4]
        switch (c = FOLDCASE(*pattern++, flags)) {
    8dec:	46a9      	mov	r9, r5
    8dee:	4621      	mov	r1, r4
    8df0:	f819 0b01 	ldrb.w	r0, [r9], #1
    8df4:	f7f8 fa5e 	bl	12b4 <foldcase>
    8df8:	4603      	mov	r3, r0
    8dfa:	b2c0      	uxtb	r0, r0
    8dfc:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    8dfe:	7816      	ldrb	r6, [r2, #0]
    8e00:	4607      	mov	r7, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
    8e02:	d025      	beq.n	8e50 <fnmatchx+0x8c>
    8e04:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8e08:	d10b      	bne.n	8e22 <fnmatchx+0x5e>
    8e0a:	b1c8      	cbz	r0, 8e40 <fnmatchx+0x7c>
    8e0c:	282a      	cmp	r0, #42	; 0x2a
    8e0e:	d036      	beq.n	8e7e <fnmatchx+0xba>
            if (c != FOLDCASE(*string++, flags))
    8e10:	4621      	mov	r1, r4
    8e12:	4630      	mov	r0, r6
    8e14:	f7f8 fa4e 	bl	12b4 <foldcase>
    8e18:	4287      	cmp	r7, r0
    8e1a:	f102 0201 	add.w	r2, r2, #1
    8e1e:	d01e      	beq.n	8e5e <fnmatchx+0x9a>
    8e20:	e7d8      	b.n	8dd4 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    8e22:	285b      	cmp	r0, #91	; 0x5b
    8e24:	d07d      	beq.n	8f22 <fnmatchx+0x15e>
    8e26:	285c      	cmp	r0, #92	; 0x5c
    8e28:	d1f2      	bne.n	8e10 <fnmatchx+0x4c>
            if (!(flags & FNM_NOESCAPE)) {
    8e2a:	07e3      	lsls	r3, r4, #31
    8e2c:	d4f0      	bmi.n	8e10 <fnmatchx+0x4c>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    8e2e:	7868      	ldrb	r0, [r5, #1]
    8e30:	f7f8 fa40 	bl	12b4 <foldcase>
    8e34:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
    8e38:	bf18      	it	ne
    8e3a:	f105 0902 	addne.w	r9, r5, #2
    8e3e:	e7e7      	b.n	8e10 <fnmatchx+0x4c>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    8e40:	06e7      	lsls	r7, r4, #27
    8e42:	d501      	bpl.n	8e48 <fnmatchx+0x84>
    8e44:	2e2f      	cmp	r6, #47	; 0x2f
    8e46:	d0c6      	beq.n	8dd6 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    8e48:	1e30      	subs	r0, r6, #0
                        0 : FNM_NOMATCH;
    8e4a:	bf18      	it	ne
    8e4c:	2001      	movne	r0, #1
    8e4e:	e7c2      	b.n	8dd6 <fnmatchx+0x12>
            if (*string == EOS)
    8e50:	2e00      	cmp	r6, #0
    8e52:	d0bf      	beq.n	8dd4 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    8e54:	2e2f      	cmp	r6, #47	; 0x2f
    8e56:	d104      	bne.n	8e62 <fnmatchx+0x9e>
    8e58:	07a5      	lsls	r5, r4, #30
    8e5a:	d4bb      	bmi.n	8dd4 <fnmatchx+0x10>
            ++string;
    8e5c:	3201      	adds	r2, #1
            break;
    8e5e:	464d      	mov	r5, r9
    8e60:	e7c4      	b.n	8dec <fnmatchx+0x28>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    8e62:	2e2e      	cmp	r6, #46	; 0x2e
    8e64:	d1fa      	bne.n	8e5c <fnmatchx+0x98>
    8e66:	0760      	lsls	r0, r4, #29
    8e68:	d5f8      	bpl.n	8e5c <fnmatchx+0x98>
    8e6a:	9b01      	ldr	r3, [sp, #4]
    8e6c:	429a      	cmp	r2, r3
    8e6e:	d0b1      	beq.n	8dd4 <fnmatchx+0x10>
                (string == stringstart ||
    8e70:	07a1      	lsls	r1, r4, #30
    8e72:	d5f3      	bpl.n	8e5c <fnmatchx+0x98>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    8e74:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    8e78:	2b2f      	cmp	r3, #47	; 0x2f
    8e7a:	d1ef      	bne.n	8e5c <fnmatchx+0x98>
    8e7c:	e7aa      	b.n	8dd4 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    8e7e:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    8e80:	f7f8 fa18 	bl	12b4 <foldcase>
    8e84:	b2c1      	uxtb	r1, r0
            while (c == '*')
    8e86:	292a      	cmp	r1, #42	; 0x2a
    8e88:	d019      	beq.n	8ebe <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    8e8a:	2e2e      	cmp	r6, #46	; 0x2e
    8e8c:	d10a      	bne.n	8ea4 <fnmatchx+0xe0>
    8e8e:	0763      	lsls	r3, r4, #29
    8e90:	d508      	bpl.n	8ea4 <fnmatchx+0xe0>
    8e92:	9b01      	ldr	r3, [sp, #4]
    8e94:	429a      	cmp	r2, r3
    8e96:	d09d      	beq.n	8dd4 <fnmatchx+0x10>
                (string == stringstart ||
    8e98:	07a7      	lsls	r7, r4, #30
    8e9a:	d503      	bpl.n	8ea4 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    8e9c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    8ea0:	2b2f      	cmp	r3, #47	; 0x2f
    8ea2:	d097      	beq.n	8dd4 <fnmatchx+0x10>
            if (c == EOS) {
    8ea4:	b979      	cbnz	r1, 8ec6 <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
    8ea6:	f014 0002 	ands.w	r0, r4, #2
    8eaa:	d094      	beq.n	8dd6 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    8eac:	06e6      	lsls	r6, r4, #27
    8eae:	f100 80ad 	bmi.w	900c <fnmatchx+0x248>
                        strchr(string, '/') == NULL ?
    8eb2:	212f      	movs	r1, #47	; 0x2f
    8eb4:	4610      	mov	r0, r2
    8eb6:	f001 fe5a 	bl	ab6e <strchr>
                        0 : FNM_NOMATCH;
    8eba:	3800      	subs	r0, #0
    8ebc:	e7c5      	b.n	8e4a <fnmatchx+0x86>
                c = FOLDCASE(*++pattern, flags);
    8ebe:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    8ec2:	4621      	mov	r1, r4
    8ec4:	e7dc      	b.n	8e80 <fnmatchx+0xbc>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    8ec6:	292f      	cmp	r1, #47	; 0x2f
    8ec8:	d123      	bne.n	8f12 <fnmatchx+0x14e>
    8eca:	07a5      	lsls	r5, r4, #30
    8ecc:	d521      	bpl.n	8f12 <fnmatchx+0x14e>
                if ((string = strchr(string, '/')) == NULL)
    8ece:	4610      	mov	r0, r2
    8ed0:	f001 fe4d 	bl	ab6e <strchr>
    8ed4:	4602      	mov	r2, r0
    8ed6:	2800      	cmp	r0, #0
    8ed8:	d1c1      	bne.n	8e5e <fnmatchx+0x9a>
    8eda:	e77b      	b.n	8dd4 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    8edc:	463b      	mov	r3, r7
    8ede:	4642      	mov	r2, r8
    8ee0:	4659      	mov	r1, fp
    8ee2:	4648      	mov	r0, r9
    8ee4:	f7ff ff6e 	bl	8dc4 <fnmatchx>
    8ee8:	2801      	cmp	r0, #1
    8eea:	f47f af74 	bne.w	8dd6 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    8eee:	2d2f      	cmp	r5, #47	; 0x2f
    8ef0:	d103      	bne.n	8efa <fnmatchx+0x136>
    8ef2:	f1ba 0f00 	cmp.w	sl, #0
    8ef6:	f47f af6d 	bne.w	8dd4 <fnmatchx+0x10>
    8efa:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    8efc:	4621      	mov	r1, r4
    8efe:	f89b 0000 	ldrb.w	r0, [fp]
    8f02:	f7f8 f9d7 	bl	12b4 <foldcase>
    8f06:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    8f0a:	f106 0601 	add.w	r6, r6, #1
    8f0e:	d1e5      	bne.n	8edc <fnmatchx+0x118>
    8f10:	e760      	b.n	8dd4 <fnmatchx+0x10>
    if (recursion-- == 0)
    8f12:	9b03      	ldr	r3, [sp, #12]
    8f14:	4616      	mov	r6, r2
    8f16:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    8f18:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    8f1c:	f004 0a02 	and.w	sl, r4, #2
    8f20:	e7eb      	b.n	8efa <fnmatchx+0x136>
            if (*string == EOS)
    8f22:	2e00      	cmp	r6, #0
    8f24:	f43f af56 	beq.w	8dd4 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    8f28:	2e2f      	cmp	r6, #47	; 0x2f
    8f2a:	d102      	bne.n	8f32 <fnmatchx+0x16e>
    8f2c:	07a0      	lsls	r0, r4, #30
    8f2e:	f53f af51 	bmi.w	8dd4 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    8f32:	4630      	mov	r0, r6
    8f34:	f7f8 f9be 	bl	12b4 <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    8f38:	786b      	ldrb	r3, [r5, #1]
    8f3a:	2b21      	cmp	r3, #33	; 0x21
            if ((r = rangematch(pattern,
    8f3c:	4682      	mov	sl, r0
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    8f3e:	d001      	beq.n	8f44 <fnmatchx+0x180>
    8f40:	2b5e      	cmp	r3, #94	; 0x5e
    8f42:	d123      	bne.n	8f8c <fnmatchx+0x1c8>
        ++pattern;
    8f44:	3502      	adds	r5, #2
    8f46:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    8f48:	9302      	str	r3, [sp, #8]
    need = 1;
    8f4a:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    8f4c:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    8f50:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    8f54:	9104      	str	r1, [sp, #16]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    8f56:	462f      	mov	r7, r5
    8f58:	4621      	mov	r1, r4
    8f5a:	f817 0b01 	ldrb.w	r0, [r7], #1
    8f5e:	9305      	str	r3, [sp, #20]
    8f60:	f7f8 f9a8 	bl	12b4 <foldcase>
    8f64:	fa5f f880 	uxtb.w	r8, r0
    8f68:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    8f6c:	9b05      	ldr	r3, [sp, #20]
    8f6e:	d110      	bne.n	8f92 <fnmatchx+0x1ce>
    8f70:	bb0b      	cbnz	r3, 8fb6 <fnmatchx+0x1f2>
    return ok == negate ? NULL : pattern;
    8f72:	9b02      	ldr	r3, [sp, #8]
    8f74:	455b      	cmp	r3, fp
    8f76:	f43f af2d 	beq.w	8dd4 <fnmatchx+0x10>
            if (r == (void *)-1) {
    8f7a:	1c79      	adds	r1, r7, #1
    8f7c:	d103      	bne.n	8f86 <fnmatchx+0x1c2>
                if (*string != '[')
    8f7e:	2e5b      	cmp	r6, #91	; 0x5b
    8f80:	f47f af28 	bne.w	8dd4 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    8f84:	464f      	mov	r7, r9
            ++string;
    8f86:	3201      	adds	r2, #1
            break;
    8f88:	46b9      	mov	r9, r7
    8f8a:	e768      	b.n	8e5e <fnmatchx+0x9a>
    8f8c:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    8f8e:	2300      	movs	r3, #0
    8f90:	e7da      	b.n	8f48 <fnmatchx+0x184>
        if (c == '/')
    8f92:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
    8f96:	d0f2      	beq.n	8f7e <fnmatchx+0x1ba>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    8f98:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
    8f9c:	d107      	bne.n	8fae <fnmatchx+0x1ea>
    8f9e:	9b04      	ldr	r3, [sp, #16]
    8fa0:	b94b      	cbnz	r3, 8fb6 <fnmatchx+0x1f2>
            c = FOLDCASE(*pattern++, flags);
    8fa2:	7868      	ldrb	r0, [r5, #1]
    8fa4:	f7f8 f986 	bl	12b4 <foldcase>
    8fa8:	1caf      	adds	r7, r5, #2
    8faa:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
    8fae:	f1b8 0f00 	cmp.w	r8, #0
    8fb2:	f43f af0f 	beq.w	8dd4 <fnmatchx+0x10>
        if (*pattern == '-' 
    8fb6:	783b      	ldrb	r3, [r7, #0]
    8fb8:	2b2d      	cmp	r3, #45	; 0x2d
    8fba:	d11f      	bne.n	8ffc <fnmatchx+0x238>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    8fbc:	7878      	ldrb	r0, [r7, #1]
    8fbe:	4621      	mov	r1, r4
    8fc0:	f7f8 f978 	bl	12b4 <foldcase>
    8fc4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    8fc8:	d018      	beq.n	8ffc <fnmatchx+0x238>
    8fca:	285d      	cmp	r0, #93	; 0x5d
    8fcc:	d016      	beq.n	8ffc <fnmatchx+0x238>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    8fce:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    8fd0:	f107 0502 	add.w	r5, r7, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    8fd4:	d10a      	bne.n	8fec <fnmatchx+0x228>
    8fd6:	07e3      	lsls	r3, r4, #31
    8fd8:	d408      	bmi.n	8fec <fnmatchx+0x228>
                c2 = FOLDCASE(*pattern++, flags);
    8fda:	78b8      	ldrb	r0, [r7, #2]
    8fdc:	f7f8 f96a 	bl	12b4 <foldcase>
            if (c2 == EOS)
    8fe0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    8fe4:	f107 0503 	add.w	r5, r7, #3
            if (c2 == EOS)
    8fe8:	f43f aef4 	beq.w	8dd4 <fnmatchx+0x10>
            if (c <= test && test <= c2)
    8fec:	45d0      	cmp	r8, sl
    8fee:	dc03      	bgt.n	8ff8 <fnmatchx+0x234>
                ok = 1;
    8ff0:	4550      	cmp	r0, sl
    8ff2:	bfa8      	it	ge
    8ff4:	f04f 0b01 	movge.w	fp, #1
        } else if (c == test)
    8ff8:	2300      	movs	r3, #0
    8ffa:	e7ac      	b.n	8f56 <fnmatchx+0x192>
    8ffc:	463d      	mov	r5, r7
    8ffe:	45d0      	cmp	r8, sl
    9000:	bf08      	it	eq
    9002:	f04f 0b01 	moveq.w	fp, #1
    9006:	e7f7      	b.n	8ff8 <fnmatchx+0x234>
        return FNM_NORES;
    9008:	2003      	movs	r0, #3
    900a:	e6e4      	b.n	8dd6 <fnmatchx+0x12>
                return 0;
    900c:	4608      	mov	r0, r1
    900e:	e6e2      	b.n	8dd6 <fnmatchx+0x12>

00009010 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    9010:	2340      	movs	r3, #64	; 0x40
    9012:	f7ff bed7 	b.w	8dc4 <fnmatchx>

00009016 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9016:	4770      	bx	lr

00009018 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
    9018:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
    901a:	2000      	movs	r0, #0
    901c:	f7f8 f936 	bl	128c <sys_reboot>

00009020 <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
    9020:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
    9022:	2001      	movs	r0, #1
    9024:	f7f8 f932 	bl	128c <sys_reboot>

00009028 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    9028:	6883      	ldr	r3, [r0, #8]
    902a:	6a1b      	ldr	r3, [r3, #32]
    902c:	b103      	cbz	r3, 9030 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    902e:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    9030:	4770      	bx	lr

00009032 <uninit>:
{
    9032:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    9034:	6843      	ldr	r3, [r0, #4]
    9036:	681b      	ldr	r3, [r3, #0]
    9038:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
    903a:	4620      	mov	r0, r4
    903c:	f7ff fff4 	bl	9028 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    9040:	68a3      	ldr	r3, [r4, #8]
    9042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9044:	b10b      	cbz	r3, 904a <uninit+0x18>
		api->irq_rx_disable(dev);
    9046:	4620      	mov	r0, r4
    9048:	4798      	blx	r3
}
    904a:	2000      	movs	r0, #0
    904c:	bd10      	pop	{r4, pc}

0000904e <enable>:
{
    904e:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    9050:	6843      	ldr	r3, [r0, #4]
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    9052:	681a      	ldr	r2, [r3, #0]
    9054:	7411      	strb	r1, [r2, #16]
	if (blocking_tx) {
    9056:	b119      	cbz	r1, 9060 <enable+0x12>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	6818      	ldr	r0, [r3, #0]
    905c:	f7ff ffe4 	bl	9028 <uart_irq_tx_disable>
}
    9060:	2000      	movs	r0, #0
    9062:	bd08      	pop	{r3, pc}

00009064 <read>:
{
    9064:	b510      	push	{r4, lr}
    9066:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    9068:	6843      	ldr	r3, [r0, #4]
    906a:	68d8      	ldr	r0, [r3, #12]
    906c:	f7ff fe8a 	bl	8d84 <ring_buf_get>
    9070:	6020      	str	r0, [r4, #0]
}
    9072:	2000      	movs	r0, #0
    9074:	bd10      	pop	{r4, pc}

00009076 <write>:
{
    9076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    907a:	6845      	ldr	r5, [r0, #4]
{
    907c:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    907e:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    9080:	7c1b      	ldrb	r3, [r3, #16]
{
    9082:	460c      	mov	r4, r1
    9084:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    9086:	b153      	cbz	r3, 909e <write+0x28>
    9088:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    908c:	45a0      	cmp	r8, r4
    908e:	d121      	bne.n	90d4 <write+0x5e>
		*cnt = length;
    9090:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    9092:	682b      	ldr	r3, [r5, #0]
    9094:	2001      	movs	r0, #1
    9096:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    909a:	4790      	blx	r2
    909c:	e017      	b.n	90ce <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    909e:	68a8      	ldr	r0, [r5, #8]
    90a0:	f7ff fe1c 	bl	8cdc <ring_buf_put>
    90a4:	6030      	str	r0, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    90a6:	682b      	ldr	r3, [r5, #0]
    90a8:	f3bf 8f5b 	dmb	ish
    90ac:	330c      	adds	r3, #12
    90ae:	2101      	movs	r1, #1
    90b0:	e853 2f00 	ldrex	r2, [r3]
    90b4:	e843 1000 	strex	r0, r1, [r3]
    90b8:	2800      	cmp	r0, #0
    90ba:	d1f9      	bne.n	90b0 <write+0x3a>
    90bc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    90c0:	b92a      	cbnz	r2, 90ce <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    90c2:	682b      	ldr	r3, [r5, #0]
    90c4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    90c6:	6883      	ldr	r3, [r0, #8]
    90c8:	69db      	ldr	r3, [r3, #28]
    90ca:	b103      	cbz	r3, 90ce <write+0x58>
		api->irq_tx_enable(dev);
    90cc:	4798      	blx	r3
}
    90ce:	2000      	movs	r0, #0
    90d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    90d4:	682b      	ldr	r3, [r5, #0]
    90d6:	f814 1b01 	ldrb.w	r1, [r4], #1
    90da:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    90dc:	6883      	ldr	r3, [r0, #8]
    90de:	685b      	ldr	r3, [r3, #4]
    90e0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    90e2:	e7d3      	b.n	908c <write+0x16>

000090e4 <uart_callback>:
{
    90e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    90e8:	4604      	mov	r4, r0
    90ea:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
    90ec:	6883      	ldr	r3, [r0, #8]
    90ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    90f0:	b103      	cbz	r3, 90f4 <uart_callback+0x10>
	return api->irq_update(dev);
    90f2:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    90f4:	68a3      	ldr	r3, [r4, #8]
    90f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    90f8:	bb03      	cbnz	r3, 913c <uart_callback+0x58>
    90fa:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    90fe:	68e8      	ldr	r0, [r5, #12]
    9100:	a901      	add	r1, sp, #4
    9102:	69c2      	ldr	r2, [r0, #28]
    9104:	f7ff fdb6 	bl	8c74 <ring_buf_put_claim>
		if (len > 0) {
    9108:	68a3      	ldr	r3, [r4, #8]
    910a:	4607      	mov	r7, r0
    910c:	2800      	cmp	r0, #0
    910e:	d034      	beq.n	917a <uart_callback+0x96>
	if (api->fifo_read == NULL) {
    9110:	699b      	ldr	r3, [r3, #24]
			rd_len = uart_fifo_read(dev, data, len);
    9112:	9901      	ldr	r1, [sp, #4]
    9114:	b333      	cbz	r3, 9164 <uart_callback+0x80>
	return api->fifo_read(dev, rx_data, size);
    9116:	4602      	mov	r2, r0
    9118:	4620      	mov	r0, r4
    911a:	4798      	blx	r3
			if (rd_len > 0) {
    911c:	4606      	mov	r6, r0
    911e:	b320      	cbz	r0, 916a <uart_callback+0x86>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    9120:	68e8      	ldr	r0, [r5, #12]
    9122:	4631      	mov	r1, r6
    9124:	f7ff fdc5 	bl	8cb2 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    9128:	42b7      	cmp	r7, r6
				new_data = true;
    912a:	f04f 0801 	mov.w	r8, #1
	} while (rd_len && (rd_len == len));
    912e:	d0e6      	beq.n	90fe <uart_callback+0x1a>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    9130:	682b      	ldr	r3, [r5, #0]
    9132:	2000      	movs	r0, #0
    9134:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    9138:	4790      	blx	r2
}
    913a:	e003      	b.n	9144 <uart_callback+0x60>
	return api->irq_rx_ready(dev);
    913c:	4620      	mov	r0, r4
    913e:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    9140:	2800      	cmp	r0, #0
    9142:	d1da      	bne.n	90fa <uart_callback+0x16>
	if (api->irq_tx_ready == NULL) {
    9144:	68a3      	ldr	r3, [r4, #8]
    9146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9148:	bb03      	cbnz	r3, 918c <uart_callback+0xa8>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    914a:	68a8      	ldr	r0, [r5, #8]
    914c:	a901      	add	r1, sp, #4
    914e:	69c2      	ldr	r2, [r0, #28]
    9150:	f7ff fde3 	bl	8d1a <ring_buf_get_claim>
	if (len) {
    9154:	4606      	mov	r6, r0
    9156:	bb00      	cbnz	r0, 919a <uart_callback+0xb6>
		uart_irq_tx_disable(dev);
    9158:	4620      	mov	r0, r4
    915a:	f7ff ff65 	bl	9028 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    915e:	682b      	ldr	r3, [r5, #0]
    9160:	60de      	str	r6, [r3, #12]
    9162:	e025      	b.n	91b0 <uart_callback+0xcc>
			rd_len = uart_fifo_read(dev, data, len);
    9164:	f06f 0657 	mvn.w	r6, #87	; 0x57
    9168:	e7da      	b.n	9120 <uart_callback+0x3c>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    916a:	4601      	mov	r1, r0
    916c:	68e8      	ldr	r0, [r5, #12]
    916e:	f7ff fda0 	bl	8cb2 <ring_buf_put_finish>
	if (new_data) {
    9172:	f1b8 0f00 	cmp.w	r8, #0
    9176:	d0e5      	beq.n	9144 <uart_callback+0x60>
    9178:	e7da      	b.n	9130 <uart_callback+0x4c>
	if (api->fifo_read == NULL) {
    917a:	699b      	ldr	r3, [r3, #24]
    917c:	2b00      	cmp	r3, #0
    917e:	d0f8      	beq.n	9172 <uart_callback+0x8e>
	return api->fifo_read(dev, rx_data, size);
    9180:	2201      	movs	r2, #1
    9182:	f10d 0103 	add.w	r1, sp, #3
    9186:	4620      	mov	r0, r4
    9188:	4798      	blx	r3
    918a:	e7f2      	b.n	9172 <uart_callback+0x8e>
	return api->irq_tx_ready(dev);
    918c:	4620      	mov	r0, r4
    918e:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    9190:	2800      	cmp	r0, #0
    9192:	d1da      	bne.n	914a <uart_callback+0x66>
}
    9194:	b002      	add	sp, #8
    9196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
    919a:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    919c:	9901      	ldr	r1, [sp, #4]
    919e:	695b      	ldr	r3, [r3, #20]
    91a0:	b163      	cbz	r3, 91bc <uart_callback+0xd8>
	return api->fifo_fill(dev, tx_data, size);
    91a2:	4602      	mov	r2, r0
    91a4:	4620      	mov	r0, r4
    91a6:	4798      	blx	r3
    91a8:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    91aa:	68a8      	ldr	r0, [r5, #8]
    91ac:	f7ff fdd5 	bl	8d5a <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    91b0:	682b      	ldr	r3, [r5, #0]
    91b2:	2001      	movs	r0, #1
    91b4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    91b8:	4790      	blx	r2
}
    91ba:	e7eb      	b.n	9194 <uart_callback+0xb0>
		return -ENOSYS;
    91bc:	f06f 0157 	mvn.w	r1, #87	; 0x57
    91c0:	e7f3      	b.n	91aa <uart_callback+0xc6>

000091c2 <init>:
	struct shell_dummy *sh_dummy = (struct shell_dummy *)transport->ctx;
    91c2:	6843      	ldr	r3, [r0, #4]
	if (sh_dummy->initialized) {
    91c4:	7818      	ldrb	r0, [r3, #0]
    91c6:	b910      	cbnz	r0, 91ce <init+0xc>
	sh_dummy->initialized = true;
    91c8:	2201      	movs	r2, #1
    91ca:	701a      	strb	r2, [r3, #0]
	return 0;
    91cc:	4770      	bx	lr
		return -EINVAL;
    91ce:	f06f 0015 	mvn.w	r0, #21
}
    91d2:	4770      	bx	lr

000091d4 <uninit>:
	struct shell_dummy *sh_dummy = (struct shell_dummy *)transport->ctx;
    91d4:	6843      	ldr	r3, [r0, #4]
	if (!sh_dummy->initialized) {
    91d6:	781a      	ldrb	r2, [r3, #0]
    91d8:	b112      	cbz	r2, 91e0 <uninit+0xc>
	sh_dummy->initialized = false;
    91da:	2000      	movs	r0, #0
    91dc:	7018      	strb	r0, [r3, #0]
	return 0;
    91de:	4770      	bx	lr
		return -ENODEV;
    91e0:	f06f 0012 	mvn.w	r0, #18
}
    91e4:	4770      	bx	lr

000091e6 <enable>:
	if (!sh_dummy->initialized) {
    91e6:	6843      	ldr	r3, [r0, #4]
    91e8:	781b      	ldrb	r3, [r3, #0]
	return 0;
    91ea:	2b00      	cmp	r3, #0
}
    91ec:	bf0c      	ite	eq
    91ee:	f06f 0012 	mvneq.w	r0, #18
    91f2:	2000      	movne	r0, #0
    91f4:	4770      	bx	lr

000091f6 <read>:
	if (!sh_dummy->initialized) {
    91f6:	6842      	ldr	r2, [r0, #4]
    91f8:	7812      	ldrb	r2, [r2, #0]
    91fa:	b112      	cbz	r2, 9202 <read+0xc>
	*cnt = 0;
    91fc:	2000      	movs	r0, #0
    91fe:	6018      	str	r0, [r3, #0]
	return 0;
    9200:	4770      	bx	lr
		return -ENODEV;
    9202:	f06f 0012 	mvn.w	r0, #18
}
    9206:	4770      	bx	lr

00009208 <write>:
{
    9208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_dummy *sh_dummy = (struct shell_dummy *)transport->ctx;
    920a:	6845      	ldr	r5, [r0, #4]
{
    920c:	461f      	mov	r7, r3
	if (!sh_dummy->initialized) {
    920e:	782b      	ldrb	r3, [r5, #0]
{
    9210:	4614      	mov	r4, r2
	if (!sh_dummy->initialized) {
    9212:	b1a3      	cbz	r3, 923e <write+0x36>
	if (sh_dummy->len + store_cnt >= sizeof(sh_dummy->buf)) {
    9214:	686b      	ldr	r3, [r5, #4]
    9216:	189a      	adds	r2, r3, r2
    9218:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
		store_cnt = sizeof(sh_dummy->buf) - sh_dummy->len - 1;
    921c:	bf26      	itte	cs
    921e:	f5c3 7695 	rsbcs	r6, r3, #298	; 0x12a
    9222:	3601      	addcs	r6, #1
	store_cnt = length;
    9224:	4626      	movcc	r6, r4
	memcpy(sh_dummy->buf + sh_dummy->len, data, store_cnt);
    9226:	f105 0008 	add.w	r0, r5, #8
    922a:	4418      	add	r0, r3
    922c:	4632      	mov	r2, r6
    922e:	f001 fc65 	bl	aafc <memcpy>
	sh_dummy->len += store_cnt;
    9232:	686b      	ldr	r3, [r5, #4]
    9234:	4433      	add	r3, r6
    9236:	606b      	str	r3, [r5, #4]
	return 0;
    9238:	2000      	movs	r0, #0
		*cnt = 0;
    923a:	603c      	str	r4, [r7, #0]
}
    923c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    923e:	461c      	mov	r4, r3
		return -ENODEV;
    9240:	f06f 0012 	mvn.w	r0, #18
    9244:	e7f9      	b.n	923a <write+0x32>

00009246 <atomic_or>:
{
    9246:	b510      	push	{r4, lr}
    9248:	4603      	mov	r3, r0
}
    924a:	f3bf 8f5b 	dmb	ish
    924e:	e853 0f00 	ldrex	r0, [r3]
    9252:	ea40 0201 	orr.w	r2, r0, r1
    9256:	e843 2400 	strex	r4, r2, [r3]
    925a:	2c00      	cmp	r4, #0
    925c:	d1f7      	bne.n	924e <atomic_or+0x8>
    925e:	f3bf 8f5b 	dmb	ish
    9262:	bd10      	pop	{r4, pc}

00009264 <atomic_and>:
{
    9264:	b510      	push	{r4, lr}
    9266:	4603      	mov	r3, r0
}
    9268:	f3bf 8f5b 	dmb	ish
    926c:	e853 0f00 	ldrex	r0, [r3]
    9270:	ea00 0201 	and.w	r2, r0, r1
    9274:	e843 2400 	strex	r4, r2, [r3]
    9278:	2c00      	cmp	r4, #0
    927a:	d1f7      	bne.n	926c <atomic_and+0x8>
    927c:	f3bf 8f5b 	dmb	ish
    9280:	bd10      	pop	{r4, pc}

00009282 <shell_signal_handle>:
{
    9282:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    9284:	0109      	lsls	r1, r1, #4
    9286:	6885      	ldr	r5, [r0, #8]
    9288:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    928c:	4604      	mov	r4, r0
    928e:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    9290:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    9292:	aa01      	add	r2, sp, #4
    9294:	4669      	mov	r1, sp
    9296:	4628      	mov	r0, r5
    9298:	f001 fbec 	bl	aa74 <z_impl_k_poll_signal_check>
	if (set) {
    929c:	9b00      	ldr	r3, [sp, #0]
    929e:	b123      	cbz	r3, 92aa <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    92a0:	4628      	mov	r0, r5
    92a2:	f001 fbe4 	bl	aa6e <z_impl_k_poll_signal_reset>
		handler(shell);
    92a6:	4620      	mov	r0, r4
    92a8:	47b0      	blx	r6
}
    92aa:	b002      	add	sp, #8
    92ac:	bd70      	pop	{r4, r5, r6, pc}

000092ae <z_shell_strlen>:
{
    92ae:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    92b0:	b110      	cbz	r0, 92b8 <z_shell_strlen+0xa>
    92b2:	f7f7 f8f5 	bl	4a0 <strlen>
    92b6:	b280      	uxth	r0, r0
}
    92b8:	bd08      	pop	{r3, pc}

000092ba <z_shell_raw_fprintf>:
{
    92ba:	b40e      	push	{r1, r2, r3}
    92bc:	b503      	push	{r0, r1, lr}
    92be:	aa03      	add	r2, sp, #12
    92c0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    92c4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    92c6:	f7f9 fbdd 	bl	2a84 <z_shell_fprintf_fmt>
}
    92ca:	b002      	add	sp, #8
    92cc:	f85d eb04 	ldr.w	lr, [sp], #4
    92d0:	b003      	add	sp, #12
    92d2:	4770      	bx	lr

000092d4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    92d4:	f7fd b9e0 	b.w	6698 <z_impl_k_mutex_lock>

000092d8 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    92d8:	688b      	ldr	r3, [r1, #8]
    92da:	b920      	cbnz	r0, 92e6 <transport_evt_handler+0xe>
    92dc:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    92e0:	2100      	movs	r1, #0
    92e2:	f7fd bff3 	b.w	72cc <z_impl_k_poll_signal_raise>
    92e6:	f503 7026 	add.w	r0, r3, #664	; 0x298
    92ea:	e7f9      	b.n	92e0 <transport_evt_handler+0x8>

000092ec <kill_handler>:
{
    92ec:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    92ee:	6883      	ldr	r3, [r0, #8]
    92f0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
    92f4:	07db      	lsls	r3, r3, #31
{
    92f6:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    92f8:	d41a      	bmi.n	9330 <kill_handler+0x44>
	err = shell->iface->api->uninit(shell->iface);
    92fa:	6840      	ldr	r0, [r0, #4]
    92fc:	6803      	ldr	r3, [r0, #0]
    92fe:	685b      	ldr	r3, [r3, #4]
    9300:	4798      	blx	r3
	if (err != 0) {
    9302:	4605      	mov	r5, r0
    9304:	b920      	cbnz	r0, 9310 <kill_handler+0x24>
	z_shell_history_purge(shell->history);
    9306:	68e0      	ldr	r0, [r4, #12]
    9308:	f000 fbfb 	bl	9b02 <z_shell_history_purge>
	shell->ctx->state = state;
    930c:	68a3      	ldr	r3, [r4, #8]
    930e:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    9310:	68a3      	ldr	r3, [r4, #8]
    9312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9314:	b113      	cbz	r3, 931c <kill_handler+0x30>
		shell->ctx->uninit_cb(shell, err);
    9316:	4629      	mov	r1, r5
    9318:	4620      	mov	r0, r4
    931a:	4798      	blx	r3
	shell->ctx->tid = NULL;
    931c:	68a3      	ldr	r3, [r4, #8]
    931e:	2200      	movs	r2, #0
    9320:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    9324:	f7fd fda0 	bl	6e68 <z_impl_z_current_get>
}
    9328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    932c:	f7fa befc 	b.w	4128 <z_impl_k_thread_abort>
		return -EBUSY;
    9330:	f06f 050f 	mvn.w	r5, #15
    9334:	e7ec      	b.n	9310 <kill_handler+0x24>

00009336 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    9336:	f500 7019 	add.w	r0, r0, #612	; 0x264
    933a:	b111      	cbz	r1, 9342 <z_flag_history_exit_set.isra.0+0xc>
    933c:	2104      	movs	r1, #4
    933e:	f7ff bf82 	b.w	9246 <atomic_or>
    9342:	f06f 0104 	mvn.w	r1, #4
    9346:	f7ff bf8d 	b.w	9264 <atomic_and>

0000934a <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    934a:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    934c:	f500 7018 	add.w	r0, r0, #608	; 0x260
    9350:	b129      	cbz	r1, 935e <z_flag_insert_mode_set.isra.0+0x14>
    9352:	2101      	movs	r1, #1
    9354:	f7ff ff77 	bl	9246 <atomic_or>
}
    9358:	f000 0001 	and.w	r0, r0, #1
    935c:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    935e:	f06f 0101 	mvn.w	r1, #1
    9362:	f7ff ff7f 	bl	9264 <atomic_and>
    9366:	e7f7      	b.n	9358 <z_flag_insert_mode_set.isra.0+0xe>

00009368 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    9368:	f7fd ba10 	b.w	678c <z_impl_k_mutex_unlock>

0000936c <shell_vfprintf>:
{
    936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    936e:	4604      	mov	r4, r0
	return shell->ctx->state;
    9370:	6880      	ldr	r0, [r0, #8]
{
    9372:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    9374:	7903      	ldrb	r3, [r0, #4]
    9376:	2b02      	cmp	r3, #2
{
    9378:	460d      	mov	r5, r1
    937a:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    937c:	d007      	beq.n	938e <shell_vfprintf+0x22>
}
    937e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    9382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9386:	f500 7019 	add.w	r0, r0, #612	; 0x264
    938a:	f7ff bf5c 	b.w	9246 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    938e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9396:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    939a:	f7ff ff9b 	bl	92d4 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    939e:	68a3      	ldr	r3, [r4, #8]
    93a0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    93a4:	0511      	lsls	r1, r2, #20
    93a6:	d404      	bmi.n	93b2 <shell_vfprintf+0x46>
    93a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    93aa:	b913      	cbnz	r3, 93b2 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    93ac:	4620      	mov	r0, r4
    93ae:	f000 f9f1 	bl	9794 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    93b2:	463b      	mov	r3, r7
    93b4:	4632      	mov	r2, r6
    93b6:	4629      	mov	r1, r5
    93b8:	4620      	mov	r0, r4
    93ba:	f000 fa4b 	bl	9854 <z_shell_vfprintf>
    93be:	68a3      	ldr	r3, [r4, #8]
    93c0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    93c4:	0512      	lsls	r2, r2, #20
    93c6:	d404      	bmi.n	93d2 <shell_vfprintf+0x66>
    93c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    93ca:	b913      	cbnz	r3, 93d2 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    93cc:	4620      	mov	r0, r4
    93ce:	f7f9 fe85 	bl	30dc <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    93d2:	6960      	ldr	r0, [r4, #20]
    93d4:	f000 f817 	bl	9406 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    93d8:	68a0      	ldr	r0, [r4, #8]
}
    93da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    93de:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    93e2:	f7ff bfc1 	b.w	9368 <k_mutex_unlock.isra.0>

000093e6 <shell_fprintf>:
{
    93e6:	b40c      	push	{r2, r3}
    93e8:	b507      	push	{r0, r1, r2, lr}
    93ea:	ab04      	add	r3, sp, #16
    93ec:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    93f0:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    93f2:	f7ff ffbb 	bl	936c <shell_vfprintf>
}
    93f6:	b003      	add	sp, #12
    93f8:	f85d eb04 	ldr.w	lr, [sp], #4
    93fc:	b002      	add	sp, #8
    93fe:	4770      	bx	lr

00009400 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    9400:	6883      	ldr	r3, [r0, #8]
    9402:	6399      	str	r1, [r3, #56]	; 0x38
}
    9404:	4770      	bx	lr

00009406 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
    9406:	b510      	push	{r4, lr}
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    9408:	6902      	ldr	r2, [r0, #16]
    940a:	6883      	ldr	r3, [r0, #8]
    940c:	6812      	ldr	r2, [r2, #0]
    940e:	6801      	ldr	r1, [r0, #0]
{
    9410:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    9412:	68c0      	ldr	r0, [r0, #12]
    9414:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    9416:	6923      	ldr	r3, [r4, #16]
    9418:	2200      	movs	r2, #0
    941a:	601a      	str	r2, [r3, #0]
}
    941c:	bd10      	pop	{r4, pc}

0000941e <out_func>:
{
    941e:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    9420:	68cb      	ldr	r3, [r1, #12]
    9422:	7c1b      	ldrb	r3, [r3, #16]
    9424:	2b02      	cmp	r3, #2
{
    9426:	4605      	mov	r5, r0
    9428:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    942a:	d104      	bne.n	9436 <out_func+0x18>
    942c:	280a      	cmp	r0, #10
    942e:	d102      	bne.n	9436 <out_func+0x18>
		(void)out_func('\r', ctx);
    9430:	200d      	movs	r0, #13
    9432:	f7ff fff4 	bl	941e <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    9436:	6923      	ldr	r3, [r4, #16]
    9438:	6822      	ldr	r2, [r4, #0]
    943a:	681b      	ldr	r3, [r3, #0]
    943c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    943e:	6922      	ldr	r2, [r4, #16]
    9440:	6813      	ldr	r3, [r2, #0]
    9442:	3301      	adds	r3, #1
    9444:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    9446:	6923      	ldr	r3, [r4, #16]
    9448:	681a      	ldr	r2, [r3, #0]
    944a:	6863      	ldr	r3, [r4, #4]
    944c:	429a      	cmp	r2, r3
    944e:	d102      	bne.n	9456 <out_func+0x38>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    9450:	4620      	mov	r0, r4
    9452:	f7ff ffd8 	bl	9406 <z_shell_fprintf_buffer_flush>
}
    9456:	2000      	movs	r0, #0
    9458:	bd38      	pop	{r3, r4, r5, pc}

0000945a <z_shell_strlen>:
{
    945a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    945c:	b110      	cbz	r0, 9464 <z_shell_strlen+0xa>
    945e:	f7f7 f81f 	bl	4a0 <strlen>
    9462:	b280      	uxth	r0, r0
}
    9464:	bd08      	pop	{r3, pc}

00009466 <z_column_span_with_buffer_offsets_get>:
{
    9466:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    9468:	7b04      	ldrb	r4, [r0, #12]
    946a:	8943      	ldrh	r3, [r0, #10]
    946c:	4422      	add	r2, r4
    946e:	4421      	add	r1, r4
    9470:	fbb2 f0f3 	udiv	r0, r2, r3
    9474:	fb03 2210 	mls	r2, r3, r0, r2
    9478:	fbb1 f0f3 	udiv	r0, r1, r3
    947c:	fb03 1010 	mls	r0, r3, r0, r1
}
    9480:	1a10      	subs	r0, r2, r0
    9482:	bd10      	pop	{r4, pc}

00009484 <z_row_span_with_buffer_offsets_get>:
{
    9484:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    9486:	7b04      	ldrb	r4, [r0, #12]
    9488:	8943      	ldrh	r3, [r0, #10]
    948a:	4421      	add	r1, r4
    948c:	1910      	adds	r0, r2, r4
    948e:	fbb1 f1f3 	udiv	r1, r1, r3
    9492:	fbb0 f0f3 	udiv	r0, r0, r3
}
    9496:	1a40      	subs	r0, r0, r1
    9498:	bd10      	pop	{r4, pc}

0000949a <z_shell_multiline_data_calc>:
{
    949a:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    949c:	7b05      	ldrb	r5, [r0, #12]
    949e:	8943      	ldrh	r3, [r0, #10]
    94a0:	4429      	add	r1, r5
    94a2:	fbb1 f4f3 	udiv	r4, r1, r3
    94a6:	fb03 1114 	mls	r1, r3, r4, r1
    94aa:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    94ac:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    94ae:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    94b0:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    94b2:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    94b6:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    94ba:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    94bc:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    94be:	1c4c      	adds	r4, r1, #1
    94c0:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    94c2:	8042      	strh	r2, [r0, #2]
}
    94c4:	bd30      	pop	{r4, r5, pc}

000094c6 <z_shell_pattern_remove>:
{
    94c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94c8:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    94ca:	4611      	mov	r1, r2
{
    94cc:	4615      	mov	r5, r2
    94ce:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    94d0:	f001 fb93 	bl	abfa <strstr>
    94d4:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    94d6:	4628      	mov	r0, r5
    94d8:	f7ff ffbf 	bl	945a <z_shell_strlen>
    94dc:	4605      	mov	r5, r0
	if (!pattern_addr) {
    94de:	b1c4      	cbz	r4, 9512 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    94e0:	42a7      	cmp	r7, r4
    94e2:	d207      	bcs.n	94f4 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    94e4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    94e8:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    94ea:	bf02      	ittt	eq
    94ec:	3501      	addeq	r5, #1
    94ee:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    94f0:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    94f4:	4620      	mov	r0, r4
    94f6:	f7ff ffb0 	bl	945a <z_shell_strlen>
	*buff_len -= pattern_len;
    94fa:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    94fc:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
    94fe:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    9500:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
    9502:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
    9504:	1961      	adds	r1, r4, r5
    9506:	4620      	mov	r0, r4
    9508:	b292      	uxth	r2, r2
}
    950a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    950e:	f001 bb03 	b.w	ab18 <memmove>
    9512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009514 <z_shell_find_cmd>:
{
    9514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9518:	460f      	mov	r7, r1
    951a:	b086      	sub	sp, #24
    951c:	4616      	mov	r6, r2
	if (parent) {
    951e:	4604      	mov	r4, r0
    9520:	b170      	cbz	r0, 9540 <z_shell_find_cmd+0x2c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    9522:	4603      	mov	r3, r0
    9524:	ac01      	add	r4, sp, #4
    9526:	f100 0510 	add.w	r5, r0, #16
    952a:	6818      	ldr	r0, [r3, #0]
    952c:	6859      	ldr	r1, [r3, #4]
    952e:	4622      	mov	r2, r4
    9530:	c203      	stmia	r2!, {r0, r1}
    9532:	3308      	adds	r3, #8
    9534:	42ab      	cmp	r3, r5
    9536:	4614      	mov	r4, r2
    9538:	d1f7      	bne.n	952a <z_shell_find_cmd+0x16>
    953a:	6818      	ldr	r0, [r3, #0]
    953c:	6010      	str	r0, [r2, #0]
		parent = &parent_cpy;
    953e:	ac01      	add	r4, sp, #4
    9540:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    9544:	4641      	mov	r1, r8
    9546:	4632      	mov	r2, r6
    9548:	4620      	mov	r0, r4
    954a:	f7f9 fb8f 	bl	2c6c <z_shell_cmd_get>
    954e:	f108 0801 	add.w	r8, r8, #1
    9552:	4605      	mov	r5, r0
    9554:	b128      	cbz	r0, 9562 <z_shell_find_cmd+0x4e>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    9556:	6829      	ldr	r1, [r5, #0]
    9558:	4638      	mov	r0, r7
    955a:	f7f6 ff97 	bl	48c <strcmp>
    955e:	2800      	cmp	r0, #0
    9560:	d1f0      	bne.n	9544 <z_shell_find_cmd+0x30>
}
    9562:	4628      	mov	r0, r5
    9564:	b006      	add	sp, #24
    9566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000956a <z_shell_get_last_command>:
{
    956a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    956e:	461c      	mov	r4, r3
    9570:	f8dd 8020 	ldr.w	r8, [sp, #32]
    9574:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    9578:	2300      	movs	r3, #0
{
    957a:	460f      	mov	r7, r1
    957c:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    957e:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
    9580:	6823      	ldr	r3, [r4, #0]
    9582:	42bb      	cmp	r3, r7
				continue;
    9584:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    9586:	d21b      	bcs.n	95c0 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    9588:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    958c:	f000 fb33 	bl	9bf6 <z_shell_has_wildcard>
    9590:	6823      	ldr	r3, [r4, #0]
    9592:	4682      	mov	sl, r0
    9594:	b118      	cbz	r0, 959e <z_shell_get_last_command+0x34>
				(*match_arg)++;
    9596:	3301      	adds	r3, #1
    9598:	6023      	str	r3, [r4, #0]
				continue;
    959a:	4628      	mov	r0, r5
    959c:	e7f0      	b.n	9580 <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    959e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    95a2:	4642      	mov	r2, r8
    95a4:	4628      	mov	r0, r5
    95a6:	f7ff ffb5 	bl	9514 <z_shell_find_cmd>
		if (entry) {
    95aa:	b148      	cbz	r0, 95c0 <z_shell_get_last_command+0x56>
			(*match_arg)++;
    95ac:	6823      	ldr	r3, [r4, #0]
    95ae:	1c5a      	adds	r2, r3, #1
    95b0:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
    95b2:	f1b9 0f00 	cmp.w	r9, #0
    95b6:	d0e3      	beq.n	9580 <z_shell_get_last_command+0x16>
    95b8:	4580      	cmp	r8, r0
    95ba:	d1e1      	bne.n	9580 <z_shell_get_last_command+0x16>
			(*match_arg)--;
    95bc:	6023      	str	r3, [r4, #0]
			return NULL;
    95be:	4655      	mov	r5, sl
}
    95c0:	4628      	mov	r0, r5
    95c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000095c6 <shell_strtoul>:

	return val;
}

unsigned long shell_strtoul(const char *str, int base, int *err)
{
    95c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned long val;
	char *endptr = NULL;

	if (*str == '-') {
    95c8:	7803      	ldrb	r3, [r0, #0]
	char *endptr = NULL;
    95ca:	2700      	movs	r7, #0
	if (*str == '-') {
    95cc:	2b2d      	cmp	r3, #45	; 0x2d
{
    95ce:	4604      	mov	r4, r0
    95d0:	460d      	mov	r5, r1
    95d2:	4616      	mov	r6, r2
	char *endptr = NULL;
    95d4:	9701      	str	r7, [sp, #4]
	if (*str == '-') {
    95d6:	d106      	bne.n	95e6 <shell_strtoul+0x20>
		*err = -EINVAL;
		return 0;
    95d8:	f06f 0315 	mvn.w	r3, #21
	}

	errno = 0;
	val = strtoul(str, &endptr, base);
	if (errno == ERANGE) {
		*err = -ERANGE;
    95dc:	6033      	str	r3, [r6, #0]
		return 0;
    95de:	2500      	movs	r5, #0
		*err = -EINVAL;
		return 0;
	}

	return val;
}
    95e0:	4628      	mov	r0, r5
    95e2:	b003      	add	sp, #12
    95e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	errno = 0;
    95e6:	f000 fb8f 	bl	9d08 <__errno>
	val = strtoul(str, &endptr, base);
    95ea:	462a      	mov	r2, r5
	errno = 0;
    95ec:	6007      	str	r7, [r0, #0]
	val = strtoul(str, &endptr, base);
    95ee:	a901      	add	r1, sp, #4
    95f0:	4620      	mov	r0, r4
    95f2:	f7fe f9fb 	bl	79ec <strtoul>
    95f6:	4605      	mov	r5, r0
	if (errno == ERANGE) {
    95f8:	f000 fb86 	bl	9d08 <__errno>
    95fc:	6803      	ldr	r3, [r0, #0]
    95fe:	2b22      	cmp	r3, #34	; 0x22
    9600:	d102      	bne.n	9608 <shell_strtoul+0x42>
    9602:	f06f 0321 	mvn.w	r3, #33	; 0x21
    9606:	e7e9      	b.n	95dc <shell_strtoul+0x16>
	} else if (errno || endptr == str || *endptr) {
    9608:	f000 fb7e 	bl	9d08 <__errno>
    960c:	6803      	ldr	r3, [r0, #0]
    960e:	2b00      	cmp	r3, #0
    9610:	d1e2      	bne.n	95d8 <shell_strtoul+0x12>
    9612:	9b01      	ldr	r3, [sp, #4]
    9614:	42a3      	cmp	r3, r4
    9616:	d0df      	beq.n	95d8 <shell_strtoul+0x12>
    9618:	781b      	ldrb	r3, [r3, #0]
    961a:	2b00      	cmp	r3, #0
    961c:	d0e0      	beq.n	95e0 <shell_strtoul+0x1a>
    961e:	e7db      	b.n	95d8 <shell_strtoul+0x12>

00009620 <z_shell_raw_fprintf>:
{
    9620:	b40e      	push	{r1, r2, r3}
    9622:	b503      	push	{r0, r1, lr}
    9624:	aa03      	add	r2, sp, #12
    9626:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    962a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    962c:	f7f9 fa2a 	bl	2a84 <z_shell_fprintf_fmt>
}
    9630:	b002      	add	sp, #8
    9632:	f85d eb04 	ldr.w	lr, [sp], #4
    9636:	b003      	add	sp, #12
    9638:	4770      	bx	lr

0000963a <full_line_cmd>:
{
    963a:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    963c:	6883      	ldr	r3, [r0, #8]
{
    963e:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    9640:	6818      	ldr	r0, [r3, #0]
    9642:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    9644:	b110      	cbz	r0, 964c <full_line_cmd+0x12>
    9646:	f7f6 ff2b 	bl	4a0 <strlen>
    964a:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    964c:	68a2      	ldr	r2, [r4, #8]
    964e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    9650:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    9652:	fbb3 f1f2 	udiv	r1, r3, r2
    9656:	fb02 3011 	mls	r0, r2, r1, r3
}
    965a:	fab0 f080 	clz	r0, r0
    965e:	0940      	lsrs	r0, r0, #5
    9660:	bd38      	pop	{r3, r4, r5, pc}

00009662 <z_shell_cursor_in_empty_line>:
{
    9662:	b538      	push	{r3, r4, r5, lr}
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
    9664:	6883      	ldr	r3, [r0, #8]
    9666:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    966a:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
{
    966c:	4604      	mov	r4, r0
		 z_shell_strlen(shell->ctx->prompt)) %
    966e:	6818      	ldr	r0, [r3, #0]
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
    9670:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9674:	4355      	muls	r5, r2
    9676:	b110      	cbz	r0, 967e <z_shell_cursor_in_empty_line+0x1c>
    9678:	f7f6 ff12 	bl	4a0 <strlen>
    967c:	b280      	uxth	r0, r0
			shell->ctx->vt100_ctx.cons.terminal_wid ==
    967e:	68a2      	ldr	r2, [r4, #8]
    9680:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
    9682:	1943      	adds	r3, r0, r5
		 z_shell_strlen(shell->ctx->prompt)) %
    9684:	fbb3 f1f2 	udiv	r1, r3, r2
    9688:	fb02 3011 	mls	r0, r2, r1, r3
}
    968c:	fab0 f080 	clz	r0, r0
    9690:	0940      	lsrs	r0, r0, #5
    9692:	bd38      	pop	{r3, r4, r5, pc}

00009694 <z_shell_op_cond_next_line>:
{
    9694:	b510      	push	{r4, lr}
    9696:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    9698:	f7ff ffe3 	bl	9662 <z_shell_cursor_in_empty_line>
    969c:	b120      	cbz	r0, 96a8 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
    969e:	6960      	ldr	r0, [r4, #20]
}
    96a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
    96a4:	f7f9 bb96 	b.w	2dd4 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    96a8:	4620      	mov	r0, r4
    96aa:	f7ff ffc6 	bl	963a <full_line_cmd>
    96ae:	2800      	cmp	r0, #0
    96b0:	d1f5      	bne.n	969e <z_shell_op_cond_next_line+0xa>
}
    96b2:	bd10      	pop	{r4, pc}

000096b4 <z_shell_op_cursor_position_synchronize>:
{
    96b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    96b6:	6884      	ldr	r4, [r0, #8]
{
    96b8:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    96ba:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    96bc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    96be:	f104 0020 	add.w	r0, r4, #32
    96c2:	f7ff feea 	bl	949a <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
    96c6:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    96c8:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    96ca:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    96cc:	f7ff ffb5 	bl	963a <full_line_cmd>
    96d0:	b110      	cbz	r0, 96d8 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
    96d2:	6968      	ldr	r0, [r5, #20]
    96d4:	f7f9 fb7e 	bl	2dd4 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    96d8:	42b7      	cmp	r7, r6
    96da:	d107      	bne.n	96ec <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    96dc:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    96de:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    96e0:	4628      	mov	r0, r5
    96e2:	1ac9      	subs	r1, r1, r3
}
    96e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    96e8:	f7f9 bb90 	b.w	2e0c <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    96ec:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    96ee:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    96f0:	4628      	mov	r0, r5
    96f2:	1ac9      	subs	r1, r1, r3
    96f4:	f7f9 fb74 	bl	2de0 <z_shell_op_cursor_vert_move>
    96f8:	e7f0      	b.n	96dc <z_shell_op_cursor_position_synchronize+0x28>

000096fa <z_shell_op_cursor_move>:
{
    96fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96fc:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    96fe:	6880      	ldr	r0, [r0, #8]
{
    9700:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    9702:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    9704:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    9706:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    9708:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    970a:	f7ff fec6 	bl	949a <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    970e:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    9710:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    9712:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    9714:	462a      	mov	r2, r5
    9716:	3020      	adds	r0, #32
    9718:	f7ff feb4 	bl	9484 <z_row_span_with_buffer_offsets_get>
    971c:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    971e:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    9720:	462a      	mov	r2, r5
    9722:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    9724:	3020      	adds	r0, #32
    9726:	f7ff fe9e 	bl	9466 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    972a:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    972c:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    972e:	4620      	mov	r0, r4
    9730:	f7f9 fb56 	bl	2de0 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    9734:	4631      	mov	r1, r6
    9736:	4620      	mov	r0, r4
    9738:	f7f9 fb68 	bl	2e0c <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    973c:	68a3      	ldr	r3, [r4, #8]
    973e:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    9740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009742 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    9742:	6883      	ldr	r3, [r0, #8]
    9744:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    9746:	4249      	negs	r1, r1
    9748:	b209      	sxth	r1, r1
    974a:	f7ff bfd6 	b.w	96fa <z_shell_op_cursor_move>

0000974e <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    974e:	6883      	ldr	r3, [r0, #8]
    9750:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    9752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    9754:	1ac9      	subs	r1, r1, r3
    9756:	b209      	sxth	r1, r1
    9758:	f7ff bfcf 	b.w	96fa <z_shell_op_cursor_move>

0000975c <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    975c:	6883      	ldr	r3, [r0, #8]
    975e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    9760:	b11b      	cbz	r3, 976a <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    9762:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9766:	f7ff bfc8 	b.w	96fa <z_shell_op_cursor_move>
}
    976a:	4770      	bx	lr

0000976c <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    976c:	6883      	ldr	r3, [r0, #8]
    976e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    9770:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    9772:	429a      	cmp	r2, r3
    9774:	d202      	bcs.n	977c <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    9776:	2101      	movs	r1, #1
    9778:	f7ff bfbf 	b.w	96fa <z_shell_op_cursor_move>
}
    977c:	4770      	bx	lr

0000977e <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    977e:	6882      	ldr	r2, [r0, #8]
    9780:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
    9782:	8791      	strh	r1, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    9784:	6883      	ldr	r3, [r0, #8]
    9786:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    9788:	4413      	add	r3, r2
    978a:	2200      	movs	r2, #0
    978c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    9790:	f7f9 bb14 	b.w	2dbc <z_clear_eos>

00009794 <z_shell_cmd_line_erase>:
{
    9794:	b510      	push	{r4, lr}
    9796:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    9798:	6880      	ldr	r0, [r0, #8]
    979a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    979c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    979e:	3020      	adds	r0, #32
    97a0:	f7ff fe7b 	bl	949a <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    97a4:	68a3      	ldr	r3, [r4, #8]
    97a6:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    97a8:	4620      	mov	r0, r4
    97aa:	f1c1 0101 	rsb	r1, r1, #1
    97ae:	f7f9 fb2d 	bl	2e0c <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    97b2:	68a3      	ldr	r3, [r4, #8]
    97b4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    97b6:	4620      	mov	r0, r4
    97b8:	3901      	subs	r1, #1
    97ba:	f7f9 fb11 	bl	2de0 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    97be:	4620      	mov	r0, r4
}
    97c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    97c4:	f7f9 bafa 	b.w	2dbc <z_clear_eos>

000097c8 <z_shell_write>:
{
    97c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97cc:	4605      	mov	r5, r0
    97ce:	b086      	sub	sp, #24
    97d0:	460f      	mov	r7, r1
    97d2:	4614      	mov	r4, r2
	size_t offset = 0;
    97d4:	2600      	movs	r6, #0
	while (length) {
    97d6:	b9a4      	cbnz	r4, 9802 <z_shell_write+0x3a>
}
    97d8:	b006      	add	sp, #24
    97da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return sh->ctx->ctx.flags.tx_rdy == 1;
    97de:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
    97e2:	0792      	lsls	r2, r2, #30
    97e4:	d5fb      	bpl.n	97de <z_shell_write+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    97e6:	f3bf 8f5b 	dmb	ish
    97ea:	f503 7319 	add.w	r3, r3, #612	; 0x264
    97ee:	e853 1f00 	ldrex	r1, [r3]
    97f2:	f021 0102 	bic.w	r1, r1, #2
    97f6:	e843 1200 	strex	r2, r1, [r3]
    97fa:	2a00      	cmp	r2, #0
    97fc:	d1f7      	bne.n	97ee <z_shell_write+0x26>
    97fe:	f3bf 8f5b 	dmb	ish
		int err = shell->iface->api->write(shell->iface,
    9802:	6868      	ldr	r0, [r5, #4]
    9804:	6803      	ldr	r3, [r0, #0]
    9806:	4622      	mov	r2, r4
    9808:	f8d3 800c 	ldr.w	r8, [r3, #12]
    980c:	19b9      	adds	r1, r7, r6
    980e:	466b      	mov	r3, sp
    9810:	47c0      	blx	r8
		offset += tmp_cnt;
    9812:	9a00      	ldr	r2, [sp, #0]
    9814:	4416      	add	r6, r2
		length -= tmp_cnt;
    9816:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    9818:	2a00      	cmp	r2, #0
    981a:	d1dc      	bne.n	97d6 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    981c:	68ab      	ldr	r3, [r5, #8]
    981e:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    9820:	2903      	cmp	r1, #3
    9822:	d0ee      	beq.n	9802 <z_shell_write+0x3a>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    9824:	2902      	cmp	r1, #2
    9826:	d8da      	bhi.n	97de <z_shell_write+0x16>
		k_poll_event_init(&event,
    9828:	f503 7326 	add.w	r3, r3, #664	; 0x298
    982c:	2101      	movs	r1, #1
    982e:	a801      	add	r0, sp, #4
    9830:	f001 f8fb 	bl	aa2a <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    9834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    983c:	2101      	movs	r1, #1
    983e:	a801      	add	r0, sp, #4
    9840:	f7fd fce8 	bl	7214 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    9844:	68a8      	ldr	r0, [r5, #8]
    9846:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    984a:	f001 f910 	bl	aa6e <z_impl_k_poll_signal_reset>
	while (length) {
    984e:	e7d8      	b.n	9802 <z_shell_write+0x3a>

00009850 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    9850:	f7ff bfba 	b.w	97c8 <z_shell_write>

00009854 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    9854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9856:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
    9858:	6883      	ldr	r3, [r0, #8]
    985a:	4615      	mov	r5, r2
    985c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    9860:	06d2      	lsls	r2, r2, #27
{
    9862:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    9864:	d513      	bpl.n	988e <z_shell_vfprintf+0x3a>
	    z_flag_use_colors_get(shell)	  &&
    9866:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    986a:	428a      	cmp	r2, r1
    986c:	d00f      	beq.n	988e <z_shell_vfprintf+0x3a>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    986e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9870:	f8ad 3004 	strh.w	r3, [sp, #4]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    9874:	f7f9 fb24 	bl	2ec0 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    9878:	6960      	ldr	r0, [r4, #20]
    987a:	4632      	mov	r2, r6
    987c:	4629      	mov	r1, r5
    987e:	f7f9 f901 	bl	2a84 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    9882:	a901      	add	r1, sp, #4
    9884:	4620      	mov	r0, r4
    9886:	f7f9 fb3b 	bl	2f00 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    988a:	b003      	add	sp, #12
    988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    988e:	6960      	ldr	r0, [r4, #20]
    9890:	4632      	mov	r2, r6
    9892:	4629      	mov	r1, r5
}
    9894:	b003      	add	sp, #12
    9896:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    989a:	f7f9 b8f3 	b.w	2a84 <z_shell_fprintf_fmt>

0000989e <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    989e:	b40c      	push	{r2, r3}
    98a0:	b507      	push	{r0, r1, r2, lr}
    98a2:	ab04      	add	r3, sp, #16
    98a4:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    98a8:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    98aa:	f7ff ffd3 	bl	9854 <z_shell_vfprintf>
	va_end(args);
}
    98ae:	b003      	add	sp, #12
    98b0:	f85d eb04 	ldr.w	lr, [sp], #4
    98b4:	b002      	add	sp, #8
    98b6:	4770      	bx	lr

000098b8 <data_insert>:
{
    98b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    98bc:	6887      	ldr	r7, [r0, #8]
    98be:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    98c0:	18b3      	adds	r3, r6, r2
    98c2:	2bff      	cmp	r3, #255	; 0xff
{
    98c4:	4605      	mov	r5, r0
    98c6:	4688      	mov	r8, r1
    98c8:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    98ca:	dc20      	bgt.n	990e <data_insert+0x56>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    98cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    98ce:	1af6      	subs	r6, r6, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    98d0:	3342      	adds	r3, #66	; 0x42
    98d2:	441f      	add	r7, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    98d4:	b2b6      	uxth	r6, r6
    98d6:	4632      	mov	r2, r6
    98d8:	4639      	mov	r1, r7
    98da:	1938      	adds	r0, r7, r4
    98dc:	f001 f91c 	bl	ab18 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    98e0:	4622      	mov	r2, r4
    98e2:	4641      	mov	r1, r8
    98e4:	4638      	mov	r0, r7
    98e6:	f001 f909 	bl	aafc <memcpy>
	shell->ctx->cmd_buff_len += len;
    98ea:	68aa      	ldr	r2, [r5, #8]
    98ec:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    98ee:	4423      	add	r3, r4
    98f0:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    98f2:	68ab      	ldr	r3, [r5, #8]
    98f4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    98f6:	4413      	add	r3, r2
    98f8:	2200      	movs	r2, #0
    98fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    98fe:	68ab      	ldr	r3, [r5, #8]
    9900:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    9904:	0789      	lsls	r1, r1, #30
    9906:	d404      	bmi.n	9912 <data_insert+0x5a>
		shell->ctx->cmd_buff_pos += len;
    9908:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    990a:	4414      	add	r4, r2
    990c:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
    990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    9912:	4631      	mov	r1, r6
    9914:	4628      	mov	r0, r5
}
    9916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    991a:	f7f9 bb6f 	b.w	2ffc <reprint_from_cursor>

0000991e <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    991e:	f7ff bfcb 	b.w	98b8 <data_insert>

00009922 <z_shell_op_char_delete>:
{
    9922:	b538      	push	{r3, r4, r5, lr}
    9924:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9926:	6880      	ldr	r0, [r0, #8]
    9928:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    992a:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    992c:	1aa4      	subs	r4, r4, r2
    992e:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    9930:	b18c      	cbz	r4, 9956 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    9932:	3242      	adds	r2, #66	; 0x42
    9934:	4410      	add	r0, r2
__ssp_bos_icheck3(memmove, void *, const void *)
    9936:	1c41      	adds	r1, r0, #1
    9938:	4622      	mov	r2, r4
    993a:	f001 f8ed 	bl	ab18 <memmove>
	--shell->ctx->cmd_buff_len;
    993e:	68aa      	ldr	r2, [r5, #8]
    9940:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    9942:	3b01      	subs	r3, #1
    9944:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    9946:	1e61      	subs	r1, r4, #1
    9948:	4628      	mov	r0, r5
    994a:	2201      	movs	r2, #1
}
    994c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    9950:	b289      	uxth	r1, r1
    9952:	f7f9 bb53 	b.w	2ffc <reprint_from_cursor>
}
    9956:	bd38      	pop	{r3, r4, r5, pc}

00009958 <z_shell_op_char_backspace>:
{
    9958:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
    995a:	6883      	ldr	r3, [r0, #8]
    995c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    995e:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    9960:	b152      	cbz	r2, 9978 <z_shell_op_char_backspace+0x20>
    9962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    9964:	b143      	cbz	r3, 9978 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    9966:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    996a:	f7ff fec6 	bl	96fa <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    996e:	4620      	mov	r0, r4
}
    9970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    9974:	f7ff bfd5 	b.w	9922 <z_shell_op_char_delete>
}
    9978:	bd10      	pop	{r4, pc}

0000997a <z_shell_raw_fprintf>:
{
    997a:	b40e      	push	{r1, r2, r3}
    997c:	b503      	push	{r0, r1, lr}
    997e:	aa03      	add	r2, sp, #12
    9980:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    9984:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    9986:	f7f9 f87d 	bl	2a84 <z_shell_fprintf_fmt>
}
    998a:	b002      	add	sp, #8
    998c:	f85d eb04 	ldr.w	lr, [sp], #4
    9990:	b003      	add	sp, #12
    9992:	4770      	bx	lr

00009994 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    9994:	6983      	ldr	r3, [r0, #24]
    9996:	2000      	movs	r0, #0
    9998:	6018      	str	r0, [r3, #0]
}
    999a:	4770      	bx	lr

0000999c <z_shell_raw_fprintf>:
{
    999c:	b40e      	push	{r1, r2, r3}
    999e:	b503      	push	{r0, r1, lr}
    99a0:	aa03      	add	r2, sp, #12
    99a2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    99a6:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    99a8:	f7f9 f86c 	bl	2a84 <z_shell_fprintf_fmt>
}
    99ac:	b002      	add	sp, #8
    99ae:	f85d eb04 	ldr.w	lr, [sp], #4
    99b2:	b003      	add	sp, #12
    99b4:	4770      	bx	lr

000099b6 <cmd_bacskpace_mode_backspace>:
    99b6:	6883      	ldr	r3, [r0, #8]
    99b8:	f3bf 8f5b 	dmb	ish
    99bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
    99c0:	e853 1f00 	ldrex	r1, [r3]
    99c4:	f021 0108 	bic.w	r1, r1, #8
    99c8:	e843 1200 	strex	r2, r1, [r3]
    99cc:	2a00      	cmp	r2, #0
    99ce:	d1f7      	bne.n	99c0 <cmd_bacskpace_mode_backspace+0xa>
    99d0:	f3bf 8f5b 	dmb	ish
}
    99d4:	2000      	movs	r0, #0
    99d6:	4770      	bx	lr

000099d8 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    99d8:	6883      	ldr	r3, [r0, #8]
    99da:	f3bf 8f5b 	dmb	ish
    99de:	f503 7318 	add.w	r3, r3, #608	; 0x260
    99e2:	e853 1f00 	ldrex	r1, [r3]
    99e6:	f041 0108 	orr.w	r1, r1, #8
    99ea:	e843 1200 	strex	r2, r1, [r3]
    99ee:	2a00      	cmp	r2, #0
    99f0:	d1f7      	bne.n	99e2 <cmd_bacskpace_mode_delete+0xa>
    99f2:	f3bf 8f5b 	dmb	ish
}
    99f6:	2000      	movs	r0, #0
    99f8:	4770      	bx	lr

000099fa <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    99fa:	6883      	ldr	r3, [r0, #8]
    99fc:	f3bf 8f5b 	dmb	ish
    9a00:	f503 7318 	add.w	r3, r3, #608	; 0x260
    9a04:	e853 1f00 	ldrex	r1, [r3]
    9a08:	f021 0102 	bic.w	r1, r1, #2
    9a0c:	e843 1200 	strex	r2, r1, [r3]
    9a10:	2a00      	cmp	r2, #0
    9a12:	d1f7      	bne.n	9a04 <cmd_echo_off+0xa>
    9a14:	f3bf 8f5b 	dmb	ish
}
    9a18:	2000      	movs	r0, #0
    9a1a:	4770      	bx	lr

00009a1c <cmd_colors_off>:
    9a1c:	6883      	ldr	r3, [r0, #8]
    9a1e:	f3bf 8f5b 	dmb	ish
    9a22:	f503 7318 	add.w	r3, r3, #608	; 0x260
    9a26:	e853 1f00 	ldrex	r1, [r3]
    9a2a:	f021 0110 	bic.w	r1, r1, #16
    9a2e:	e843 1200 	strex	r2, r1, [r3]
    9a32:	2a00      	cmp	r2, #0
    9a34:	d1f7      	bne.n	9a26 <cmd_colors_off+0xa>
    9a36:	f3bf 8f5b 	dmb	ish
}
    9a3a:	2000      	movs	r0, #0
    9a3c:	4770      	bx	lr

00009a3e <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9a3e:	6883      	ldr	r3, [r0, #8]
    9a40:	f3bf 8f5b 	dmb	ish
    9a44:	f503 7318 	add.w	r3, r3, #608	; 0x260
    9a48:	e853 1f00 	ldrex	r1, [r3]
    9a4c:	f041 0110 	orr.w	r1, r1, #16
    9a50:	e843 1200 	strex	r2, r1, [r3]
    9a54:	2a00      	cmp	r2, #0
    9a56:	d1f7      	bne.n	9a48 <cmd_colors_on+0xa>
    9a58:	f3bf 8f5b 	dmb	ish
}
    9a5c:	2000      	movs	r0, #0
    9a5e:	4770      	bx	lr

00009a60 <cmd_echo_on>:
    9a60:	6883      	ldr	r3, [r0, #8]
    9a62:	f3bf 8f5b 	dmb	ish
    9a66:	f503 7318 	add.w	r3, r3, #608	; 0x260
    9a6a:	e853 1f00 	ldrex	r1, [r3]
    9a6e:	f041 0102 	orr.w	r1, r1, #2
    9a72:	e843 1200 	strex	r2, r1, [r3]
    9a76:	2a00      	cmp	r2, #0
    9a78:	d1f7      	bne.n	9a6a <cmd_echo_on+0xa>
    9a7a:	f3bf 8f5b 	dmb	ish
}
    9a7e:	2000      	movs	r0, #0
    9a80:	4770      	bx	lr

00009a82 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    9a82:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    9a84:	6883      	ldr	r3, [r0, #8]
	sys_dnode_t *const next = node->next;
    9a86:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    9a8a:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    9a8c:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    9a8e:	2100      	movs	r1, #0
	node->prev = NULL;
    9a90:	e9c3 1100 	strd	r1, r1, [r3]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
    9a94:	891a      	ldrh	r2, [r3, #8]
    9a96:	895b      	ldrh	r3, [r3, #10]
	ring_buf_get(history->ring_buf, NULL, total_len);
    9a98:	6800      	ldr	r0, [r0, #0]
			h_item->len + h_item->padding;
    9a9a:	441a      	add	r2, r3
	ring_buf_get(history->ring_buf, NULL, total_len);
    9a9c:	320c      	adds	r2, #12
    9a9e:	f7ff f971 	bl	8d84 <ring_buf_get>

	return true;
}
    9aa2:	2001      	movs	r0, #1
    9aa4:	bd08      	pop	{r3, pc}

00009aa6 <z_shell_history_mode_exit>:
	history->current = NULL;
    9aa6:	2300      	movs	r3, #0
    9aa8:	60c3      	str	r3, [r0, #12]
}
    9aaa:	4770      	bx	lr

00009aac <z_shell_history_get>:
{
    9aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aae:	461f      	mov	r7, r3
	return list->head == list;
    9ab0:	4603      	mov	r3, r0
    9ab2:	4616      	mov	r6, r2
    9ab4:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    9ab8:	429c      	cmp	r4, r3
    9aba:	d102      	bne.n	9ac2 <z_shell_history_get+0x16>
		*len = 0U;
    9abc:	2000      	movs	r0, #0
    9abe:	8038      	strh	r0, [r7, #0]
}
    9ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    9ac2:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    9ac4:	b9b1      	cbnz	r1, 9af4 <z_shell_history_get+0x48>
		if (history->current == NULL) {
    9ac6:	2d00      	cmp	r5, #0
    9ac8:	d0f8      	beq.n	9abc <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    9aca:	42a5      	cmp	r5, r4
    9acc:	d102      	bne.n	9ad4 <z_shell_history_get+0x28>
	history->current = l_item;
    9ace:	2300      	movs	r3, #0
    9ad0:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    9ad2:	e7f3      	b.n	9abc <z_shell_history_get+0x10>
    9ad4:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    9ad6:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    9ad8:	2c00      	cmp	r4, #0
    9ada:	d0ef      	beq.n	9abc <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9adc:	8922      	ldrh	r2, [r4, #8]
    9ade:	f104 010c 	add.w	r1, r4, #12
    9ae2:	4630      	mov	r0, r6
    9ae4:	f001 f80a 	bl	aafc <memcpy>
		*len = h_item->len;
    9ae8:	8923      	ldrh	r3, [r4, #8]
    9aea:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    9aec:	2200      	movs	r2, #0
    9aee:	54f2      	strb	r2, [r6, r3]
		return true;
    9af0:	2001      	movs	r0, #1
    9af2:	e7e5      	b.n	9ac0 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    9af4:	2d00      	cmp	r5, #0
    9af6:	d0ee      	beq.n	9ad6 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    9af8:	6883      	ldr	r3, [r0, #8]
    9afa:	429d      	cmp	r5, r3
    9afc:	d0e7      	beq.n	9ace <z_shell_history_get+0x22>
    9afe:	682c      	ldr	r4, [r5, #0]
    9b00:	e7e9      	b.n	9ad6 <z_shell_history_get+0x2a>

00009b02 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    9b02:	b538      	push	{r3, r4, r5, lr}
    9b04:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    9b06:	1d05      	adds	r5, r0, #4
    9b08:	6863      	ldr	r3, [r4, #4]
    9b0a:	42ab      	cmp	r3, r5
    9b0c:	d004      	beq.n	9b18 <z_shell_history_purge+0x16>
    9b0e:	4620      	mov	r0, r4
    9b10:	f7ff ffb7 	bl	9a82 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    9b14:	2800      	cmp	r0, #0
    9b16:	d1f7      	bne.n	9b08 <z_shell_history_purge+0x6>
	}
}
    9b18:	bd38      	pop	{r3, r4, r5, pc}

00009b1a <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    9b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item, *h_prev_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    9b1e:	f102 050c 	add.w	r5, r2, #12
	return buf->size;
    9b22:	6803      	ldr	r3, [r0, #0]
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    9b24:	f1c5 0900 	rsb	r9, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    9b28:	69db      	ldr	r3, [r3, #28]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    9b2a:	f009 0903 	and.w	r9, r9, #3
{
    9b2e:	b085      	sub	sp, #20
	total_len += padding;
    9b30:	444d      	add	r5, r9
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    9b32:	429d      	cmp	r5, r3
{
    9b34:	4604      	mov	r4, r0
    9b36:	9101      	str	r1, [sp, #4]
    9b38:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    9b3a:	d810      	bhi.n	9b5e <z_shell_history_put+0x44>
	history->current = NULL;
    9b3c:	2300      	movs	r3, #0
    9b3e:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    9b40:	b16a      	cbz	r2, 9b5e <z_shell_history_put+0x44>
	return list->head == list;
    9b42:	6846      	ldr	r6, [r0, #4]
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    9b44:	f100 0a04 	add.w	sl, r0, #4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9b48:	45b2      	cmp	sl, r6
    9b4a:	d00b      	beq.n	9b64 <z_shell_history_put+0x4a>
	h_prev_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	if (l_item &&
    9b4c:	b15e      	cbz	r6, 9b66 <z_shell_history_put+0x4c>
	   (h_prev_item->len == len) &&
    9b4e:	8933      	ldrh	r3, [r6, #8]
	if (l_item &&
    9b50:	4293      	cmp	r3, r2
    9b52:	d108      	bne.n	9b66 <z_shell_history_put+0x4c>
	   (memcmp(h_prev_item->data, line, len) == 0)) {
    9b54:	f106 000c 	add.w	r0, r6, #12
    9b58:	f000 ffc0 	bl	aadc <memcmp>
	   (h_prev_item->len == len) &&
    9b5c:	b918      	cbnz	r0, 9b66 <z_shell_history_put+0x4c>
		}

		ring_buf_put_finish(history->ring_buf, 0);
		remove_from_tail(history);
	} while (1);
}
    9b5e:	b005      	add	sp, #20
    9b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b64:	461e      	mov	r6, r3
		ring_buf_put_finish(history->ring_buf, 0);
    9b66:	f04f 0800 	mov.w	r8, #0
		if (ring_buf_is_empty(history->ring_buf)) {
    9b6a:	6823      	ldr	r3, [r4, #0]
    9b6c:	6919      	ldr	r1, [r3, #16]
    9b6e:	689a      	ldr	r2, [r3, #8]
    9b70:	4291      	cmp	r1, r2
	buf->put_head = buf->put_tail = buf->put_base = value;
    9b72:	bf01      	itttt	eq
    9b74:	e9c3 8802 	strdeq	r8, r8, [r3, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    9b78:	e9c3 8805 	strdeq	r8, r8, [r3, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    9b7c:	f8c3 8004 	streq.w	r8, [r3, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    9b80:	f8c3 8010 	streq.w	r8, [r3, #16]
		claim_len = ring_buf_put_claim(history->ring_buf,
    9b84:	6820      	ldr	r0, [r4, #0]
    9b86:	462a      	mov	r2, r5
    9b88:	a903      	add	r1, sp, #12
    9b8a:	f7ff f873 	bl	8c74 <ring_buf_put_claim>
		if (claim_len < total_len) {
    9b8e:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    9b90:	4683      	mov	fp, r0
		if (claim_len < total_len) {
    9b92:	d91e      	bls.n	9bd2 <z_shell_history_put+0xb8>
				ring_buf_put_claim(history->ring_buf,
    9b94:	6820      	ldr	r0, [r4, #0]
    9b96:	462a      	mov	r2, r5
    9b98:	a903      	add	r1, sp, #12
    9b9a:	f7ff f86b 	bl	8c74 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    9b9e:	4285      	cmp	r5, r0
    9ba0:	d118      	bne.n	9bd4 <z_shell_history_put+0xba>
				h_prev_item->padding += claim_len;
    9ba2:	8972      	ldrh	r2, [r6, #10]
    9ba4:	445a      	add	r2, fp
    9ba6:	8172      	strh	r2, [r6, #10]
				total_len += claim_len;
    9ba8:	44ab      	add	fp, r5
			add_to_head(history, h_item, line, len, padding);
    9baa:	9d03      	ldr	r5, [sp, #12]
    9bac:	9901      	ldr	r1, [sp, #4]
	item->len = len;
    9bae:	812f      	strh	r7, [r5, #8]
    9bb0:	463a      	mov	r2, r7
	item->padding = padding;
    9bb2:	f8a5 900a 	strh.w	r9, [r5, #10]
    9bb6:	f105 000c 	add.w	r0, r5, #12
    9bba:	f000 ff9f 	bl	aafc <memcpy>
	sys_dnode_t *const head = list->head;
    9bbe:	6862      	ldr	r2, [r4, #4]
	node->prev = list;
    9bc0:	e9c5 2a00 	strd	r2, sl, [r5]
	head->prev = node;
    9bc4:	6055      	str	r5, [r2, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    9bc6:	6820      	ldr	r0, [r4, #0]
	list->head = node;
    9bc8:	6065      	str	r5, [r4, #4]
    9bca:	4659      	mov	r1, fp
    9bcc:	f7ff f871 	bl	8cb2 <ring_buf_put_finish>
			break;
    9bd0:	e7c5      	b.n	9b5e <z_shell_history_put+0x44>
		if (claim_len == total_len) {
    9bd2:	d0ea      	beq.n	9baa <z_shell_history_put+0x90>
		ring_buf_put_finish(history->ring_buf, 0);
    9bd4:	6820      	ldr	r0, [r4, #0]
    9bd6:	2100      	movs	r1, #0
    9bd8:	f7ff f86b 	bl	8cb2 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    9bdc:	6863      	ldr	r3, [r4, #4]
    9bde:	459a      	cmp	sl, r3
    9be0:	d0c3      	beq.n	9b6a <z_shell_history_put+0x50>
    9be2:	4620      	mov	r0, r4
    9be4:	f7ff ff4d 	bl	9a82 <remove_from_tail.part.0>
    9be8:	e7bf      	b.n	9b6a <z_shell_history_put+0x50>

00009bea <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    9bea:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    9bec:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    9bf0:	2300      	movs	r3, #0
    9bf2:	60c3      	str	r3, [r0, #12]
}
    9bf4:	4770      	bx	lr

00009bf6 <z_shell_has_wildcard>:
{
    9bf6:	b510      	push	{r4, lr}
    9bf8:	4604      	mov	r4, r0
    9bfa:	b128      	cbz	r0, 9c08 <z_shell_has_wildcard+0x12>
    9bfc:	f7f6 fc50 	bl	4a0 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    9c00:	2300      	movs	r3, #0
    9c02:	b280      	uxth	r0, r0
    9c04:	4298      	cmp	r0, r3
    9c06:	d801      	bhi.n	9c0c <z_shell_has_wildcard+0x16>
	return false;
    9c08:	2000      	movs	r0, #0
}
    9c0a:	bd10      	pop	{r4, pc}
		if ((str[i] == '?') || (str[i] == '*')) {
    9c0c:	5ce2      	ldrb	r2, [r4, r3]
    9c0e:	2a3f      	cmp	r2, #63	; 0x3f
    9c10:	d003      	beq.n	9c1a <z_shell_has_wildcard+0x24>
    9c12:	2a2a      	cmp	r2, #42	; 0x2a
    9c14:	d001      	beq.n	9c1a <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    9c16:	3301      	adds	r3, #1
    9c18:	e7f4      	b.n	9c04 <z_shell_has_wildcard+0xe>
			return true;
    9c1a:	2001      	movs	r0, #1
    9c1c:	e7f5      	b.n	9c0a <z_shell_has_wildcard+0x14>

00009c1e <z_shell_wildcard_prepare>:
{
    9c1e:	b510      	push	{r4, lr}
    9c20:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    9c22:	6880      	ldr	r0, [r0, #8]
    9c24:	f44f 7280 	mov.w	r2, #256	; 0x100
    9c28:	2100      	movs	r1, #0
    9c2a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9c2e:	f000 ff8d 	bl	ab4c <memset>
	memcpy(shell->ctx->temp_buff,
    9c32:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9c34:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    9c36:	f100 0142 	add.w	r1, r0, #66	; 0x42
    9c3a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9c3e:	f000 ff5d 	bl	aafc <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    9c42:	68a0      	ldr	r0, [r4, #8]
    9c44:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9c48:	f7f9 f84a 	bl	2ce0 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    9c4c:	68a0      	ldr	r0, [r4, #8]
    9c4e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9c52:	f7f6 fc25 	bl	4a0 <strlen>
    9c56:	68a3      	ldr	r3, [r4, #8]
    9c58:	3001      	adds	r0, #1
    9c5a:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
    9c5e:	bd10      	pop	{r4, pc}

00009c60 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    9c60:	b510      	push	{r4, lr}
    9c62:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    9c64:	6880      	ldr	r0, [r0, #8]
    9c66:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    9c6a:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    9c6e:	3042      	adds	r0, #66	; 0x42
    9c70:	f000 ff44 	bl	aafc <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    9c74:	68a3      	ldr	r3, [r4, #8]
    9c76:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    9c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    9c7c:	bd10      	pop	{r4, pc}

00009c7e <abort_function>:
{
    9c7e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9c80:	2000      	movs	r0, #0
    9c82:	f7f7 fb03 	bl	128c <sys_reboot>

00009c86 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9c86:	f000 bbd6 	b.w	a436 <z_fatal_error>

00009c8a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    9c8a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    9c8c:	6800      	ldr	r0, [r0, #0]
    9c8e:	f000 bbd2 	b.w	a436 <z_fatal_error>

00009c92 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9c92:	2100      	movs	r1, #0
    9c94:	2001      	movs	r0, #1
    9c96:	f7ff bff6 	b.w	9c86 <z_arm_fatal_error>

00009c9a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    9c9a:	b508      	push	{r3, lr}
	handler();
    9c9c:	f7f9 ffc6 	bl	3c2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9ca4:	f7fa b8a4 	b.w	3df0 <z_arm_exc_exit>

00009ca8 <malloc_prepare>:
}
    9ca8:	2000      	movs	r0, #0
    9caa:	4770      	bx	lr

00009cac <_stdout_hook_default>:
}
    9cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cb0:	4770      	bx	lr

00009cb2 <_stdin_hook_default>:
}
    9cb2:	2000      	movs	r0, #0
    9cb4:	4770      	bx	lr

00009cb6 <_read>:
{
    9cb6:	4608      	mov	r0, r1
    9cb8:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
    9cba:	f7fa bb1b 	b.w	42f4 <z_impl_zephyr_read_stdin>

00009cbe <_write>:
{
    9cbe:	4608      	mov	r0, r1
    9cc0:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
    9cc2:	f7fa bb2b 	b.w	431c <z_impl_zephyr_write_stdout>

00009cc6 <_close>:
int _close(int file)
    9cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cca:	4770      	bx	lr

00009ccc <_lseek>:
}
    9ccc:	2000      	movs	r0, #0
    9cce:	4770      	bx	lr

00009cd0 <_isatty>:
}
    9cd0:	2802      	cmp	r0, #2
    9cd2:	bfcc      	ite	gt
    9cd4:	2000      	movgt	r0, #0
    9cd6:	2001      	movle	r0, #1
    9cd8:	4770      	bx	lr

00009cda <_fstat>:
	st->st_mode = S_IFCHR;
    9cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9cde:	604b      	str	r3, [r1, #4]
}
    9ce0:	2000      	movs	r0, #0
    9ce2:	4770      	bx	lr

00009ce4 <__retarget_lock_init_recursive>:
{
    9ce4:	b510      	push	{r4, lr}
    9ce6:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
    9ce8:	2014      	movs	r0, #20
    9cea:	f7fd fc7d 	bl	75e8 <malloc>
    9cee:	6020      	str	r0, [r4, #0]
}
    9cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
    9cf4:	f000 bc36 	b.w	a564 <z_impl_k_mutex_init>

00009cf8 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    9cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d00:	f7fc bcca 	b.w	6698 <z_impl_k_mutex_lock>

00009d04 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    9d04:	f7fc bd42 	b.w	678c <z_impl_k_mutex_unlock>

00009d08 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    9d08:	f7fc b9e8 	b.w	60dc <z_impl_z_errno>

00009d0c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9d0c:	2806      	cmp	r0, #6
    9d0e:	d108      	bne.n	9d22 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d14:	2201      	movs	r2, #1
    9d16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9d1a:	f3bf 8f4f 	dsb	sy
        __WFE();
    9d1e:	bf20      	wfe
    while (true)
    9d20:	e7fd      	b.n	9d1e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9d22:	4770      	bx	lr

00009d24 <pm_state_exit_post_ops>:
    9d24:	2300      	movs	r3, #0
    9d26:	f383 8811 	msr	BASEPRI, r3
    9d2a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9d2e:	4770      	bx	lr

00009d30 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    9d30:	6903      	ldr	r3, [r0, #16]
    9d32:	b2c9      	uxtb	r1, r1
    9d34:	220c      	movs	r2, #12
    9d36:	fb01 3302 	mla	r3, r1, r2, r3
    9d3a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    9d3c:	f000 0007 	and.w	r0, r0, #7
    9d40:	4770      	bx	lr

00009d42 <set_on_state>:
	__asm__ volatile(
    9d42:	f04f 0320 	mov.w	r3, #32
    9d46:	f3ef 8211 	mrs	r2, BASEPRI
    9d4a:	f383 8812 	msr	BASEPRI_MAX, r3
    9d4e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9d52:	6803      	ldr	r3, [r0, #0]
    9d54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9d58:	f043 0302 	orr.w	r3, r3, #2
    9d5c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9d5e:	f382 8811 	msr	BASEPRI, r2
    9d62:	f3bf 8f6f 	isb	sy
}
    9d66:	4770      	bx	lr

00009d68 <stop>:
{
    9d68:	b570      	push	{r4, r5, r6, lr}
    9d6a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    9d6c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    9d6e:	f04f 0420 	mov.w	r4, #32
    9d72:	f3ef 8511 	mrs	r5, BASEPRI
    9d76:	f384 8812 	msr	BASEPRI_MAX, r4
    9d7a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9d7e:	260c      	movs	r6, #12
    9d80:	fb06 3401 	mla	r4, r6, r1, r3
    9d84:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    9d86:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    9d8a:	d008      	beq.n	9d9e <stop+0x36>
    9d8c:	42a2      	cmp	r2, r4
    9d8e:	d006      	beq.n	9d9e <stop+0x36>
	__asm__ volatile(
    9d90:	f385 8811 	msr	BASEPRI, r5
    9d94:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    9d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9d9c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    9d9e:	fb06 3301 	mla	r3, r6, r1, r3
    9da2:	2201      	movs	r2, #1
    9da4:	641a      	str	r2, [r3, #64]	; 0x40
    9da6:	f385 8811 	msr	BASEPRI, r5
    9daa:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    9dae:	6843      	ldr	r3, [r0, #4]
    9db0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9db4:	685b      	ldr	r3, [r3, #4]
    9db6:	4798      	blx	r3
	return 0;
    9db8:	2000      	movs	r0, #0
    9dba:	e7ef      	b.n	9d9c <stop+0x34>

00009dbc <api_stop>:
	return stop(dev, subsys, CTX_API);
    9dbc:	2280      	movs	r2, #128	; 0x80
    9dbe:	f7ff bfd3 	b.w	9d68 <stop>

00009dc2 <async_start>:
{
    9dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dc4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    9dc6:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    9dc8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    9dca:	f04f 0520 	mov.w	r5, #32
    9dce:	f3ef 8611 	mrs	r6, BASEPRI
    9dd2:	f385 8812 	msr	BASEPRI_MAX, r5
    9dd6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9dda:	250c      	movs	r5, #12
    9ddc:	fb05 4401 	mla	r4, r5, r1, r4
    9de0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9de2:	f005 0c07 	and.w	ip, r5, #7
    9de6:	f1bc 0f01 	cmp.w	ip, #1
    9dea:	d10c      	bne.n	9e06 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9dec:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    9dee:	f386 8811 	msr	BASEPRI, r6
    9df2:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    9df6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    9dfa:	6843      	ldr	r3, [r0, #4]
    9dfc:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    9e00:	4798      	blx	r3
	return 0;
    9e02:	2000      	movs	r0, #0
}
    9e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9e06:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    9e0a:	42af      	cmp	r7, r5
    9e0c:	f386 8811 	msr	BASEPRI, r6
    9e10:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    9e14:	bf0c      	ite	eq
    9e16:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    9e1a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9e1e:	e7f1      	b.n	9e04 <async_start+0x42>

00009e20 <api_start>:
{
    9e20:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9e22:	2480      	movs	r4, #128	; 0x80
    9e24:	9400      	str	r4, [sp, #0]
    9e26:	f7ff ffcc 	bl	9dc2 <async_start>
}
    9e2a:	b002      	add	sp, #8
    9e2c:	bd10      	pop	{r4, pc}

00009e2e <onoff_started_callback>:
{
    9e2e:	b410      	push	{r4}
	return &data->mgr[type];
    9e30:	6900      	ldr	r0, [r0, #16]
    9e32:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9e34:	241c      	movs	r4, #28
    9e36:	fb03 0004 	mla	r0, r3, r4, r0
    9e3a:	2100      	movs	r1, #0
}
    9e3c:	bc10      	pop	{r4}
	notify(mgr, 0);
    9e3e:	4710      	bx	r2

00009e40 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9e40:	2000      	movs	r0, #0
    9e42:	f000 ba37 	b.w	a2b4 <nrfx_clock_start>

00009e46 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9e46:	2000      	movs	r0, #0
    9e48:	f000 ba70 	b.w	a32c <nrfx_clock_stop>

00009e4c <blocking_start_callback>:
{
    9e4c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9e4e:	f7fc bcdb 	b.w	6808 <z_impl_k_sem_give>

00009e52 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e52:	6843      	ldr	r3, [r0, #4]
    9e54:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9e56:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9e5a:	600b      	str	r3, [r1, #0]
}
    9e5c:	2000      	movs	r0, #0
    9e5e:	4770      	bx	lr

00009e60 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e60:	6843      	ldr	r3, [r0, #4]
    9e62:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    9e64:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    9e68:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    9e6c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9e70:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    9e74:	2000      	movs	r0, #0
    9e76:	4770      	bx	lr

00009e78 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e78:	6843      	ldr	r3, [r0, #4]
    9e7a:	685b      	ldr	r3, [r3, #4]
}
    9e7c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9e7e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9e82:	4770      	bx	lr

00009e84 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e84:	6843      	ldr	r3, [r0, #4]
    9e86:	685b      	ldr	r3, [r3, #4]
}
    9e88:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9e8a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9e8e:	4770      	bx	lr

00009e90 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e90:	6843      	ldr	r3, [r0, #4]
    9e92:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9e94:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    9e98:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    9e9c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    9e9e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9ea2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    9ea6:	2000      	movs	r0, #0
    9ea8:	4770      	bx	lr

00009eaa <gpio_nrfx_manage_callback>:
{
    9eaa:	b510      	push	{r4, lr}
	return port->data;
    9eac:	6903      	ldr	r3, [r0, #16]
	return list->head;
    9eae:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    9eb0:	b1f8      	cbz	r0, 9ef2 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9eb2:	4288      	cmp	r0, r1
    9eb4:	d119      	bne.n	9eea <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    9eb6:	689c      	ldr	r4, [r3, #8]
	return node->next;
    9eb8:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    9eba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9ebc:	42a1      	cmp	r1, r4
    9ebe:	d100      	bne.n	9ec2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9ec0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9ec2:	2000      	movs	r0, #0
    9ec4:	6008      	str	r0, [r1, #0]
	if (set) {
    9ec6:	b12a      	cbz	r2, 9ed4 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    9ec8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    9eca:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    9ecc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    9ece:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9ed0:	b902      	cbnz	r2, 9ed4 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    9ed2:	6099      	str	r1, [r3, #8]
	return 0;
    9ed4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9ed6:	e010      	b.n	9efa <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ed8:	4281      	cmp	r1, r0
    9eda:	d106      	bne.n	9eea <gpio_nrfx_manage_callback+0x40>
	return node->next;
    9edc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    9ede:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9ee0:	6898      	ldr	r0, [r3, #8]
    9ee2:	4281      	cmp	r1, r0
    9ee4:	d1ed      	bne.n	9ec2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9ee6:	609c      	str	r4, [r3, #8]
}
    9ee8:	e7eb      	b.n	9ec2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    9eea:	4604      	mov	r4, r0
    9eec:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9eee:	2800      	cmp	r0, #0
    9ef0:	d1f2      	bne.n	9ed8 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    9ef2:	2a00      	cmp	r2, #0
    9ef4:	d1e8      	bne.n	9ec8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    9ef6:	f06f 0015 	mvn.w	r0, #21
}
    9efa:	bd10      	pop	{r4, pc}

00009efc <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    9efc:	6902      	ldr	r2, [r0, #16]
{
    9efe:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    9f00:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9f04:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9f08:	2000      	movs	r0, #0
    9f0a:	4770      	bx	lr

00009f0c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    9f0c:	6843      	ldr	r3, [r0, #4]
    9f0e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9f10:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9f14:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9f18:	4770      	bx	lr

00009f1a <tx_start>:
{
    9f1a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    9f1c:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    9f1e:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9f20:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9f24:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f28:	2200      	movs	r2, #0
    9f2a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    9f2e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9f32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    9f36:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9f3a:	6862      	ldr	r2, [r4, #4]
    9f3c:	06d2      	lsls	r2, r2, #27
    9f3e:	d508      	bpl.n	9f52 <tx_start+0x38>
	return config->uarte_regs;
    9f40:	6842      	ldr	r2, [r0, #4]
    9f42:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9f44:	2108      	movs	r1, #8
    9f46:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    9f4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    9f4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f52:	2201      	movs	r2, #1
    9f54:	609a      	str	r2, [r3, #8]
}
    9f56:	bd10      	pop	{r4, pc}

00009f58 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9f58:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    9f5a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9f5c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f5e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f62:	b150      	cbz	r0, 9f7a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    9f64:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f66:	2000      	movs	r0, #0
    9f68:	7812      	ldrb	r2, [r2, #0]
    9f6a:	700a      	strb	r2, [r1, #0]
    9f6c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9f70:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f74:	2201      	movs	r2, #1
    9f76:	601a      	str	r2, [r3, #0]
	return 0;
    9f78:	4770      	bx	lr
		return -1;
    9f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9f7e:	4770      	bx	lr

00009f80 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f80:	2a00      	cmp	r2, #0
{
    9f82:	b510      	push	{r4, lr}
    9f84:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f86:	dd10      	ble.n	9faa <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
    9f88:	6843      	ldr	r3, [r0, #4]
    9f8a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f8c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f90:	b150      	cbz	r0, 9fa8 <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
    9f92:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f94:	2000      	movs	r0, #0
    9f96:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
    9f9a:	6992      	ldr	r2, [r2, #24]
    9f9c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    9fa0:	7812      	ldrb	r2, [r2, #0]
    9fa2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9fa4:	2001      	movs	r0, #1
    9fa6:	6018      	str	r0, [r3, #0]
}
    9fa8:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    9faa:	2000      	movs	r0, #0
    9fac:	e7fc      	b.n	9fa8 <uarte_nrfx_fifo_read+0x28>

00009fae <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    9fae:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    9fb0:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    9fb2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    9fb4:	f04f 0020 	mov.w	r0, #32
    9fb8:	f3ef 8311 	mrs	r3, BASEPRI
    9fbc:	f380 8812 	msr	BASEPRI_MAX, r0
    9fc0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    9fc4:	68c9      	ldr	r1, [r1, #12]
    9fc6:	2000      	movs	r0, #0
    9fc8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    9fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9fce:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    9fd2:	f383 8811 	msr	BASEPRI, r3
    9fd6:	f3bf 8f6f 	isb	sy
}
    9fda:	4770      	bx	lr

00009fdc <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    9fdc:	6903      	ldr	r3, [r0, #16]
    9fde:	68db      	ldr	r3, [r3, #12]
    9fe0:	2201      	movs	r2, #1
    9fe2:	739a      	strb	r2, [r3, #14]
}
    9fe4:	4770      	bx	lr

00009fe6 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    9fe6:	6903      	ldr	r3, [r0, #16]
    9fe8:	68db      	ldr	r3, [r3, #12]
    9fea:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    9fec:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    9ff0:	b962      	cbnz	r2, a00c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    9ff2:	6842      	ldr	r2, [r0, #4]
    9ff4:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ff6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    9ffa:	b140      	cbz	r0, a00e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    9ffc:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    a000:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    a004:	d003      	beq.n	a00e <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    a006:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    a008:	2001      	movs	r0, #1
    a00a:	4770      	bx	lr
    a00c:	2000      	movs	r0, #0
}
    a00e:	4770      	bx	lr

0000a010 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    a010:	6843      	ldr	r3, [r0, #4]
    a012:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a014:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    a018:	3800      	subs	r0, #0
    a01a:	bf18      	it	ne
    a01c:	2001      	movne	r0, #1
    a01e:	4770      	bx	lr

0000a020 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    a020:	6843      	ldr	r3, [r0, #4]
    a022:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a024:	2210      	movs	r2, #16
    a026:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a02a:	4770      	bx	lr

0000a02c <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    a02c:	6843      	ldr	r3, [r0, #4]
    a02e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    a030:	2210      	movs	r2, #16
    a032:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    a036:	4770      	bx	lr

0000a038 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    a038:	6843      	ldr	r3, [r0, #4]
    a03a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a03c:	f44f 7200 	mov.w	r2, #512	; 0x200
    a040:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a044:	4770      	bx	lr

0000a046 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    a046:	6843      	ldr	r3, [r0, #4]
    a048:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    a04a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a04e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    a052:	4770      	bx	lr

0000a054 <uarte_nrfx_irq_is_pending>:
{
    a054:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    a056:	6843      	ldr	r3, [r0, #4]
    a058:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    a05a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    a05e:	025b      	lsls	r3, r3, #9
{
    a060:	4604      	mov	r4, r0
		||
    a062:	d405      	bmi.n	a070 <uarte_nrfx_irq_is_pending+0x1c>
    a064:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    a068:	f010 0010 	ands.w	r0, r0, #16
    a06c:	d106      	bne.n	a07c <uarte_nrfx_irq_is_pending+0x28>
}
    a06e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    a070:	f7ff ffb9 	bl	9fe6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    a074:	2800      	cmp	r0, #0
    a076:	d0f5      	beq.n	a064 <uarte_nrfx_irq_is_pending+0x10>
		||
    a078:	2001      	movs	r0, #1
    a07a:	e7f8      	b.n	a06e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    a07c:	4620      	mov	r0, r4
    a07e:	f7ff ffc7 	bl	a010 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    a082:	3800      	subs	r0, #0
    a084:	bf18      	it	ne
    a086:	2001      	movne	r0, #1
    a088:	e7f1      	b.n	a06e <uarte_nrfx_irq_is_pending+0x1a>

0000a08a <uarte_nrfx_irq_update>:
}
    a08a:	2001      	movs	r0, #1
    a08c:	4770      	bx	lr

0000a08e <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    a08e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    a090:	68d8      	ldr	r0, [r3, #12]
    a092:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    a094:	68db      	ldr	r3, [r3, #12]
    a096:	605a      	str	r2, [r3, #4]
}
    a098:	4770      	bx	lr

0000a09a <is_tx_ready.isra.0>:
	return config->uarte_regs;
    a09a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    a09c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a09e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a0a2:	b940      	cbnz	r0, a0b6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a0a4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a0a6:	079b      	lsls	r3, r3, #30
    a0a8:	d406      	bmi.n	a0b8 <is_tx_ready.isra.0+0x1e>
    a0aa:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    a0ae:	3800      	subs	r0, #0
    a0b0:	bf18      	it	ne
    a0b2:	2001      	movne	r0, #1
    a0b4:	4770      	bx	lr
    a0b6:	2001      	movs	r0, #1
}
    a0b8:	4770      	bx	lr

0000a0ba <uarte_nrfx_fifo_fill>:
{
    a0ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    a0bc:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    a0be:	68f3      	ldr	r3, [r6, #12]
    a0c0:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a0c2:	f3bf 8f5b 	dmb	ish
    a0c6:	4294      	cmp	r4, r2
    a0c8:	bfa8      	it	ge
    a0ca:	4614      	movge	r4, r2
{
    a0cc:	4605      	mov	r5, r0
    a0ce:	3310      	adds	r3, #16
    a0d0:	2201      	movs	r2, #1
    a0d2:	e853 0f00 	ldrex	r0, [r3]
    a0d6:	2800      	cmp	r0, #0
    a0d8:	d103      	bne.n	a0e2 <uarte_nrfx_fifo_fill+0x28>
    a0da:	e843 2700 	strex	r7, r2, [r3]
    a0de:	2f00      	cmp	r7, #0
    a0e0:	d1f7      	bne.n	a0d2 <uarte_nrfx_fifo_fill+0x18>
    a0e2:	f3bf 8f5b 	dmb	ish
    a0e6:	bf0c      	ite	eq
    a0e8:	4613      	moveq	r3, r2
    a0ea:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    a0ec:	d11f      	bne.n	a12e <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    a0ee:	68f3      	ldr	r3, [r6, #12]
    a0f0:	4622      	mov	r2, r4
    a0f2:	6898      	ldr	r0, [r3, #8]
    a0f4:	f000 fd02 	bl	aafc <memcpy>
	__asm__ volatile(
    a0f8:	f04f 0320 	mov.w	r3, #32
    a0fc:	f3ef 8711 	mrs	r7, BASEPRI
    a100:	f383 8812 	msr	BASEPRI_MAX, r3
    a104:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    a108:	6868      	ldr	r0, [r5, #4]
    a10a:	f7ff ffc6 	bl	a09a <is_tx_ready.isra.0>
    a10e:	68f3      	ldr	r3, [r6, #12]
    a110:	b938      	cbnz	r0, a122 <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
    a112:	6118      	str	r0, [r3, #16]
		len = 0;
    a114:	4604      	mov	r4, r0
	__asm__ volatile(
    a116:	f387 8811 	msr	BASEPRI, r7
    a11a:	f3bf 8f6f 	isb	sy
}
    a11e:	4620      	mov	r0, r4
    a120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    a122:	6899      	ldr	r1, [r3, #8]
    a124:	4622      	mov	r2, r4
    a126:	4628      	mov	r0, r5
    a128:	f7ff fef7 	bl	9f1a <tx_start>
    a12c:	e7f3      	b.n	a116 <uarte_nrfx_fifo_fill+0x5c>
		return 0;
    a12e:	461c      	mov	r4, r3
    a130:	e7f5      	b.n	a11e <uarte_nrfx_fifo_fill+0x64>

0000a132 <uarte_nrfx_isr_int>:
{
    a132:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
    a134:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    a136:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    a138:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    a13c:	05c9      	lsls	r1, r1, #23
    a13e:	d518      	bpl.n	a172 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a140:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    a144:	b1a9      	cbz	r1, a172 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    a146:	f04f 0420 	mov.w	r4, #32
    a14a:	f3ef 8111 	mrs	r1, BASEPRI
    a14e:	f384 8812 	msr	BASEPRI_MAX, r4
    a152:	f3bf 8f6f 	isb	sy
    a156:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    a15a:	b134      	cbz	r4, a16a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a15c:	2400      	movs	r4, #0
    a15e:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    a162:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a166:	2401      	movs	r4, #1
    a168:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    a16a:	f381 8811 	msr	BASEPRI, r1
    a16e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a172:	6852      	ldr	r2, [r2, #4]
    a174:	06d2      	lsls	r2, r2, #27
    a176:	d51a      	bpl.n	a1ae <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    a178:	f04f 0220 	mov.w	r2, #32
    a17c:	f3ef 8111 	mrs	r1, BASEPRI
    a180:	f382 8812 	msr	BASEPRI_MAX, r2
    a184:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a188:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    a18c:	b112      	cbz	r2, a194 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a18e:	2200      	movs	r2, #0
    a190:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    a194:	6902      	ldr	r2, [r0, #16]
    a196:	68d2      	ldr	r2, [r2, #12]
    a198:	b10a      	cbz	r2, a19e <uarte_nrfx_isr_int+0x6c>
    a19a:	6912      	ldr	r2, [r2, #16]
    a19c:	b91a      	cbnz	r2, a1a6 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    a19e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a1a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    a1a6:	f381 8811 	msr	BASEPRI, r1
    a1aa:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    a1ae:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
    a1b0:	68d4      	ldr	r4, [r2, #12]
    a1b2:	b16c      	cbz	r4, a1d0 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a1b4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    a1b8:	b161      	cbz	r1, a1d4 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    a1ba:	2100      	movs	r1, #0
    a1bc:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
    a1be:	68d4      	ldr	r4, [r2, #12]
    a1c0:	7ba4      	ldrb	r4, [r4, #14]
    a1c2:	b13c      	cbz	r4, a1d4 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    a1c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    a1c8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    a1cc:	68d3      	ldr	r3, [r2, #12]
    a1ce:	7399      	strb	r1, [r3, #14]
}
    a1d0:	bc10      	pop	{r4}
    a1d2:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a1d4:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    a1d8:	b121      	cbz	r1, a1e4 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a1da:	2100      	movs	r1, #0
    a1dc:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    a1e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    a1e4:	68d2      	ldr	r2, [r2, #12]
    a1e6:	6813      	ldr	r3, [r2, #0]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d0f1      	beq.n	a1d0 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    a1ec:	6851      	ldr	r1, [r2, #4]
}
    a1ee:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    a1f0:	4718      	bx	r3

0000a1f2 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    a1f2:	b510      	push	{r4, lr}
    a1f4:	2200      	movs	r2, #0
    a1f6:	4604      	mov	r4, r0
    a1f8:	2101      	movs	r1, #1
    a1fa:	2028      	movs	r0, #40	; 0x28
    a1fc:	f7f9 fcfe 	bl	3bfc <z_arm_irq_priority_set>
    a200:	2028      	movs	r0, #40	; 0x28
    a202:	f7f9 fcdf 	bl	3bc4 <arch_irq_enable>
    a206:	4620      	mov	r0, r4
    a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a20c:	f7fa bd4c 	b.w	4ca8 <uarte_instance_init.constprop.0>

0000a210 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    a210:	b510      	push	{r4, lr}
    a212:	2200      	movs	r2, #0
    a214:	4604      	mov	r4, r0
    a216:	2101      	movs	r1, #1
    a218:	2002      	movs	r0, #2
    a21a:	f7f9 fcef 	bl	3bfc <z_arm_irq_priority_set>
    a21e:	2002      	movs	r0, #2
    a220:	f7f9 fcd0 	bl	3bc4 <arch_irq_enable>
    a224:	4620      	mov	r0, r4
    a226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a22a:	f7fa bd3d 	b.w	4ca8 <uarte_instance_init.constprop.0>

0000a22e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a22e:	4770      	bx	lr

0000a230 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a230:	f100 0350 	add.w	r3, r0, #80	; 0x50
    a234:	009b      	lsls	r3, r3, #2
    a236:	b29b      	uxth	r3, r3
    a238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a23c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a240:	2200      	movs	r2, #0
    a242:	601a      	str	r2, [r3, #0]
    a244:	681b      	ldr	r3, [r3, #0]
}
    a246:	4770      	bx	lr

0000a248 <sys_clock_cycle_get_32>:
{
    a248:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    a24a:	f7fa fe77 	bl	4f3c <z_nrf_rtc_timer_read>
}
    a24e:	bd08      	pop	{r3, pc}

0000a250 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a250:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    a252:	6843      	ldr	r3, [r0, #4]
    a254:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    a256:	7a05      	ldrb	r5, [r0, #8]
    a258:	6844      	ldr	r4, [r0, #4]
    a25a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a25e:	42a3      	cmp	r3, r4
    a260:	d302      	bcc.n	a268 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    a262:	f06f 0001 	mvn.w	r0, #1
}
    a266:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    a268:	795c      	ldrb	r4, [r3, #5]
    a26a:	428c      	cmp	r4, r1
    a26c:	d001      	beq.n	a272 <pinctrl_lookup_state+0x22>
		(*state)++;
    a26e:	3308      	adds	r3, #8
    a270:	e7f0      	b.n	a254 <pinctrl_lookup_state+0x4>
			return 0;
    a272:	2000      	movs	r0, #0
    a274:	e7f7      	b.n	a266 <pinctrl_lookup_state+0x16>

0000a276 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    a276:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    a278:	2000      	movs	r0, #0
    a27a:	f7fa f8b9 	bl	43f0 <sys_arch_reboot>

0000a27e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    a27e:	f7fe b983 	b.w	8588 <nrf_cc3xx_platform_init_no_rng>

0000a282 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    a282:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    a284:	f7f9 fb92 	bl	39ac <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    a288:	f7f9 fc66 	bl	3b58 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    a28c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    a290:	f7fe b97a 	b.w	8588 <nrf_cc3xx_platform_init_no_rng>

0000a294 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    a294:	4700      	bx	r0

0000a296 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    a296:	f000 ba93 	b.w	a7c0 <z_impl_k_busy_wait>

0000a29a <nrfx_clock_enable>:
{
    a29a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    a29c:	2000      	movs	r0, #0
    a29e:	f7f9 fc9f 	bl	3be0 <arch_irq_is_enabled>
    a2a2:	b908      	cbnz	r0, a2a8 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    a2a4:	f7f9 fc8e 	bl	3bc4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a2a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a2ac:	2200      	movs	r2, #0
    a2ae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    a2b2:	bd08      	pop	{r3, pc}

0000a2b4 <nrfx_clock_start>:
{
    a2b4:	b508      	push	{r3, lr}
    switch (domain)
    a2b6:	b110      	cbz	r0, a2be <nrfx_clock_start+0xa>
    a2b8:	2801      	cmp	r0, #1
    a2ba:	d02c      	beq.n	a316 <nrfx_clock_start+0x62>
}
    a2bc:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a2be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a2c2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a2c6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    a2ca:	03c8      	lsls	r0, r1, #15
    a2cc:	d40b      	bmi.n	a2e6 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    a2ce:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    a2d2:	07d9      	lsls	r1, r3, #31
    a2d4:	d50f      	bpl.n	a2f6 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    a2d6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    a2da:	079b      	lsls	r3, r3, #30
    a2dc:	d408      	bmi.n	a2f0 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    a2de:	2302      	movs	r3, #2
    a2e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    a2e4:	e7ea      	b.n	a2bc <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    a2e6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    a2ea:	2b01      	cmp	r3, #1
    a2ec:	d004      	beq.n	a2f8 <nrfx_clock_start+0x44>
    a2ee:	b113      	cbz	r3, a2f6 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a2f0:	2000      	movs	r0, #0
    a2f2:	f7fb fa6b 	bl	57cc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    a2f6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    a2f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a2fc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a300:	2300      	movs	r3, #0
    a302:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    a306:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    a30a:	2302      	movs	r3, #2
    a30c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a310:	2301      	movs	r3, #1
    a312:	6093      	str	r3, [r2, #8]
}
    a314:	e7d2      	b.n	a2bc <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a31a:	2200      	movs	r2, #0
    a31c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    a320:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    a324:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a328:	6018      	str	r0, [r3, #0]
}
    a32a:	e7c7      	b.n	a2bc <nrfx_clock_start+0x8>

0000a32c <nrfx_clock_stop>:
    clock_stop(domain);
    a32c:	f7fb ba4e 	b.w	57cc <clock_stop>

0000a330 <nrf_gpio_reconfigure>:
{
    a330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a332:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a334:	a801      	add	r0, sp, #4
{
    a336:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    a33a:	4616      	mov	r6, r2
    a33c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a33e:	f7fb faed 	bl	591c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a342:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a344:	f1b6 0c00 	subs.w	ip, r6, #0
    a348:	bf18      	it	ne
    a34a:	f04f 0c01 	movne.w	ip, #1
    a34e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a352:	1e0b      	subs	r3, r1, #0
    a354:	bf18      	it	ne
    a356:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a358:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a35a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a35e:	bf14      	ite	ne
    a360:	f04f 0c0c 	movne.w	ip, #12
    a364:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a368:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a36a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a36e:	bf14      	ite	ne
    a370:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    a374:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a378:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a37a:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a37e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a382:	bf14      	ite	ne
    a384:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    a388:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a38c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    a390:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a394:	b101      	cbz	r1, a398 <nrf_gpio_reconfigure+0x68>
    a396:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    a398:	b10e      	cbz	r6, a39e <nrf_gpio_reconfigure+0x6e>
    a39a:	7836      	ldrb	r6, [r6, #0]
    a39c:	0076      	lsls	r6, r6, #1
    a39e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    a3a0:	b10d      	cbz	r5, a3a6 <nrf_gpio_reconfigure+0x76>
    a3a2:	782d      	ldrb	r5, [r5, #0]
    a3a4:	00ad      	lsls	r5, r5, #2
    a3a6:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    a3a8:	b10c      	cbz	r4, a3ae <nrf_gpio_reconfigure+0x7e>
    a3aa:	7824      	ldrb	r4, [r4, #0]
    a3ac:	0224      	lsls	r4, r4, #8
    a3ae:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    a3b0:	b10f      	cbz	r7, a3b6 <nrf_gpio_reconfigure+0x86>
    a3b2:	783f      	ldrb	r7, [r7, #0]
    a3b4:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a3b6:	430c      	orrs	r4, r1
    a3b8:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    a3ba:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    a3be:	b003      	add	sp, #12
    a3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a3c2 <nrf_gpio_cfg_sense_set>:
{
    a3c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a3c4:	f10d 030f 	add.w	r3, sp, #15
    a3c8:	9301      	str	r3, [sp, #4]
    a3ca:	2300      	movs	r3, #0
{
    a3cc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a3d0:	9300      	str	r3, [sp, #0]
    a3d2:	461a      	mov	r2, r3
    a3d4:	4619      	mov	r1, r3
    a3d6:	f7ff ffab 	bl	a330 <nrf_gpio_reconfigure>
}
    a3da:	b005      	add	sp, #20
    a3dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000a3e0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    a3e0:	f7fb be0a 	b.w	5ff8 <_DoInit>

0000a3e4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    a3e4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    a3e6:	f7ff fffb 	bl	a3e0 <SEGGER_RTT_Init>

	return 0;
}
    a3ea:	2000      	movs	r0, #0
    a3ec:	bd08      	pop	{r3, pc}

0000a3ee <z_device_state_init>:
}
    a3ee:	4770      	bx	lr

0000a3f0 <z_device_is_ready>:
	if (dev == NULL) {
    a3f0:	b140      	cbz	r0, a404 <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
    a3f2:	68c3      	ldr	r3, [r0, #12]
    a3f4:	7858      	ldrb	r0, [r3, #1]
    a3f6:	f010 0001 	ands.w	r0, r0, #1
    a3fa:	bf1e      	ittt	ne
    a3fc:	7818      	ldrbne	r0, [r3, #0]
    a3fe:	fab0 f080 	clzne	r0, r0
    a402:	0940      	lsrne	r0, r0, #5
}
    a404:	4770      	bx	lr

0000a406 <device_required_foreach>:

int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
    a406:	b470      	push	{r4, r5, r6}
    a408:	6940      	ldr	r0, [r0, #20]
    a40a:	460d      	mov	r5, r1
    a40c:	4613      	mov	r3, r2
	if (rv != NULL) {
    a40e:	b960      	cbnz	r0, a42a <device_required_foreach+0x24>
	size_t handle_count = 0;
    a410:	4601      	mov	r1, r0
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);

	return device_visitor(handles, handle_count, visitor_cb, context);
    a412:	462a      	mov	r2, r5
}
    a414:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    a416:	f7fb be25 	b.w	6064 <device_visitor>
			++i;
    a41a:	3101      	adds	r1, #1
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
    a41c:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    a420:	4434      	add	r4, r6
    a422:	b2a4      	uxth	r4, r4
    a424:	4294      	cmp	r4, r2
    a426:	d9f8      	bls.n	a41a <device_required_foreach+0x14>
    a428:	e7f3      	b.n	a412 <device_required_foreach+0xc>
		size_t i = 0;
    a42a:	2100      	movs	r1, #0
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
    a42c:	f647 76ff 	movw	r6, #32767	; 0x7fff
    a430:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    a434:	e7f2      	b.n	a41c <device_required_foreach+0x16>

0000a436 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a438:	4605      	mov	r5, r0
    a43a:	460e      	mov	r6, r1
	__asm__ volatile(
    a43c:	f04f 0320 	mov.w	r3, #32
    a440:	f3ef 8711 	mrs	r7, BASEPRI
    a444:	f383 8812 	msr	BASEPRI_MAX, r3
    a448:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a44c:	f7fc fd0c 	bl	6e68 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    a450:	4631      	mov	r1, r6
    a452:	4604      	mov	r4, r0
    a454:	4628      	mov	r0, r5
    a456:	f7ff ff0e 	bl	a276 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a45a:	f387 8811 	msr	BASEPRI, r7
    a45e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a462:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a464:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a468:	f7f9 be5e 	b.w	4128 <z_impl_k_thread_abort>

0000a46c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    a46c:	f000 bb6e 	b.w	ab4c <memset>

0000a470 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a470:	f000 bb44 	b.w	aafc <memcpy>

0000a474 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a474:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    a478:	4313      	orrs	r3, r2
    a47a:	f013 0303 	ands.w	r3, r3, #3
    a47e:	d10c      	bne.n	a49a <create_free_list+0x26>
	slab->free_list = NULL;
    a480:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a482:	6881      	ldr	r1, [r0, #8]
    a484:	4299      	cmp	r1, r3
    a486:	d801      	bhi.n	a48c <create_free_list+0x18>
	return 0;
    a488:	2000      	movs	r0, #0
    a48a:	4770      	bx	lr
		*(char **)p = slab->free_list;
    a48c:	6941      	ldr	r1, [r0, #20]
    a48e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    a490:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    a492:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a494:	3301      	adds	r3, #1
		p += slab->block_size;
    a496:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    a498:	e7f3      	b.n	a482 <create_free_list+0xe>
		return -EINVAL;
    a49a:	f06f 0015 	mvn.w	r0, #21
}
    a49e:	4770      	bx	lr

0000a4a0 <k_mem_slab_init>:
{
    a4a0:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    a4a2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    a4a6:	2300      	movs	r3, #0
	slab->buffer = buffer;
    a4a8:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    a4aa:	6183      	str	r3, [r0, #24]
{
    a4ac:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    a4ae:	f7ff ffe1 	bl	a474 <create_free_list>
	if (rc < 0) {
    a4b2:	2800      	cmp	r0, #0
    a4b4:	bfa8      	it	ge
    a4b6:	e9c4 4400 	strdge	r4, r4, [r4]
}
    a4ba:	bd10      	pop	{r4, pc}

0000a4bc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4be:	4604      	mov	r4, r0
    a4c0:	460d      	mov	r5, r1
	__asm__ volatile(
    a4c2:	f04f 0320 	mov.w	r3, #32
    a4c6:	f3ef 8611 	mrs	r6, BASEPRI
    a4ca:	f383 8812 	msr	BASEPRI_MAX, r3
    a4ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a4d2:	6947      	ldr	r7, [r0, #20]
    a4d4:	b97f      	cbnz	r7, a4f6 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a4d6:	f000 f8c1 	bl	a65c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    a4da:	b160      	cbz	r0, a4f6 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a4dc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a4de:	6142      	str	r2, [r0, #20]
    a4e0:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
    a4e4:	f000 f8aa 	bl	a63c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a4e8:	4631      	mov	r1, r6
    a4ea:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a4ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    a4f2:	f7fc bb7f 	b.w	6bf4 <z_reschedule>
	**(char ***) mem = slab->free_list;
    a4f6:	682b      	ldr	r3, [r5, #0]
    a4f8:	6962      	ldr	r2, [r4, #20]
    a4fa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a4fc:	682b      	ldr	r3, [r5, #0]
    a4fe:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    a500:	69a3      	ldr	r3, [r4, #24]
    a502:	3b01      	subs	r3, #1
    a504:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    a506:	f386 8811 	msr	BASEPRI, r6
    a50a:	f3bf 8f6f 	isb	sy
}
    a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a510 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a510:	f3ef 8005 	mrs	r0, IPSR
}
    a514:	3800      	subs	r0, #0
    a516:	bf18      	it	ne
    a518:	2001      	movne	r0, #1
    a51a:	4770      	bx	lr

0000a51c <k_thread_name_get>:
}
    a51c:	3078      	adds	r0, #120	; 0x78
    a51e:	4770      	bx	lr

0000a520 <z_impl_k_thread_start>:
	z_sched_start(thread);
    a520:	f7fc bb7a 	b.w	6c18 <z_sched_start>

0000a524 <z_stack_space_get>:
#ifdef CONFIG_STACK_GROWS_UP
#error "Unsupported configuration for stack analysis"
#endif

int z_stack_space_get(const uint8_t *stack_start, size_t size, size_t *unused_ptr)
{
    a524:	b510      	push	{r4, lr}
	size_t unused = 0;
    a526:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    a528:	428b      	cmp	r3, r1
    a52a:	d102      	bne.n	a532 <z_stack_space_get+0xe>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    a52c:	6013      	str	r3, [r2, #0]

	return 0;
}
    a52e:	2000      	movs	r0, #0
    a530:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    a532:	5cc4      	ldrb	r4, [r0, r3]
    a534:	2caa      	cmp	r4, #170	; 0xaa
    a536:	d1f9      	bne.n	a52c <z_stack_space_get+0x8>
			unused++;
    a538:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    a53a:	e7f5      	b.n	a528 <z_stack_space_get+0x4>

0000a53c <z_impl_k_thread_stack_space_get>:

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    a53c:	460a      	mov	r2, r1
	return z_stack_space_get((const uint8_t *)thread->stack_info.start,
    a53e:	e9d0 0127 	ldrd	r0, r1, [r0, #156]	; 0x9c
    a542:	f7ff bfef 	b.w	a524 <z_stack_space_get>

0000a546 <z_pm_save_idle_exit>:
{
    a546:	b508      	push	{r3, lr}
	pm_system_resume();
    a548:	f7f9 f926 	bl	3798 <pm_system_resume>
}
    a54c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a550:	f7ff be6d 	b.w	a22e <sys_clock_idle_exit>

0000a554 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    a554:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a558:	428b      	cmp	r3, r1
    a55a:	d001      	beq.n	a560 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    a55c:	f7fc bb04 	b.w	6b68 <z_set_prio>
}
    a560:	2000      	movs	r0, #0
    a562:	4770      	bx	lr

0000a564 <z_impl_k_mutex_init>:
{
    a564:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a566:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a568:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a56c:	e9c3 3300 	strd	r3, r3, [r3]
}
    a570:	4770      	bx	lr

0000a572 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    a572:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a576:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a578:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a57a:	2300      	movs	r3, #0
	node->prev = NULL;
    a57c:	e9c0 3300 	strd	r3, r3, [r0]
}
    a580:	4770      	bx	lr

0000a582 <unpend_thread_no_timeout>:
{
    a582:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    a584:	f7ff fff5 	bl	a572 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a588:	7b43      	ldrb	r3, [r0, #13]
    a58a:	f023 0302 	bic.w	r3, r3, #2
    a58e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    a590:	2300      	movs	r3, #0
    a592:	6083      	str	r3, [r0, #8]
}
    a594:	bd08      	pop	{r3, pc}

0000a596 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    a596:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    a59a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    a59e:	4283      	cmp	r3, r0
		return b2 - b1;
    a5a0:	bf14      	ite	ne
    a5a2:	1ac0      	subne	r0, r0, r3
	return 0;
    a5a4:	2000      	moveq	r0, #0
}
    a5a6:	4770      	bx	lr

0000a5a8 <z_thread_timeout>:
{
    a5a8:	b510      	push	{r4, lr}
    a5aa:	4601      	mov	r1, r0
	__asm__ volatile(
    a5ac:	f04f 0320 	mov.w	r3, #32
    a5b0:	f3ef 8411 	mrs	r4, BASEPRI
    a5b4:	f383 8812 	msr	BASEPRI_MAX, r3
    a5b8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    a5bc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    a5c0:	f013 0f28 	tst.w	r3, #40	; 0x28
    a5c4:	d10d      	bne.n	a5e2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    a5c6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    a5ca:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    a5cc:	b10b      	cbz	r3, a5d2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    a5ce:	f7ff ffd8 	bl	a582 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a5d2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    a5d6:	f023 0314 	bic.w	r3, r3, #20
    a5da:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    a5de:	f7fc f9cd 	bl	697c <ready_thread>
	__asm__ volatile(
    a5e2:	f384 8811 	msr	BASEPRI, r4
    a5e6:	f3bf 8f6f 	isb	sy
}
    a5ea:	bd10      	pop	{r4, pc}

0000a5ec <add_to_waitq_locked>:
{
    a5ec:	b538      	push	{r3, r4, r5, lr}
    a5ee:	4604      	mov	r4, r0
    a5f0:	460d      	mov	r5, r1
	unready_thread(thread);
    a5f2:	f7fc f9f7 	bl	69e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a5f6:	7b63      	ldrb	r3, [r4, #13]
    a5f8:	f043 0302 	orr.w	r3, r3, #2
    a5fc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a5fe:	b1e5      	cbz	r5, a63a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    a600:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    a602:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a604:	429d      	cmp	r5, r3
    a606:	d109      	bne.n	a61c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    a608:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    a60a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    a60e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a610:	606c      	str	r4, [r5, #4]
}
    a612:	e012      	b.n	a63a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    a614:	686a      	ldr	r2, [r5, #4]
    a616:	4293      	cmp	r3, r2
    a618:	d0f6      	beq.n	a608 <add_to_waitq_locked+0x1c>
    a61a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a61c:	2b00      	cmp	r3, #0
    a61e:	d0f3      	beq.n	a608 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    a620:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    a624:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    a628:	428a      	cmp	r2, r1
    a62a:	d0f3      	beq.n	a614 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a62c:	4291      	cmp	r1, r2
    a62e:	ddf1      	ble.n	a614 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    a630:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a632:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    a636:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a638:	605c      	str	r4, [r3, #4]
}
    a63a:	bd38      	pop	{r3, r4, r5, pc}

0000a63c <z_ready_thread>:
{
    a63c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a63e:	f04f 0320 	mov.w	r3, #32
    a642:	f3ef 8411 	mrs	r4, BASEPRI
    a646:	f383 8812 	msr	BASEPRI_MAX, r3
    a64a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    a64e:	f7fc f995 	bl	697c <ready_thread>
	__asm__ volatile(
    a652:	f384 8811 	msr	BASEPRI, r4
    a656:	f3bf 8f6f 	isb	sy
}
    a65a:	bd10      	pop	{r4, pc}

0000a65c <z_unpend_first_thread>:
{
    a65c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a65e:	f04f 0320 	mov.w	r3, #32
    a662:	f3ef 8511 	mrs	r5, BASEPRI
    a666:	f383 8812 	msr	BASEPRI_MAX, r3
    a66a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a66e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a670:	42a0      	cmp	r0, r4
    a672:	d00d      	beq.n	a690 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    a674:	b134      	cbz	r4, a684 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    a676:	4620      	mov	r0, r4
    a678:	f7ff ff83 	bl	a582 <unpend_thread_no_timeout>
    a67c:	f104 0018 	add.w	r0, r4, #24
    a680:	f000 f856 	bl	a730 <z_abort_timeout>
	__asm__ volatile(
    a684:	f385 8811 	msr	BASEPRI, r5
    a688:	f3bf 8f6f 	isb	sy
}
    a68c:	4620      	mov	r0, r4
    a68e:	bd38      	pop	{r3, r4, r5, pc}
    a690:	2400      	movs	r4, #0
    a692:	e7f7      	b.n	a684 <z_unpend_first_thread+0x28>

0000a694 <z_unpend_thread>:
{
    a694:	b510      	push	{r4, lr}
	__asm__ volatile(
    a696:	f04f 0320 	mov.w	r3, #32
    a69a:	f3ef 8411 	mrs	r4, BASEPRI
    a69e:	f383 8812 	msr	BASEPRI_MAX, r3
    a6a2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    a6a6:	f7ff ff6c 	bl	a582 <unpend_thread_no_timeout>
	__asm__ volatile(
    a6aa:	f384 8811 	msr	BASEPRI, r4
    a6ae:	f3bf 8f6f 	isb	sy
}
    a6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a6b6:	3018      	adds	r0, #24
    a6b8:	f000 b83a 	b.w	a730 <z_abort_timeout>

0000a6bc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a6bc:	4603      	mov	r3, r0
    a6be:	b920      	cbnz	r0, a6ca <z_reschedule_irqlock+0xe>
    a6c0:	f3ef 8205 	mrs	r2, IPSR
    a6c4:	b90a      	cbnz	r2, a6ca <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    a6c6:	f7f9 bad1 	b.w	3c6c <arch_swap>
    a6ca:	f383 8811 	msr	BASEPRI, r3
    a6ce:	f3bf 8f6f 	isb	sy
}
    a6d2:	4770      	bx	lr

0000a6d4 <z_reschedule_unlocked>:
	__asm__ volatile(
    a6d4:	f04f 0320 	mov.w	r3, #32
    a6d8:	f3ef 8011 	mrs	r0, BASEPRI
    a6dc:	f383 8812 	msr	BASEPRI_MAX, r3
    a6e0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a6e4:	f7ff bfea 	b.w	a6bc <z_reschedule_irqlock>

0000a6e8 <z_sched_wake>:
{
    a6e8:	b538      	push	{r3, r4, r5, lr}
    a6ea:	f04f 0320 	mov.w	r3, #32
    a6ee:	f3ef 8511 	mrs	r5, BASEPRI
    a6f2:	f383 8812 	msr	BASEPRI_MAX, r3
    a6f6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a6fa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6fc:	42a0      	cmp	r0, r4
    a6fe:	d013      	beq.n	a728 <z_sched_wake+0x40>
		if (thread != NULL) {
    a700:	b1a4      	cbz	r4, a72c <z_sched_wake+0x44>
    a702:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    a706:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    a708:	4620      	mov	r0, r4
    a70a:	f7ff ff3a 	bl	a582 <unpend_thread_no_timeout>
    a70e:	f104 0018 	add.w	r0, r4, #24
    a712:	f000 f80d 	bl	a730 <z_abort_timeout>
			ready_thread(thread);
    a716:	4620      	mov	r0, r4
    a718:	f7fc f930 	bl	697c <ready_thread>
			ret = true;
    a71c:	2001      	movs	r0, #1
	__asm__ volatile(
    a71e:	f385 8811 	msr	BASEPRI, r5
    a722:	f3bf 8f6f 	isb	sy
}
    a726:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    a728:	2000      	movs	r0, #0
    a72a:	e7f8      	b.n	a71e <z_sched_wake+0x36>
    a72c:	4620      	mov	r0, r4
    a72e:	e7f6      	b.n	a71e <z_sched_wake+0x36>

0000a730 <z_abort_timeout>:
{
    a730:	b510      	push	{r4, lr}
	__asm__ volatile(
    a732:	f04f 0220 	mov.w	r2, #32
    a736:	f3ef 8411 	mrs	r4, BASEPRI
    a73a:	f382 8812 	msr	BASEPRI_MAX, r2
    a73e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    a742:	6803      	ldr	r3, [r0, #0]
    a744:	b13b      	cbz	r3, a756 <z_abort_timeout+0x26>
			remove_timeout(to);
    a746:	f7fc fc57 	bl	6ff8 <remove_timeout>
			ret = 0;
    a74a:	2000      	movs	r0, #0
	__asm__ volatile(
    a74c:	f384 8811 	msr	BASEPRI, r4
    a750:	f3bf 8f6f 	isb	sy
}
    a754:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    a756:	f06f 0015 	mvn.w	r0, #21
    a75a:	e7f7      	b.n	a74c <z_abort_timeout+0x1c>

0000a75c <z_get_next_timeout_expiry>:
{
    a75c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a75e:	f04f 0320 	mov.w	r3, #32
    a762:	f3ef 8411 	mrs	r4, BASEPRI
    a766:	f383 8812 	msr	BASEPRI_MAX, r3
    a76a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    a76e:	f7fc fc1b 	bl	6fa8 <next_timeout>
	__asm__ volatile(
    a772:	f384 8811 	msr	BASEPRI, r4
    a776:	f3bf 8f6f 	isb	sy
}
    a77a:	bd10      	pop	{r4, pc}

0000a77c <z_set_timeout_expiry>:
{
    a77c:	b570      	push	{r4, r5, r6, lr}
    a77e:	4604      	mov	r4, r0
    a780:	460d      	mov	r5, r1
	__asm__ volatile(
    a782:	f04f 0320 	mov.w	r3, #32
    a786:	f3ef 8611 	mrs	r6, BASEPRI
    a78a:	f383 8812 	msr	BASEPRI_MAX, r3
    a78e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    a792:	f7fc fc09 	bl	6fa8 <next_timeout>
			      || (ticks <= next_to);
    a796:	2801      	cmp	r0, #1
    a798:	dd07      	ble.n	a7aa <z_set_timeout_expiry+0x2e>
    a79a:	42a0      	cmp	r0, r4
    a79c:	db05      	blt.n	a7aa <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a79e:	42a0      	cmp	r0, r4
    a7a0:	4629      	mov	r1, r5
    a7a2:	bfa8      	it	ge
    a7a4:	4620      	movge	r0, r4
    a7a6:	f7fa fd3d 	bl	5224 <sys_clock_set_timeout>
	__asm__ volatile(
    a7aa:	f386 8811 	msr	BASEPRI, r6
    a7ae:	f3bf 8f6f 	isb	sy
}
    a7b2:	bd70      	pop	{r4, r5, r6, pc}

0000a7b4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a7b4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a7b6:	f7fc fd13 	bl	71e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a7ba:	bd08      	pop	{r3, pc}

0000a7bc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    a7bc:	f7fc bd10 	b.w	71e0 <sys_clock_tick_get>

0000a7c0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a7c0:	b108      	cbz	r0, a7c6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a7c2:	f7f9 be2b 	b.w	441c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a7c6:	4770      	bx	lr

0000a7c8 <add_event>:
{
    a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7ca:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    a7cc:	e9d0 1300 	ldrd	r1, r3, [r0]
    a7d0:	4288      	cmp	r0, r1
    a7d2:	4604      	mov	r4, r0
    a7d4:	d105      	bne.n	a7e2 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
    a7d6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    a7d8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    a7dc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a7de:	6065      	str	r5, [r4, #4]
    a7e0:	e01d      	b.n	a81e <add_event+0x56>
	if ((pending == NULL) ||
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d0f7      	beq.n	a7d6 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    a7e6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    a7e8:	b100      	cbz	r0, a7ec <add_event+0x24>
    a7ea:	3860      	subs	r0, #96	; 0x60
    a7ec:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    a7f0:	4639      	mov	r1, r7
    a7f2:	f7ff fed0 	bl	a596 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    a7f6:	2800      	cmp	r0, #0
    a7f8:	dced      	bgt.n	a7d6 <add_event+0xe>
	return list->head == list;
    a7fa:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7fc:	42b4      	cmp	r4, r6
    a7fe:	d0ea      	beq.n	a7d6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    a800:	2e00      	cmp	r6, #0
    a802:	d0e8      	beq.n	a7d6 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
    a804:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    a806:	b101      	cbz	r1, a80a <add_event+0x42>
    a808:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    a80a:	4638      	mov	r0, r7
    a80c:	f7ff fec3 	bl	a596 <z_sched_prio_cmp>
    a810:	2800      	cmp	r0, #0
    a812:	dd05      	ble.n	a820 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
    a814:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    a816:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    a81a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a81c:	6075      	str	r5, [r6, #4]
}
    a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    a820:	6863      	ldr	r3, [r4, #4]
    a822:	429e      	cmp	r6, r3
    a824:	d0d7      	beq.n	a7d6 <add_event+0xe>
    a826:	6836      	ldr	r6, [r6, #0]
    a828:	e7ea      	b.n	a800 <add_event+0x38>

0000a82a <register_events>:
{
    a82a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    a82e:	2500      	movs	r5, #0
{
    a830:	468b      	mov	fp, r1
    a832:	4614      	mov	r4, r2
    a834:	461f      	mov	r7, r3
    a836:	4682      	mov	sl, r0
	int events_registered = 0;
    a838:	462e      	mov	r6, r5
	event->poller = NULL;
    a83a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    a83c:	455d      	cmp	r5, fp
    a83e:	db02      	blt.n	a846 <register_events+0x1c>
}
    a840:	4630      	mov	r0, r6
    a842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    a846:	f04f 0320 	mov.w	r3, #32
    a84a:	f3ef 8911 	mrs	r9, BASEPRI
    a84e:	f383 8812 	msr	BASEPRI_MAX, r3
    a852:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    a856:	f89a 300d 	ldrb.w	r3, [sl, #13]
    a85a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a85e:	3b01      	subs	r3, #1
    a860:	2b07      	cmp	r3, #7
    a862:	d80f      	bhi.n	a884 <register_events+0x5a>
    a864:	e8df f003 	tbb	[pc, r3]
    a868:	0a0e041e 	.word	0x0a0e041e
    a86c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
    a870:	f8da 3010 	ldr.w	r3, [sl, #16]
    a874:	689b      	ldr	r3, [r3, #8]
    a876:	b12b      	cbz	r3, a884 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    a878:	2302      	movs	r3, #2
    a87a:	e020      	b.n	a8be <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    a87c:	f8da 3010 	ldr.w	r3, [sl, #16]
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	bb8b      	cbnz	r3, a8e8 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    a884:	bb47      	cbnz	r7, a8d8 <register_events+0xae>
    a886:	7823      	ldrb	r3, [r4, #0]
    a888:	b333      	cbz	r3, a8d8 <register_events+0xae>
	switch (event->type) {
    a88a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    a88e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a892:	3b01      	subs	r3, #1
    a894:	2b07      	cmp	r3, #7
    a896:	d830      	bhi.n	a8fa <register_events+0xd0>
    a898:	e8df f003 	tbb	[pc, r3]
    a89c:	282f2833 	.word	0x282f2833
    a8a0:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
    a8a4:	f8da 3010 	ldr.w	r3, [sl, #16]
    a8a8:	689b      	ldr	r3, [r3, #8]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d0ea      	beq.n	a884 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    a8ae:	2301      	movs	r3, #1
    a8b0:	e005      	b.n	a8be <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    a8b2:	f8da 3010 	ldr.w	r3, [sl, #16]
    a8b6:	6a1b      	ldr	r3, [r3, #32]
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d0e3      	beq.n	a884 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    a8bc:	2310      	movs	r3, #16
	event->state |= state;
    a8be:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    a8c2:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    a8c6:	f3c2 3186 	ubfx	r1, r2, #14, #7
    a8ca:	430b      	orrs	r3, r1
    a8cc:	f363 3294 	bfi	r2, r3, #14, #7
    a8d0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    a8d4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    a8d8:	f389 8811 	msr	BASEPRI, r9
    a8dc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    a8e0:	3501      	adds	r5, #1
    a8e2:	f10a 0a14 	add.w	sl, sl, #20
    a8e6:	e7a9      	b.n	a83c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    a8e8:	2304      	movs	r3, #4
    a8ea:	e7e8      	b.n	a8be <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    a8ec:	f8da 0010 	ldr.w	r0, [sl, #16]
    a8f0:	4622      	mov	r2, r4
    a8f2:	4651      	mov	r1, sl
    a8f4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    a8f6:	f7ff ff67 	bl	a7c8 <add_event>
	event->poller = poller;
    a8fa:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    a8fe:	3601      	adds	r6, #1
    a900:	e7ea      	b.n	a8d8 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    a902:	f8da 0010 	ldr.w	r0, [sl, #16]
    a906:	4622      	mov	r2, r4
    a908:	4651      	mov	r1, sl
    a90a:	e7f4      	b.n	a8f6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    a90c:	f8da 0010 	ldr.w	r0, [sl, #16]
    a910:	4622      	mov	r2, r4
    a912:	4651      	mov	r1, sl
    a914:	3024      	adds	r0, #36	; 0x24
    a916:	e7ee      	b.n	a8f6 <register_events+0xcc>

0000a918 <signal_poll_event>:
{
    a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    a91c:	6884      	ldr	r4, [r0, #8]
{
    a91e:	4605      	mov	r5, r0
    a920:	460e      	mov	r6, r1
	if (poller != NULL) {
    a922:	b144      	cbz	r4, a936 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    a924:	7863      	ldrb	r3, [r4, #1]
    a926:	2b01      	cmp	r3, #1
    a928:	d12e      	bne.n	a988 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    a92a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    a92e:	f013 0302 	ands.w	r3, r3, #2
    a932:	d10a      	bne.n	a94a <signal_poll_event+0x32>
		poller->is_polling = false;
    a934:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    a936:	68eb      	ldr	r3, [r5, #12]
    a938:	f3c3 3286 	ubfx	r2, r3, #14, #7
    a93c:	4316      	orrs	r6, r2
	event->poller = NULL;
    a93e:	2000      	movs	r0, #0
	event->state |= state;
    a940:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
    a944:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    a946:	60eb      	str	r3, [r5, #12]
	return retcode;
    a948:	e03e      	b.n	a9c8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
    a94a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    a94e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a952:	bf08      	it	eq
    a954:	f112 0f02 	cmneq.w	r2, #2
    a958:	d032      	beq.n	a9c0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    a95a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    a95e:	4640      	mov	r0, r8
    a960:	f7ff fe98 	bl	a694 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    a964:	2e08      	cmp	r6, #8
    a966:	bf0c      	ite	eq
    a968:	f06f 0303 	mvneq.w	r3, #3
    a96c:	2300      	movne	r3, #0
    a96e:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a970:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    a974:	06db      	lsls	r3, r3, #27
    a976:	d109      	bne.n	a98c <signal_poll_event+0x74>
    a978:	f854 7c48 	ldr.w	r7, [r4, #-72]
    a97c:	b937      	cbnz	r7, a98c <signal_poll_event+0x74>
	z_ready_thread(thread);
    a97e:	4640      	mov	r0, r8
    a980:	f7ff fe5c 	bl	a63c <z_ready_thread>
		poller->is_polling = false;
    a984:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    a986:	e7d6      	b.n	a936 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    a988:	2b02      	cmp	r3, #2
    a98a:	d001      	beq.n	a990 <signal_poll_event+0x78>
		poller->is_polling = false;
    a98c:	2300      	movs	r3, #0
    a98e:	e7d1      	b.n	a934 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    a990:	7823      	ldrb	r3, [r4, #0]
    a992:	2b00      	cmp	r3, #0
    a994:	d0cf      	beq.n	a936 <signal_poll_event+0x1e>
    a996:	f854 7c04 	ldr.w	r7, [r4, #-4]
    a99a:	2f00      	cmp	r7, #0
    a99c:	d0f2      	beq.n	a984 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    a99e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    a9a2:	f1a4 0914 	sub.w	r9, r4, #20
    a9a6:	f104 0014 	add.w	r0, r4, #20
    a9aa:	f7ff fec1 	bl	a730 <z_abort_timeout>
		twork->poll_result = 0;
    a9ae:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    a9b2:	4649      	mov	r1, r9
    a9b4:	4638      	mov	r0, r7
    a9b6:	f000 f87c 	bl	aab2 <z_work_submit_to_queue>
		poller->is_polling = false;
    a9ba:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    a9be:	e7ba      	b.n	a936 <signal_poll_event+0x1e>
		poller->is_polling = false;
    a9c0:	2300      	movs	r3, #0
    a9c2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    a9c4:	f06f 000a 	mvn.w	r0, #10
}
    a9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a9cc <clear_event_registrations>:
	while (num_events--) {
    a9cc:	2314      	movs	r3, #20
{
    a9ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9d0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    a9d4:	2400      	movs	r4, #0
	switch (event->type) {
    a9d6:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
    a9da:	b901      	cbnz	r1, a9de <clear_event_registrations+0x12>
}
    a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    a9de:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    a9e2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    a9e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9ea:	2b08      	cmp	r3, #8
    a9ec:	f1a0 0714 	sub.w	r7, r0, #20
    a9f0:	d80c      	bhi.n	aa0c <clear_event_registrations+0x40>
    a9f2:	fa26 f303 	lsr.w	r3, r6, r3
    a9f6:	07db      	lsls	r3, r3, #31
    a9f8:	d508      	bpl.n	aa0c <clear_event_registrations+0x40>
	return node->next != NULL;
    a9fa:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    a9fe:	b12b      	cbz	r3, aa0c <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    aa00:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    aa04:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    aa06:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    aa08:	e940 4405 	strd	r4, r4, [r0, #-20]
    aa0c:	f382 8811 	msr	BASEPRI, r2
    aa10:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    aa14:	f04f 0320 	mov.w	r3, #32
    aa18:	f3ef 8211 	mrs	r2, BASEPRI
    aa1c:	f383 8812 	msr	BASEPRI_MAX, r3
    aa20:	f3bf 8f6f 	isb	sy
	return k;
    aa24:	3901      	subs	r1, #1
    aa26:	4638      	mov	r0, r7
    aa28:	e7d7      	b.n	a9da <clear_event_registrations+0xe>

0000aa2a <k_poll_event_init>:
{
    aa2a:	b510      	push	{r4, lr}
	event->type = type;
    aa2c:	0552      	lsls	r2, r2, #21
    aa2e:	0209      	lsls	r1, r1, #8
    aa30:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    aa34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
    aa38:	430a      	orrs	r2, r1
    aa3a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    aa3c:	2400      	movs	r4, #0
	event->type = type;
    aa3e:	430a      	orrs	r2, r1
	event->obj = obj;
    aa40:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    aa44:	6084      	str	r4, [r0, #8]
}
    aa46:	bd10      	pop	{r4, pc}

0000aa48 <z_handle_obj_poll_events>:
{
    aa48:	4603      	mov	r3, r0
	return list->head == list;
    aa4a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    aa4c:	4283      	cmp	r3, r0
    aa4e:	d008      	beq.n	aa62 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    aa50:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    aa54:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    aa56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    aa58:	2300      	movs	r3, #0
	node->prev = NULL;
    aa5a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    aa5e:	f7ff bf5b 	b.w	a918 <signal_poll_event>
}
    aa62:	4770      	bx	lr

0000aa64 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    aa64:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    aa66:	e9c0 0000 	strd	r0, r0, [r0]
    aa6a:	6083      	str	r3, [r0, #8]
}
    aa6c:	4770      	bx	lr

0000aa6e <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    aa6e:	2300      	movs	r3, #0
    aa70:	6083      	str	r3, [r0, #8]
}
    aa72:	4770      	bx	lr

0000aa74 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    aa74:	6883      	ldr	r3, [r0, #8]
    aa76:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    aa78:	68c3      	ldr	r3, [r0, #12]
    aa7a:	6013      	str	r3, [r2, #0]
}
    aa7c:	4770      	bx	lr

0000aa7e <k_heap_init>:
{
    aa7e:	b410      	push	{r4}
    aa80:	f100 040c 	add.w	r4, r0, #12
    aa84:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    aa88:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    aa8a:	f7fd bfbc 	b.w	8a06 <sys_heap_init>

0000aa8e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    aa8e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    aa90:	2301      	movs	r3, #1
    aa92:	408b      	lsls	r3, r1
    aa94:	ea22 0303 	bic.w	r3, r2, r3
    aa98:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    aa9a:	fa22 f001 	lsr.w	r0, r2, r1
}
    aa9e:	f000 0001 	and.w	r0, r0, #1
    aaa2:	4770      	bx	lr

0000aaa4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    aaa4:	b120      	cbz	r0, aab0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    aaa6:	2200      	movs	r2, #0
    aaa8:	4611      	mov	r1, r2
    aaaa:	30c0      	adds	r0, #192	; 0xc0
    aaac:	f7ff be1c 	b.w	a6e8 <z_sched_wake>
}
    aab0:	4770      	bx	lr

0000aab2 <z_work_submit_to_queue>:
{
    aab2:	b513      	push	{r0, r1, r4, lr}
    aab4:	9001      	str	r0, [sp, #4]
    aab6:	4608      	mov	r0, r1
    aab8:	f04f 0320 	mov.w	r3, #32
    aabc:	f3ef 8411 	mrs	r4, BASEPRI
    aac0:	f383 8812 	msr	BASEPRI_MAX, r3
    aac4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    aac8:	a901      	add	r1, sp, #4
    aaca:	f7fc fcfb 	bl	74c4 <submit_to_queue_locked>
	__asm__ volatile(
    aace:	f384 8811 	msr	BASEPRI, r4
    aad2:	f3bf 8f6f 	isb	sy
}
    aad6:	b002      	add	sp, #8
    aad8:	bd10      	pop	{r4, pc}

0000aada <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    aada:	4770      	bx	lr

0000aadc <memcmp>:
    aadc:	b510      	push	{r4, lr}
    aade:	3901      	subs	r1, #1
    aae0:	4402      	add	r2, r0
    aae2:	4290      	cmp	r0, r2
    aae4:	d101      	bne.n	aaea <memcmp+0xe>
    aae6:	2000      	movs	r0, #0
    aae8:	e005      	b.n	aaf6 <memcmp+0x1a>
    aaea:	7803      	ldrb	r3, [r0, #0]
    aaec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    aaf0:	42a3      	cmp	r3, r4
    aaf2:	d001      	beq.n	aaf8 <memcmp+0x1c>
    aaf4:	1b18      	subs	r0, r3, r4
    aaf6:	bd10      	pop	{r4, pc}
    aaf8:	3001      	adds	r0, #1
    aafa:	e7f2      	b.n	aae2 <memcmp+0x6>

0000aafc <memcpy>:
    aafc:	440a      	add	r2, r1
    aafe:	4291      	cmp	r1, r2
    ab00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    ab04:	d100      	bne.n	ab08 <memcpy+0xc>
    ab06:	4770      	bx	lr
    ab08:	b510      	push	{r4, lr}
    ab0a:	f811 4b01 	ldrb.w	r4, [r1], #1
    ab0e:	f803 4f01 	strb.w	r4, [r3, #1]!
    ab12:	4291      	cmp	r1, r2
    ab14:	d1f9      	bne.n	ab0a <memcpy+0xe>
    ab16:	bd10      	pop	{r4, pc}

0000ab18 <memmove>:
    ab18:	4288      	cmp	r0, r1
    ab1a:	b510      	push	{r4, lr}
    ab1c:	eb01 0402 	add.w	r4, r1, r2
    ab20:	d902      	bls.n	ab28 <memmove+0x10>
    ab22:	4284      	cmp	r4, r0
    ab24:	4623      	mov	r3, r4
    ab26:	d807      	bhi.n	ab38 <memmove+0x20>
    ab28:	1e43      	subs	r3, r0, #1
    ab2a:	42a1      	cmp	r1, r4
    ab2c:	d008      	beq.n	ab40 <memmove+0x28>
    ab2e:	f811 2b01 	ldrb.w	r2, [r1], #1
    ab32:	f803 2f01 	strb.w	r2, [r3, #1]!
    ab36:	e7f8      	b.n	ab2a <memmove+0x12>
    ab38:	4402      	add	r2, r0
    ab3a:	4601      	mov	r1, r0
    ab3c:	428a      	cmp	r2, r1
    ab3e:	d100      	bne.n	ab42 <memmove+0x2a>
    ab40:	bd10      	pop	{r4, pc}
    ab42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    ab46:	f802 4d01 	strb.w	r4, [r2, #-1]!
    ab4a:	e7f7      	b.n	ab3c <memmove+0x24>

0000ab4c <memset>:
    ab4c:	4402      	add	r2, r0
    ab4e:	4603      	mov	r3, r0
    ab50:	4293      	cmp	r3, r2
    ab52:	d100      	bne.n	ab56 <memset+0xa>
    ab54:	4770      	bx	lr
    ab56:	f803 1b01 	strb.w	r1, [r3], #1
    ab5a:	e7f9      	b.n	ab50 <memset+0x4>

0000ab5c <__memset_chk>:
    ab5c:	429a      	cmp	r2, r3
    ab5e:	b508      	push	{r3, lr}
    ab60:	d901      	bls.n	ab66 <__memset_chk+0xa>
    ab62:	f7f9 fc07 	bl	4374 <__chk_fail>
    ab66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ab6a:	f7ff bfef 	b.w	ab4c <memset>

0000ab6e <strchr>:
    ab6e:	b2c9      	uxtb	r1, r1
    ab70:	4603      	mov	r3, r0
    ab72:	4618      	mov	r0, r3
    ab74:	f813 2b01 	ldrb.w	r2, [r3], #1
    ab78:	b112      	cbz	r2, ab80 <strchr+0x12>
    ab7a:	428a      	cmp	r2, r1
    ab7c:	d1f9      	bne.n	ab72 <strchr+0x4>
    ab7e:	4770      	bx	lr
    ab80:	2900      	cmp	r1, #0
    ab82:	bf18      	it	ne
    ab84:	2000      	movne	r0, #0
    ab86:	4770      	bx	lr

0000ab88 <strcpy>:
    ab88:	4603      	mov	r3, r0
    ab8a:	f811 2b01 	ldrb.w	r2, [r1], #1
    ab8e:	f803 2b01 	strb.w	r2, [r3], #1
    ab92:	2a00      	cmp	r2, #0
    ab94:	d1f9      	bne.n	ab8a <strcpy+0x2>
    ab96:	4770      	bx	lr

0000ab98 <strncmp>:
    ab98:	b510      	push	{r4, lr}
    ab9a:	b16a      	cbz	r2, abb8 <strncmp+0x20>
    ab9c:	3901      	subs	r1, #1
    ab9e:	1884      	adds	r4, r0, r2
    aba0:	f810 2b01 	ldrb.w	r2, [r0], #1
    aba4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    aba8:	429a      	cmp	r2, r3
    abaa:	d103      	bne.n	abb4 <strncmp+0x1c>
    abac:	42a0      	cmp	r0, r4
    abae:	d001      	beq.n	abb4 <strncmp+0x1c>
    abb0:	2a00      	cmp	r2, #0
    abb2:	d1f5      	bne.n	aba0 <strncmp+0x8>
    abb4:	1ad0      	subs	r0, r2, r3
    abb6:	bd10      	pop	{r4, pc}
    abb8:	4610      	mov	r0, r2
    abba:	e7fc      	b.n	abb6 <strncmp+0x1e>

0000abbc <strncpy>:
    abbc:	b510      	push	{r4, lr}
    abbe:	3901      	subs	r1, #1
    abc0:	4603      	mov	r3, r0
    abc2:	b132      	cbz	r2, abd2 <strncpy+0x16>
    abc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    abc8:	f803 4b01 	strb.w	r4, [r3], #1
    abcc:	3a01      	subs	r2, #1
    abce:	2c00      	cmp	r4, #0
    abd0:	d1f7      	bne.n	abc2 <strncpy+0x6>
    abd2:	441a      	add	r2, r3
    abd4:	2100      	movs	r1, #0
    abd6:	4293      	cmp	r3, r2
    abd8:	d100      	bne.n	abdc <strncpy+0x20>
    abda:	bd10      	pop	{r4, pc}
    abdc:	f803 1b01 	strb.w	r1, [r3], #1
    abe0:	e7f9      	b.n	abd6 <strncpy+0x1a>

0000abe2 <strnlen>:
    abe2:	b510      	push	{r4, lr}
    abe4:	4602      	mov	r2, r0
    abe6:	4401      	add	r1, r0
    abe8:	428a      	cmp	r2, r1
    abea:	4613      	mov	r3, r2
    abec:	d003      	beq.n	abf6 <strnlen+0x14>
    abee:	781c      	ldrb	r4, [r3, #0]
    abf0:	3201      	adds	r2, #1
    abf2:	2c00      	cmp	r4, #0
    abf4:	d1f8      	bne.n	abe8 <strnlen+0x6>
    abf6:	1a18      	subs	r0, r3, r0
    abf8:	bd10      	pop	{r4, pc}

0000abfa <strstr>:
    abfa:	780a      	ldrb	r2, [r1, #0]
    abfc:	b570      	push	{r4, r5, r6, lr}
    abfe:	b96a      	cbnz	r2, ac1c <strstr+0x22>
    ac00:	bd70      	pop	{r4, r5, r6, pc}
    ac02:	429a      	cmp	r2, r3
    ac04:	d109      	bne.n	ac1a <strstr+0x20>
    ac06:	460c      	mov	r4, r1
    ac08:	4605      	mov	r5, r0
    ac0a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d0f6      	beq.n	ac00 <strstr+0x6>
    ac12:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ac16:	429e      	cmp	r6, r3
    ac18:	d0f7      	beq.n	ac0a <strstr+0x10>
    ac1a:	3001      	adds	r0, #1
    ac1c:	7803      	ldrb	r3, [r0, #0]
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d1ef      	bne.n	ac02 <strstr+0x8>
    ac22:	4618      	mov	r0, r3
    ac24:	e7ec      	b.n	ac00 <strstr+0x6>

0000ac26 <__sfmoreglue>:
    ac26:	b570      	push	{r4, r5, r6, lr}
    ac28:	2368      	movs	r3, #104	; 0x68
    ac2a:	1e4d      	subs	r5, r1, #1
    ac2c:	435d      	muls	r5, r3
    ac2e:	460e      	mov	r6, r1
    ac30:	f105 0174 	add.w	r1, r5, #116	; 0x74
    ac34:	f7fc fd2a 	bl	768c <_malloc_r>
    ac38:	4604      	mov	r4, r0
    ac3a:	b140      	cbz	r0, ac4e <__sfmoreglue+0x28>
    ac3c:	2100      	movs	r1, #0
    ac3e:	e9c0 1600 	strd	r1, r6, [r0]
    ac42:	300c      	adds	r0, #12
    ac44:	60a0      	str	r0, [r4, #8]
    ac46:	f105 0268 	add.w	r2, r5, #104	; 0x68
    ac4a:	f7ff ff7f 	bl	ab4c <memset>
    ac4e:	4620      	mov	r0, r4
    ac50:	bd70      	pop	{r4, r5, r6, pc}

0000ac52 <_fwalk_reent>:
    ac52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac56:	4606      	mov	r6, r0
    ac58:	4688      	mov	r8, r1
    ac5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
    ac5e:	2700      	movs	r7, #0
    ac60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    ac64:	f1b9 0901 	subs.w	r9, r9, #1
    ac68:	d505      	bpl.n	ac76 <_fwalk_reent+0x24>
    ac6a:	6824      	ldr	r4, [r4, #0]
    ac6c:	2c00      	cmp	r4, #0
    ac6e:	d1f7      	bne.n	ac60 <_fwalk_reent+0xe>
    ac70:	4638      	mov	r0, r7
    ac72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ac76:	89ab      	ldrh	r3, [r5, #12]
    ac78:	2b01      	cmp	r3, #1
    ac7a:	d907      	bls.n	ac8c <_fwalk_reent+0x3a>
    ac7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    ac80:	3301      	adds	r3, #1
    ac82:	d003      	beq.n	ac8c <_fwalk_reent+0x3a>
    ac84:	4629      	mov	r1, r5
    ac86:	4630      	mov	r0, r6
    ac88:	47c0      	blx	r8
    ac8a:	4307      	orrs	r7, r0
    ac8c:	3568      	adds	r5, #104	; 0x68
    ac8e:	e7e9      	b.n	ac64 <_fwalk_reent+0x12>

0000ac90 <__ssputs_r>:
    ac90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac94:	688e      	ldr	r6, [r1, #8]
    ac96:	461f      	mov	r7, r3
    ac98:	42be      	cmp	r6, r7
    ac9a:	680b      	ldr	r3, [r1, #0]
    ac9c:	4682      	mov	sl, r0
    ac9e:	460c      	mov	r4, r1
    aca0:	4690      	mov	r8, r2
    aca2:	d82d      	bhi.n	ad00 <__ssputs_r+0x70>
    aca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    aca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    acac:	d026      	beq.n	acfc <__ssputs_r+0x6c>
    acae:	6965      	ldr	r5, [r4, #20]
    acb0:	6909      	ldr	r1, [r1, #16]
    acb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    acb6:	eba3 0901 	sub.w	r9, r3, r1
    acba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    acbe:	1c7b      	adds	r3, r7, #1
    acc0:	444b      	add	r3, r9
    acc2:	106d      	asrs	r5, r5, #1
    acc4:	429d      	cmp	r5, r3
    acc6:	bf38      	it	cc
    acc8:	461d      	movcc	r5, r3
    acca:	0553      	lsls	r3, r2, #21
    accc:	d527      	bpl.n	ad1e <__ssputs_r+0x8e>
    acce:	4629      	mov	r1, r5
    acd0:	f7fc fcdc 	bl	768c <_malloc_r>
    acd4:	4606      	mov	r6, r0
    acd6:	b360      	cbz	r0, ad32 <__ssputs_r+0xa2>
    acd8:	6921      	ldr	r1, [r4, #16]
    acda:	464a      	mov	r2, r9
    acdc:	f7ff ff0e 	bl	aafc <memcpy>
    ace0:	89a3      	ldrh	r3, [r4, #12]
    ace2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    ace6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    acea:	81a3      	strh	r3, [r4, #12]
    acec:	6126      	str	r6, [r4, #16]
    acee:	6165      	str	r5, [r4, #20]
    acf0:	444e      	add	r6, r9
    acf2:	eba5 0509 	sub.w	r5, r5, r9
    acf6:	6026      	str	r6, [r4, #0]
    acf8:	60a5      	str	r5, [r4, #8]
    acfa:	463e      	mov	r6, r7
    acfc:	42be      	cmp	r6, r7
    acfe:	d900      	bls.n	ad02 <__ssputs_r+0x72>
    ad00:	463e      	mov	r6, r7
    ad02:	6820      	ldr	r0, [r4, #0]
    ad04:	4632      	mov	r2, r6
    ad06:	4641      	mov	r1, r8
    ad08:	f7ff ff06 	bl	ab18 <memmove>
    ad0c:	68a3      	ldr	r3, [r4, #8]
    ad0e:	1b9b      	subs	r3, r3, r6
    ad10:	60a3      	str	r3, [r4, #8]
    ad12:	6823      	ldr	r3, [r4, #0]
    ad14:	4433      	add	r3, r6
    ad16:	6023      	str	r3, [r4, #0]
    ad18:	2000      	movs	r0, #0
    ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad1e:	462a      	mov	r2, r5
    ad20:	f000 f98e 	bl	b040 <_realloc_r>
    ad24:	4606      	mov	r6, r0
    ad26:	2800      	cmp	r0, #0
    ad28:	d1e0      	bne.n	acec <__ssputs_r+0x5c>
    ad2a:	6921      	ldr	r1, [r4, #16]
    ad2c:	4650      	mov	r0, sl
    ad2e:	f7fc fc63 	bl	75f8 <_free_r>
    ad32:	230c      	movs	r3, #12
    ad34:	f8ca 3000 	str.w	r3, [sl]
    ad38:	89a3      	ldrh	r3, [r4, #12]
    ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ad3e:	81a3      	strh	r3, [r4, #12]
    ad40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ad44:	e7e9      	b.n	ad1a <__ssputs_r+0x8a>

0000ad46 <__sfputc_r>:
    ad46:	6893      	ldr	r3, [r2, #8]
    ad48:	3b01      	subs	r3, #1
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	b410      	push	{r4}
    ad4e:	6093      	str	r3, [r2, #8]
    ad50:	da07      	bge.n	ad62 <__sfputc_r+0x1c>
    ad52:	6994      	ldr	r4, [r2, #24]
    ad54:	42a3      	cmp	r3, r4
    ad56:	db01      	blt.n	ad5c <__sfputc_r+0x16>
    ad58:	290a      	cmp	r1, #10
    ad5a:	d102      	bne.n	ad62 <__sfputc_r+0x1c>
    ad5c:	bc10      	pop	{r4}
    ad5e:	f7fd ba71 	b.w	8244 <__swbuf_r>
    ad62:	6813      	ldr	r3, [r2, #0]
    ad64:	1c58      	adds	r0, r3, #1
    ad66:	6010      	str	r0, [r2, #0]
    ad68:	7019      	strb	r1, [r3, #0]
    ad6a:	4608      	mov	r0, r1
    ad6c:	bc10      	pop	{r4}
    ad6e:	4770      	bx	lr

0000ad70 <__sfputs_r>:
    ad70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad72:	4606      	mov	r6, r0
    ad74:	460f      	mov	r7, r1
    ad76:	4614      	mov	r4, r2
    ad78:	18d5      	adds	r5, r2, r3
    ad7a:	42ac      	cmp	r4, r5
    ad7c:	d101      	bne.n	ad82 <__sfputs_r+0x12>
    ad7e:	2000      	movs	r0, #0
    ad80:	e007      	b.n	ad92 <__sfputs_r+0x22>
    ad82:	f814 1b01 	ldrb.w	r1, [r4], #1
    ad86:	463a      	mov	r2, r7
    ad88:	4630      	mov	r0, r6
    ad8a:	f7ff ffdc 	bl	ad46 <__sfputc_r>
    ad8e:	1c43      	adds	r3, r0, #1
    ad90:	d1f3      	bne.n	ad7a <__sfputs_r+0xa>
    ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ad94 <_printf_common>:
    ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad98:	4616      	mov	r6, r2
    ad9a:	4698      	mov	r8, r3
    ad9c:	688a      	ldr	r2, [r1, #8]
    ad9e:	690b      	ldr	r3, [r1, #16]
    ada0:	f8dd 9020 	ldr.w	r9, [sp, #32]
    ada4:	4293      	cmp	r3, r2
    ada6:	bfb8      	it	lt
    ada8:	4613      	movlt	r3, r2
    adaa:	6033      	str	r3, [r6, #0]
    adac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    adb0:	4607      	mov	r7, r0
    adb2:	460c      	mov	r4, r1
    adb4:	b10a      	cbz	r2, adba <_printf_common+0x26>
    adb6:	3301      	adds	r3, #1
    adb8:	6033      	str	r3, [r6, #0]
    adba:	6823      	ldr	r3, [r4, #0]
    adbc:	0699      	lsls	r1, r3, #26
    adbe:	bf42      	ittt	mi
    adc0:	6833      	ldrmi	r3, [r6, #0]
    adc2:	3302      	addmi	r3, #2
    adc4:	6033      	strmi	r3, [r6, #0]
    adc6:	6825      	ldr	r5, [r4, #0]
    adc8:	f015 0506 	ands.w	r5, r5, #6
    adcc:	d106      	bne.n	addc <_printf_common+0x48>
    adce:	f104 0a19 	add.w	sl, r4, #25
    add2:	68e3      	ldr	r3, [r4, #12]
    add4:	6832      	ldr	r2, [r6, #0]
    add6:	1a9b      	subs	r3, r3, r2
    add8:	42ab      	cmp	r3, r5
    adda:	dc26      	bgt.n	ae2a <_printf_common+0x96>
    addc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    ade0:	6822      	ldr	r2, [r4, #0]
    ade2:	3b00      	subs	r3, #0
    ade4:	bf18      	it	ne
    ade6:	2301      	movne	r3, #1
    ade8:	0692      	lsls	r2, r2, #26
    adea:	d42b      	bmi.n	ae44 <_printf_common+0xb0>
    adec:	f104 0243 	add.w	r2, r4, #67	; 0x43
    adf0:	4641      	mov	r1, r8
    adf2:	4638      	mov	r0, r7
    adf4:	47c8      	blx	r9
    adf6:	3001      	adds	r0, #1
    adf8:	d01e      	beq.n	ae38 <_printf_common+0xa4>
    adfa:	6823      	ldr	r3, [r4, #0]
    adfc:	6922      	ldr	r2, [r4, #16]
    adfe:	f003 0306 	and.w	r3, r3, #6
    ae02:	2b04      	cmp	r3, #4
    ae04:	bf02      	ittt	eq
    ae06:	68e5      	ldreq	r5, [r4, #12]
    ae08:	6833      	ldreq	r3, [r6, #0]
    ae0a:	1aed      	subeq	r5, r5, r3
    ae0c:	68a3      	ldr	r3, [r4, #8]
    ae0e:	bf0c      	ite	eq
    ae10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    ae14:	2500      	movne	r5, #0
    ae16:	4293      	cmp	r3, r2
    ae18:	bfc4      	itt	gt
    ae1a:	1a9b      	subgt	r3, r3, r2
    ae1c:	18ed      	addgt	r5, r5, r3
    ae1e:	2600      	movs	r6, #0
    ae20:	341a      	adds	r4, #26
    ae22:	42b5      	cmp	r5, r6
    ae24:	d11a      	bne.n	ae5c <_printf_common+0xc8>
    ae26:	2000      	movs	r0, #0
    ae28:	e008      	b.n	ae3c <_printf_common+0xa8>
    ae2a:	2301      	movs	r3, #1
    ae2c:	4652      	mov	r2, sl
    ae2e:	4641      	mov	r1, r8
    ae30:	4638      	mov	r0, r7
    ae32:	47c8      	blx	r9
    ae34:	3001      	adds	r0, #1
    ae36:	d103      	bne.n	ae40 <_printf_common+0xac>
    ae38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ae3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae40:	3501      	adds	r5, #1
    ae42:	e7c6      	b.n	add2 <_printf_common+0x3e>
    ae44:	18e1      	adds	r1, r4, r3
    ae46:	1c5a      	adds	r2, r3, #1
    ae48:	2030      	movs	r0, #48	; 0x30
    ae4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    ae4e:	4422      	add	r2, r4
    ae50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ae54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    ae58:	3302      	adds	r3, #2
    ae5a:	e7c7      	b.n	adec <_printf_common+0x58>
    ae5c:	2301      	movs	r3, #1
    ae5e:	4622      	mov	r2, r4
    ae60:	4641      	mov	r1, r8
    ae62:	4638      	mov	r0, r7
    ae64:	47c8      	blx	r9
    ae66:	3001      	adds	r0, #1
    ae68:	d0e6      	beq.n	ae38 <_printf_common+0xa4>
    ae6a:	3601      	adds	r6, #1
    ae6c:	e7d9      	b.n	ae22 <_printf_common+0x8e>

0000ae6e <__sread>:
    ae6e:	b510      	push	{r4, lr}
    ae70:	460c      	mov	r4, r1
    ae72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ae76:	f7fd fb53 	bl	8520 <_read_r>
    ae7a:	2800      	cmp	r0, #0
    ae7c:	bfab      	itete	ge
    ae7e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    ae80:	89a3      	ldrhlt	r3, [r4, #12]
    ae82:	181b      	addge	r3, r3, r0
    ae84:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    ae88:	bfac      	ite	ge
    ae8a:	6563      	strge	r3, [r4, #84]	; 0x54
    ae8c:	81a3      	strhlt	r3, [r4, #12]
    ae8e:	bd10      	pop	{r4, pc}

0000ae90 <__swrite>:
    ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae94:	461f      	mov	r7, r3
    ae96:	898b      	ldrh	r3, [r1, #12]
    ae98:	05db      	lsls	r3, r3, #23
    ae9a:	4605      	mov	r5, r0
    ae9c:	460c      	mov	r4, r1
    ae9e:	4616      	mov	r6, r2
    aea0:	d505      	bpl.n	aeae <__swrite+0x1e>
    aea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    aea6:	2302      	movs	r3, #2
    aea8:	2200      	movs	r2, #0
    aeaa:	f7fd fae7 	bl	847c <_lseek_r>
    aeae:	89a3      	ldrh	r3, [r4, #12]
    aeb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    aeb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    aeb8:	81a3      	strh	r3, [r4, #12]
    aeba:	4632      	mov	r2, r6
    aebc:	463b      	mov	r3, r7
    aebe:	4628      	mov	r0, r5
    aec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aec4:	f7fd ba10 	b.w	82e8 <_write_r>

0000aec8 <__sseek>:
    aec8:	b510      	push	{r4, lr}
    aeca:	460c      	mov	r4, r1
    aecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    aed0:	f7fd fad4 	bl	847c <_lseek_r>
    aed4:	1c43      	adds	r3, r0, #1
    aed6:	89a3      	ldrh	r3, [r4, #12]
    aed8:	bf15      	itete	ne
    aeda:	6560      	strne	r0, [r4, #84]	; 0x54
    aedc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    aee0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    aee4:	81a3      	strheq	r3, [r4, #12]
    aee6:	bf18      	it	ne
    aee8:	81a3      	strhne	r3, [r4, #12]
    aeea:	bd10      	pop	{r4, pc}

0000aeec <__sclose>:
    aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    aef0:	f7fd ba78 	b.w	83e4 <_close_r>

0000aef4 <__sflush_r>:
    aef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aefa:	0717      	lsls	r7, r2, #28
    aefc:	4605      	mov	r5, r0
    aefe:	460c      	mov	r4, r1
    af00:	d456      	bmi.n	afb0 <__sflush_r+0xbc>
    af02:	684b      	ldr	r3, [r1, #4]
    af04:	2b00      	cmp	r3, #0
    af06:	dc02      	bgt.n	af0e <__sflush_r+0x1a>
    af08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    af0a:	2b00      	cmp	r3, #0
    af0c:	dd3d      	ble.n	af8a <__sflush_r+0x96>
    af0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    af10:	2e00      	cmp	r6, #0
    af12:	d03a      	beq.n	af8a <__sflush_r+0x96>
    af14:	2300      	movs	r3, #0
    af16:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    af1a:	682f      	ldr	r7, [r5, #0]
    af1c:	6a21      	ldr	r1, [r4, #32]
    af1e:	602b      	str	r3, [r5, #0]
    af20:	d025      	beq.n	af6e <__sflush_r+0x7a>
    af22:	6d62      	ldr	r2, [r4, #84]	; 0x54
    af24:	89a3      	ldrh	r3, [r4, #12]
    af26:	0758      	lsls	r0, r3, #29
    af28:	d505      	bpl.n	af36 <__sflush_r+0x42>
    af2a:	6863      	ldr	r3, [r4, #4]
    af2c:	1ad2      	subs	r2, r2, r3
    af2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    af30:	b10b      	cbz	r3, af36 <__sflush_r+0x42>
    af32:	6c23      	ldr	r3, [r4, #64]	; 0x40
    af34:	1ad2      	subs	r2, r2, r3
    af36:	6a21      	ldr	r1, [r4, #32]
    af38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    af3a:	2300      	movs	r3, #0
    af3c:	4628      	mov	r0, r5
    af3e:	47b0      	blx	r6
    af40:	1c41      	adds	r1, r0, #1
    af42:	d024      	beq.n	af8e <__sflush_r+0x9a>
    af44:	2300      	movs	r3, #0
    af46:	6063      	str	r3, [r4, #4]
    af48:	6923      	ldr	r3, [r4, #16]
    af4a:	6023      	str	r3, [r4, #0]
    af4c:	89a3      	ldrh	r3, [r4, #12]
    af4e:	04da      	lsls	r2, r3, #19
    af50:	d500      	bpl.n	af54 <__sflush_r+0x60>
    af52:	6560      	str	r0, [r4, #84]	; 0x54
    af54:	6b61      	ldr	r1, [r4, #52]	; 0x34
    af56:	602f      	str	r7, [r5, #0]
    af58:	b1b9      	cbz	r1, af8a <__sflush_r+0x96>
    af5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
    af5e:	4299      	cmp	r1, r3
    af60:	d002      	beq.n	af68 <__sflush_r+0x74>
    af62:	4628      	mov	r0, r5
    af64:	f7fc fb48 	bl	75f8 <_free_r>
    af68:	2300      	movs	r3, #0
    af6a:	6363      	str	r3, [r4, #52]	; 0x34
    af6c:	e00d      	b.n	af8a <__sflush_r+0x96>
    af6e:	2301      	movs	r3, #1
    af70:	4628      	mov	r0, r5
    af72:	47b0      	blx	r6
    af74:	1c46      	adds	r6, r0, #1
    af76:	4602      	mov	r2, r0
    af78:	d1d4      	bne.n	af24 <__sflush_r+0x30>
    af7a:	682b      	ldr	r3, [r5, #0]
    af7c:	2b00      	cmp	r3, #0
    af7e:	d0d1      	beq.n	af24 <__sflush_r+0x30>
    af80:	2b1d      	cmp	r3, #29
    af82:	d001      	beq.n	af88 <__sflush_r+0x94>
    af84:	2b16      	cmp	r3, #22
    af86:	d12a      	bne.n	afde <__sflush_r+0xea>
    af88:	602f      	str	r7, [r5, #0]
    af8a:	2000      	movs	r0, #0
    af8c:	e02e      	b.n	afec <__sflush_r+0xf8>
    af8e:	682a      	ldr	r2, [r5, #0]
    af90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    af94:	b142      	cbz	r2, afa8 <__sflush_r+0xb4>
    af96:	2a1d      	cmp	r2, #29
    af98:	d001      	beq.n	af9e <__sflush_r+0xaa>
    af9a:	2a16      	cmp	r2, #22
    af9c:	d121      	bne.n	afe2 <__sflush_r+0xee>
    af9e:	2300      	movs	r3, #0
    afa0:	6063      	str	r3, [r4, #4]
    afa2:	6923      	ldr	r3, [r4, #16]
    afa4:	6023      	str	r3, [r4, #0]
    afa6:	e7d5      	b.n	af54 <__sflush_r+0x60>
    afa8:	6062      	str	r2, [r4, #4]
    afaa:	6922      	ldr	r2, [r4, #16]
    afac:	6022      	str	r2, [r4, #0]
    afae:	e7ce      	b.n	af4e <__sflush_r+0x5a>
    afb0:	690f      	ldr	r7, [r1, #16]
    afb2:	2f00      	cmp	r7, #0
    afb4:	d0e9      	beq.n	af8a <__sflush_r+0x96>
    afb6:	0793      	lsls	r3, r2, #30
    afb8:	680e      	ldr	r6, [r1, #0]
    afba:	bf08      	it	eq
    afbc:	694b      	ldreq	r3, [r1, #20]
    afbe:	600f      	str	r7, [r1, #0]
    afc0:	bf18      	it	ne
    afc2:	2300      	movne	r3, #0
    afc4:	1bf6      	subs	r6, r6, r7
    afc6:	608b      	str	r3, [r1, #8]
    afc8:	2e00      	cmp	r6, #0
    afca:	ddde      	ble.n	af8a <__sflush_r+0x96>
    afcc:	6a21      	ldr	r1, [r4, #32]
    afce:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    afd2:	4633      	mov	r3, r6
    afd4:	463a      	mov	r2, r7
    afd6:	4628      	mov	r0, r5
    afd8:	47e0      	blx	ip
    afda:	2800      	cmp	r0, #0
    afdc:	dc07      	bgt.n	afee <__sflush_r+0xfa>
    afde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    afe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    afe6:	81a3      	strh	r3, [r4, #12]
    afe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    afec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afee:	4407      	add	r7, r0
    aff0:	1a36      	subs	r6, r6, r0
    aff2:	e7e9      	b.n	afc8 <__sflush_r+0xd4>

0000aff4 <__swhatbuf_r>:
    aff4:	b570      	push	{r4, r5, r6, lr}
    aff6:	460c      	mov	r4, r1
    aff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    affc:	2900      	cmp	r1, #0
    affe:	b096      	sub	sp, #88	; 0x58
    b000:	4615      	mov	r5, r2
    b002:	461e      	mov	r6, r3
    b004:	da0d      	bge.n	b022 <__swhatbuf_r+0x2e>
    b006:	89a3      	ldrh	r3, [r4, #12]
    b008:	f013 0f80 	tst.w	r3, #128	; 0x80
    b00c:	f04f 0100 	mov.w	r1, #0
    b010:	bf14      	ite	ne
    b012:	2340      	movne	r3, #64	; 0x40
    b014:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    b018:	2000      	movs	r0, #0
    b01a:	6031      	str	r1, [r6, #0]
    b01c:	602b      	str	r3, [r5, #0]
    b01e:	b016      	add	sp, #88	; 0x58
    b020:	bd70      	pop	{r4, r5, r6, pc}
    b022:	466a      	mov	r2, sp
    b024:	f7fd fa8e 	bl	8544 <_fstat_r>
    b028:	2800      	cmp	r0, #0
    b02a:	dbec      	blt.n	b006 <__swhatbuf_r+0x12>
    b02c:	9901      	ldr	r1, [sp, #4]
    b02e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
    b032:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
    b036:	4259      	negs	r1, r3
    b038:	4159      	adcs	r1, r3
    b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b03e:	e7eb      	b.n	b018 <__swhatbuf_r+0x24>

0000b040 <_realloc_r>:
    b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b042:	4607      	mov	r7, r0
    b044:	4615      	mov	r5, r2
    b046:	460c      	mov	r4, r1
    b048:	b921      	cbnz	r1, b054 <_realloc_r+0x14>
    b04a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b04e:	4611      	mov	r1, r2
    b050:	f7fc bb1c 	b.w	768c <_malloc_r>
    b054:	b922      	cbnz	r2, b060 <_realloc_r+0x20>
    b056:	f7fc facf 	bl	75f8 <_free_r>
    b05a:	2400      	movs	r4, #0
    b05c:	4620      	mov	r0, r4
    b05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b060:	f000 f813 	bl	b08a <_malloc_usable_size_r>
    b064:	42a8      	cmp	r0, r5
    b066:	d2f9      	bcs.n	b05c <_realloc_r+0x1c>
    b068:	4629      	mov	r1, r5
    b06a:	4638      	mov	r0, r7
    b06c:	f7fc fb0e 	bl	768c <_malloc_r>
    b070:	4606      	mov	r6, r0
    b072:	2800      	cmp	r0, #0
    b074:	d0f1      	beq.n	b05a <_realloc_r+0x1a>
    b076:	4621      	mov	r1, r4
    b078:	462a      	mov	r2, r5
    b07a:	f7ff fd3f 	bl	aafc <memcpy>
    b07e:	4621      	mov	r1, r4
    b080:	4638      	mov	r0, r7
    b082:	f7fc fab9 	bl	75f8 <_free_r>
    b086:	4634      	mov	r4, r6
    b088:	e7e8      	b.n	b05c <_realloc_r+0x1c>

0000b08a <_malloc_usable_size_r>:
    b08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b08e:	1f18      	subs	r0, r3, #4
    b090:	2b00      	cmp	r3, #0
    b092:	bfbc      	itt	lt
    b094:	580b      	ldrlt	r3, [r1, r0]
    b096:	18c0      	addlt	r0, r0, r3
    b098:	4770      	bx	lr
	...
